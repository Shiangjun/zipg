/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GraphQueryAggregatorService_H
#define GraphQueryAggregatorService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "succinct_graph_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GraphQueryAggregatorServiceIf {
 public:
  virtual ~GraphQueryAggregatorServiceIf() {}
  virtual int32_t init() = 0;
  virtual int32_t connect_to_aggregators() = 0;
  virtual void disconnect_from_aggregators() = 0;
  virtual void shutdown() = 0;
  virtual void record_edge_updates(const int32_t next_shard, const int32_t local_shard, const std::vector<ThriftSrcAtype> & updates) = 0;
  virtual void record_node_append(const int32_t next_shard, const int32_t local_shard, const int64_t obj) = 0;
  virtual void get_attribute(std::string& _return, const int64_t nodeId, const int32_t attrId) = 0;
  virtual void get_attribute_local(std::string& _return, const int64_t shardId, const int64_t nodeId, const int32_t attrId) = 0;
  virtual void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId) = 0;
  virtual void get_neighbors_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId) = 0;
  virtual void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype) = 0;
  virtual void get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) = 0;
  virtual void get_neighbors_attr(std::vector<int64_t> & _return, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_nodes_local(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) = 0;
  virtual void get_nodes2_local(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) = 0;
  virtual void filter_nodes_local(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype) = 0;
  virtual void get_edge_attrs_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) = 0;
  virtual void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) = 0;
  virtual void assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) = 0;
  virtual int64_t assoc_count(const int64_t src, const int64_t atype) = 0;
  virtual int64_t assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype) = 0;
  virtual void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) = 0;
  virtual void assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) = 0;
  virtual int64_t obj_add(const std::vector<std::string> & attrs) = 0;
  virtual void obj_get(std::vector<std::string> & _return, const int64_t nodeId) = 0;
  virtual void obj_get_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId) = 0;
  virtual void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) = 0;
  virtual void assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) = 0;
  virtual int32_t assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr) = 0;
  virtual void getNode(std::string& _return, const int64_t id) = 0;
  virtual void getNodeLocal(std::string& _return, const int64_t shard_id, const int64_t id) = 0;
  virtual int64_t addNode(const int64_t id, const std::string& data) = 0;
  virtual bool deleteNode(const int64_t id) = 0;
  virtual bool deleteNodeLocal(const int64_t shard_id, const int64_t id) = 0;
  virtual bool updateNode(const int64_t id, const std::string& data) = 0;
  virtual void getLink(ThriftAssoc& _return, const int64_t id1, const int64_t link_type, const int64_t id2) = 0;
  virtual void getLinkLocal(ThriftAssoc& _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2) = 0;
  virtual bool addLink(const ThriftAssoc& link) = 0;
  virtual bool deleteLink(const int64_t id1, const int64_t link_type, const int64_t id2) = 0;
  virtual bool deleteLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2) = 0;
  virtual bool updateLink(const ThriftAssoc& link) = 0;
  virtual void getLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type) = 0;
  virtual void getLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type) = 0;
  virtual void getFilteredLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit) = 0;
  virtual void getFilteredLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit) = 0;
  virtual int64_t countLinks(const int64_t id1, const int64_t link_type) = 0;
  virtual void regular_path_query(RPQCtx& _return, const std::string& query) = 0;
  virtual void rpq(RPQCtx& _return, const RPQuery& query) = 0;
  virtual void path_query(RPQCtx& _return, const std::vector<int64_t> & query) = 0;
  virtual void path_query_local(RPQCtx& _return, const std::vector<int64_t> & query) = 0;
  virtual void advance_path_query_ctx(RPQCtx& _return, const std::vector<int64_t> & query, const RPQCtx& ctx) = 0;
};

class GraphQueryAggregatorServiceIfFactory {
 public:
  typedef GraphQueryAggregatorServiceIf Handler;

  virtual ~GraphQueryAggregatorServiceIfFactory() {}

  virtual GraphQueryAggregatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GraphQueryAggregatorServiceIf* /* handler */) = 0;
};

class GraphQueryAggregatorServiceIfSingletonFactory : virtual public GraphQueryAggregatorServiceIfFactory {
 public:
  GraphQueryAggregatorServiceIfSingletonFactory(const boost::shared_ptr<GraphQueryAggregatorServiceIf>& iface) : iface_(iface) {}
  virtual ~GraphQueryAggregatorServiceIfSingletonFactory() {}

  virtual GraphQueryAggregatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GraphQueryAggregatorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<GraphQueryAggregatorServiceIf> iface_;
};

class GraphQueryAggregatorServiceNull : virtual public GraphQueryAggregatorServiceIf {
 public:
  virtual ~GraphQueryAggregatorServiceNull() {}
  int32_t init() {
    int32_t _return = 0;
    return _return;
  }
  int32_t connect_to_aggregators() {
    int32_t _return = 0;
    return _return;
  }
  void disconnect_from_aggregators() {
    return;
  }
  void shutdown() {
    return;
  }
  void record_edge_updates(const int32_t /* next_shard */, const int32_t /* local_shard */, const std::vector<ThriftSrcAtype> & /* updates */) {
    return;
  }
  void record_node_append(const int32_t /* next_shard */, const int32_t /* local_shard */, const int64_t /* obj */) {
    return;
  }
  void get_attribute(std::string& /* _return */, const int64_t /* nodeId */, const int32_t /* attrId */) {
    return;
  }
  void get_attribute_local(std::string& /* _return */, const int64_t /* shardId */, const int64_t /* nodeId */, const int32_t /* attrId */) {
    return;
  }
  void get_neighbors(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */) {
    return;
  }
  void get_neighbors_local(std::vector<int64_t> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */) {
    return;
  }
  void get_neighbors_atype(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void get_neighbors_atype_local(std::vector<int64_t> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void get_neighbors_attr(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_neighbors_attr_local(std::vector<int64_t> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_nodes(std::set<int64_t> & /* _return */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_nodes_local(std::set<int64_t> & /* _return */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_nodes2(std::set<int64_t> & /* _return */, const int32_t /* attrId1 */, const std::string& /* attrKey1 */, const int32_t /* attrId2 */, const std::string& /* attrKey2 */) {
    return;
  }
  void get_nodes2_local(std::set<int64_t> & /* _return */, const int32_t /* attrId1 */, const std::string& /* attrKey1 */, const int32_t /* attrId2 */, const std::string& /* attrKey2 */) {
    return;
  }
  void filter_nodes_local(std::vector<int64_t> & /* _return */, const std::vector<int64_t> & /* nodeIds */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_edge_attrs(std::vector<std::string> & /* _return */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void get_edge_attrs_local(std::vector<std::string> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void assoc_range(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const int32_t /* off */, const int32_t /* len */) {
    return;
  }
  void assoc_range_local(std::vector<ThriftAssoc> & /* _return */, const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */, const int32_t /* off */, const int32_t /* len */) {
    return;
  }
  int64_t assoc_count(const int64_t /* src */, const int64_t /* atype */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t assoc_count_local(const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */) {
    int64_t _return = 0;
    return _return;
  }
  void assoc_get(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const std::set<int64_t> & /* dstIdSet */, const int64_t /* tLow */, const int64_t /* tHigh */) {
    return;
  }
  void assoc_get_local(std::vector<ThriftAssoc> & /* _return */, const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */, const std::set<int64_t> & /* dstIdSet */, const int64_t /* tLow */, const int64_t /* tHigh */) {
    return;
  }
  int64_t obj_add(const std::vector<std::string> & /* attrs */) {
    int64_t _return = 0;
    return _return;
  }
  void obj_get(std::vector<std::string> & /* _return */, const int64_t /* nodeId */) {
    return;
  }
  void obj_get_local(std::vector<std::string> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */) {
    return;
  }
  void assoc_time_range(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const int64_t /* tLow */, const int64_t /* tHigh */, const int32_t /* limit */) {
    return;
  }
  void assoc_time_range_local(std::vector<ThriftAssoc> & /* _return */, const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */, const int64_t /* tLow */, const int64_t /* tHigh */, const int32_t /* limit */) {
    return;
  }
  int32_t assoc_add(const int64_t /* src */, const int64_t /* atype */, const int64_t /* dst */, const int64_t /* time */, const std::string& /* attr */) {
    int32_t _return = 0;
    return _return;
  }
  void getNode(std::string& /* _return */, const int64_t /* id */) {
    return;
  }
  void getNodeLocal(std::string& /* _return */, const int64_t /* shard_id */, const int64_t /* id */) {
    return;
  }
  int64_t addNode(const int64_t /* id */, const std::string& /* data */) {
    int64_t _return = 0;
    return _return;
  }
  bool deleteNode(const int64_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool deleteNodeLocal(const int64_t /* shard_id */, const int64_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool updateNode(const int64_t /* id */, const std::string& /* data */) {
    bool _return = false;
    return _return;
  }
  void getLink(ThriftAssoc& /* _return */, const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* id2 */) {
    return;
  }
  void getLinkLocal(ThriftAssoc& /* _return */, const int64_t /* shard_id */, const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* id2 */) {
    return;
  }
  bool addLink(const ThriftAssoc& /* link */) {
    bool _return = false;
    return _return;
  }
  bool deleteLink(const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* id2 */) {
    bool _return = false;
    return _return;
  }
  bool deleteLinkLocal(const int64_t /* shard_id */, const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* id2 */) {
    bool _return = false;
    return _return;
  }
  bool updateLink(const ThriftAssoc& /* link */) {
    bool _return = false;
    return _return;
  }
  void getLinkList(std::vector<ThriftAssoc> & /* _return */, const int64_t /* id1 */, const int64_t /* link_type */) {
    return;
  }
  void getLinkListLocal(std::vector<ThriftAssoc> & /* _return */, const int64_t /* shard_id */, const int64_t /* id1 */, const int64_t /* link_type */) {
    return;
  }
  void getFilteredLinkList(std::vector<ThriftAssoc> & /* _return */, const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* min_timestamp */, const int64_t /* max_timestamp */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void getFilteredLinkListLocal(std::vector<ThriftAssoc> & /* _return */, const int64_t /* shard_id */, const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* min_timestamp */, const int64_t /* max_timestamp */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  int64_t countLinks(const int64_t /* id1 */, const int64_t /* link_type */) {
    int64_t _return = 0;
    return _return;
  }
  void regular_path_query(RPQCtx& /* _return */, const std::string& /* query */) {
    return;
  }
  void rpq(RPQCtx& /* _return */, const RPQuery& /* query */) {
    return;
  }
  void path_query(RPQCtx& /* _return */, const std::vector<int64_t> & /* query */) {
    return;
  }
  void path_query_local(RPQCtx& /* _return */, const std::vector<int64_t> & /* query */) {
    return;
  }
  void advance_path_query_ctx(RPQCtx& /* _return */, const std::vector<int64_t> & /* query */, const RPQCtx& /* ctx */) {
    return;
  }
};


class GraphQueryAggregatorService_init_args {
 public:

  GraphQueryAggregatorService_init_args(const GraphQueryAggregatorService_init_args&);
  GraphQueryAggregatorService_init_args& operator=(const GraphQueryAggregatorService_init_args&);
  GraphQueryAggregatorService_init_args() {
  }

  virtual ~GraphQueryAggregatorService_init_args() throw();

  bool operator == (const GraphQueryAggregatorService_init_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_init_pargs {
 public:


  virtual ~GraphQueryAggregatorService_init_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_init_result__isset {
  _GraphQueryAggregatorService_init_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_init_result__isset;

class GraphQueryAggregatorService_init_result {
 public:

  GraphQueryAggregatorService_init_result(const GraphQueryAggregatorService_init_result&);
  GraphQueryAggregatorService_init_result& operator=(const GraphQueryAggregatorService_init_result&);
  GraphQueryAggregatorService_init_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_init_result() throw();
  int32_t success;

  _GraphQueryAggregatorService_init_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_init_presult__isset {
  _GraphQueryAggregatorService_init_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_init_presult__isset;

class GraphQueryAggregatorService_init_presult {
 public:


  virtual ~GraphQueryAggregatorService_init_presult() throw();
  int32_t* success;

  _GraphQueryAggregatorService_init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_connect_to_aggregators_args {
 public:

  GraphQueryAggregatorService_connect_to_aggregators_args(const GraphQueryAggregatorService_connect_to_aggregators_args&);
  GraphQueryAggregatorService_connect_to_aggregators_args& operator=(const GraphQueryAggregatorService_connect_to_aggregators_args&);
  GraphQueryAggregatorService_connect_to_aggregators_args() {
  }

  virtual ~GraphQueryAggregatorService_connect_to_aggregators_args() throw();

  bool operator == (const GraphQueryAggregatorService_connect_to_aggregators_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_connect_to_aggregators_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_connect_to_aggregators_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_connect_to_aggregators_pargs {
 public:


  virtual ~GraphQueryAggregatorService_connect_to_aggregators_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_connect_to_aggregators_result__isset {
  _GraphQueryAggregatorService_connect_to_aggregators_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_connect_to_aggregators_result__isset;

class GraphQueryAggregatorService_connect_to_aggregators_result {
 public:

  GraphQueryAggregatorService_connect_to_aggregators_result(const GraphQueryAggregatorService_connect_to_aggregators_result&);
  GraphQueryAggregatorService_connect_to_aggregators_result& operator=(const GraphQueryAggregatorService_connect_to_aggregators_result&);
  GraphQueryAggregatorService_connect_to_aggregators_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_connect_to_aggregators_result() throw();
  int32_t success;

  _GraphQueryAggregatorService_connect_to_aggregators_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_connect_to_aggregators_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_connect_to_aggregators_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_connect_to_aggregators_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_connect_to_aggregators_presult__isset {
  _GraphQueryAggregatorService_connect_to_aggregators_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_connect_to_aggregators_presult__isset;

class GraphQueryAggregatorService_connect_to_aggregators_presult {
 public:


  virtual ~GraphQueryAggregatorService_connect_to_aggregators_presult() throw();
  int32_t* success;

  _GraphQueryAggregatorService_connect_to_aggregators_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_disconnect_from_aggregators_args {
 public:

  GraphQueryAggregatorService_disconnect_from_aggregators_args(const GraphQueryAggregatorService_disconnect_from_aggregators_args&);
  GraphQueryAggregatorService_disconnect_from_aggregators_args& operator=(const GraphQueryAggregatorService_disconnect_from_aggregators_args&);
  GraphQueryAggregatorService_disconnect_from_aggregators_args() {
  }

  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_args() throw();

  bool operator == (const GraphQueryAggregatorService_disconnect_from_aggregators_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_disconnect_from_aggregators_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_disconnect_from_aggregators_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_aggregators_pargs {
 public:


  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_aggregators_result {
 public:

  GraphQueryAggregatorService_disconnect_from_aggregators_result(const GraphQueryAggregatorService_disconnect_from_aggregators_result&);
  GraphQueryAggregatorService_disconnect_from_aggregators_result& operator=(const GraphQueryAggregatorService_disconnect_from_aggregators_result&);
  GraphQueryAggregatorService_disconnect_from_aggregators_result() {
  }

  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_result() throw();

  bool operator == (const GraphQueryAggregatorService_disconnect_from_aggregators_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_disconnect_from_aggregators_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_disconnect_from_aggregators_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_aggregators_presult {
 public:


  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_shutdown_args {
 public:

  GraphQueryAggregatorService_shutdown_args(const GraphQueryAggregatorService_shutdown_args&);
  GraphQueryAggregatorService_shutdown_args& operator=(const GraphQueryAggregatorService_shutdown_args&);
  GraphQueryAggregatorService_shutdown_args() {
  }

  virtual ~GraphQueryAggregatorService_shutdown_args() throw();

  bool operator == (const GraphQueryAggregatorService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_shutdown_pargs {
 public:


  virtual ~GraphQueryAggregatorService_shutdown_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_shutdown_result {
 public:

  GraphQueryAggregatorService_shutdown_result(const GraphQueryAggregatorService_shutdown_result&);
  GraphQueryAggregatorService_shutdown_result& operator=(const GraphQueryAggregatorService_shutdown_result&);
  GraphQueryAggregatorService_shutdown_result() {
  }

  virtual ~GraphQueryAggregatorService_shutdown_result() throw();

  bool operator == (const GraphQueryAggregatorService_shutdown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_shutdown_presult {
 public:


  virtual ~GraphQueryAggregatorService_shutdown_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_record_edge_updates_args__isset {
  _GraphQueryAggregatorService_record_edge_updates_args__isset() : next_shard(false), local_shard(false), updates(false) {}
  bool next_shard :1;
  bool local_shard :1;
  bool updates :1;
} _GraphQueryAggregatorService_record_edge_updates_args__isset;

class GraphQueryAggregatorService_record_edge_updates_args {
 public:

  GraphQueryAggregatorService_record_edge_updates_args(const GraphQueryAggregatorService_record_edge_updates_args&);
  GraphQueryAggregatorService_record_edge_updates_args& operator=(const GraphQueryAggregatorService_record_edge_updates_args&);
  GraphQueryAggregatorService_record_edge_updates_args() : next_shard(0), local_shard(0) {
  }

  virtual ~GraphQueryAggregatorService_record_edge_updates_args() throw();
  int32_t next_shard;
  int32_t local_shard;
  std::vector<ThriftSrcAtype>  updates;

  _GraphQueryAggregatorService_record_edge_updates_args__isset __isset;

  void __set_next_shard(const int32_t val);

  void __set_local_shard(const int32_t val);

  void __set_updates(const std::vector<ThriftSrcAtype> & val);

  bool operator == (const GraphQueryAggregatorService_record_edge_updates_args & rhs) const
  {
    if (!(next_shard == rhs.next_shard))
      return false;
    if (!(local_shard == rhs.local_shard))
      return false;
    if (!(updates == rhs.updates))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_record_edge_updates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_record_edge_updates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_record_edge_updates_pargs {
 public:


  virtual ~GraphQueryAggregatorService_record_edge_updates_pargs() throw();
  const int32_t* next_shard;
  const int32_t* local_shard;
  const std::vector<ThriftSrcAtype> * updates;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_record_edge_updates_result {
 public:

  GraphQueryAggregatorService_record_edge_updates_result(const GraphQueryAggregatorService_record_edge_updates_result&);
  GraphQueryAggregatorService_record_edge_updates_result& operator=(const GraphQueryAggregatorService_record_edge_updates_result&);
  GraphQueryAggregatorService_record_edge_updates_result() {
  }

  virtual ~GraphQueryAggregatorService_record_edge_updates_result() throw();

  bool operator == (const GraphQueryAggregatorService_record_edge_updates_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_record_edge_updates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_record_edge_updates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_record_edge_updates_presult {
 public:


  virtual ~GraphQueryAggregatorService_record_edge_updates_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_record_node_append_args__isset {
  _GraphQueryAggregatorService_record_node_append_args__isset() : next_shard(false), local_shard(false), obj(false) {}
  bool next_shard :1;
  bool local_shard :1;
  bool obj :1;
} _GraphQueryAggregatorService_record_node_append_args__isset;

class GraphQueryAggregatorService_record_node_append_args {
 public:

  GraphQueryAggregatorService_record_node_append_args(const GraphQueryAggregatorService_record_node_append_args&);
  GraphQueryAggregatorService_record_node_append_args& operator=(const GraphQueryAggregatorService_record_node_append_args&);
  GraphQueryAggregatorService_record_node_append_args() : next_shard(0), local_shard(0), obj(0) {
  }

  virtual ~GraphQueryAggregatorService_record_node_append_args() throw();
  int32_t next_shard;
  int32_t local_shard;
  int64_t obj;

  _GraphQueryAggregatorService_record_node_append_args__isset __isset;

  void __set_next_shard(const int32_t val);

  void __set_local_shard(const int32_t val);

  void __set_obj(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_record_node_append_args & rhs) const
  {
    if (!(next_shard == rhs.next_shard))
      return false;
    if (!(local_shard == rhs.local_shard))
      return false;
    if (!(obj == rhs.obj))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_record_node_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_record_node_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_record_node_append_pargs {
 public:


  virtual ~GraphQueryAggregatorService_record_node_append_pargs() throw();
  const int32_t* next_shard;
  const int32_t* local_shard;
  const int64_t* obj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_record_node_append_result {
 public:

  GraphQueryAggregatorService_record_node_append_result(const GraphQueryAggregatorService_record_node_append_result&);
  GraphQueryAggregatorService_record_node_append_result& operator=(const GraphQueryAggregatorService_record_node_append_result&);
  GraphQueryAggregatorService_record_node_append_result() {
  }

  virtual ~GraphQueryAggregatorService_record_node_append_result() throw();

  bool operator == (const GraphQueryAggregatorService_record_node_append_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_record_node_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_record_node_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_record_node_append_presult {
 public:


  virtual ~GraphQueryAggregatorService_record_node_append_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_attribute_args__isset {
  _GraphQueryAggregatorService_get_attribute_args__isset() : nodeId(false), attrId(false) {}
  bool nodeId :1;
  bool attrId :1;
} _GraphQueryAggregatorService_get_attribute_args__isset;

class GraphQueryAggregatorService_get_attribute_args {
 public:

  GraphQueryAggregatorService_get_attribute_args(const GraphQueryAggregatorService_get_attribute_args&);
  GraphQueryAggregatorService_get_attribute_args& operator=(const GraphQueryAggregatorService_get_attribute_args&);
  GraphQueryAggregatorService_get_attribute_args() : nodeId(0), attrId(0) {
  }

  virtual ~GraphQueryAggregatorService_get_attribute_args() throw();
  int64_t nodeId;
  int32_t attrId;

  _GraphQueryAggregatorService_get_attribute_args__isset __isset;

  void __set_nodeId(const int64_t val);

  void __set_attrId(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_get_attribute_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_attribute_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_attribute_pargs() throw();
  const int64_t* nodeId;
  const int32_t* attrId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_attribute_result__isset {
  _GraphQueryAggregatorService_get_attribute_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_attribute_result__isset;

class GraphQueryAggregatorService_get_attribute_result {
 public:

  GraphQueryAggregatorService_get_attribute_result(const GraphQueryAggregatorService_get_attribute_result&);
  GraphQueryAggregatorService_get_attribute_result& operator=(const GraphQueryAggregatorService_get_attribute_result&);
  GraphQueryAggregatorService_get_attribute_result() : success() {
  }

  virtual ~GraphQueryAggregatorService_get_attribute_result() throw();
  std::string success;

  _GraphQueryAggregatorService_get_attribute_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_attribute_presult__isset {
  _GraphQueryAggregatorService_get_attribute_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_attribute_presult__isset;

class GraphQueryAggregatorService_get_attribute_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_attribute_presult() throw();
  std::string* success;

  _GraphQueryAggregatorService_get_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_attribute_local_args__isset {
  _GraphQueryAggregatorService_get_attribute_local_args__isset() : shardId(false), nodeId(false), attrId(false) {}
  bool shardId :1;
  bool nodeId :1;
  bool attrId :1;
} _GraphQueryAggregatorService_get_attribute_local_args__isset;

class GraphQueryAggregatorService_get_attribute_local_args {
 public:

  GraphQueryAggregatorService_get_attribute_local_args(const GraphQueryAggregatorService_get_attribute_local_args&);
  GraphQueryAggregatorService_get_attribute_local_args& operator=(const GraphQueryAggregatorService_get_attribute_local_args&);
  GraphQueryAggregatorService_get_attribute_local_args() : shardId(0), nodeId(0), attrId(0) {
  }

  virtual ~GraphQueryAggregatorService_get_attribute_local_args() throw();
  int64_t shardId;
  int64_t nodeId;
  int32_t attrId;

  _GraphQueryAggregatorService_get_attribute_local_args__isset __isset;

  void __set_shardId(const int64_t val);

  void __set_nodeId(const int64_t val);

  void __set_attrId(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_get_attribute_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_attribute_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_attribute_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_attribute_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_attribute_local_pargs() throw();
  const int64_t* shardId;
  const int64_t* nodeId;
  const int32_t* attrId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_attribute_local_result__isset {
  _GraphQueryAggregatorService_get_attribute_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_attribute_local_result__isset;

class GraphQueryAggregatorService_get_attribute_local_result {
 public:

  GraphQueryAggregatorService_get_attribute_local_result(const GraphQueryAggregatorService_get_attribute_local_result&);
  GraphQueryAggregatorService_get_attribute_local_result& operator=(const GraphQueryAggregatorService_get_attribute_local_result&);
  GraphQueryAggregatorService_get_attribute_local_result() : success() {
  }

  virtual ~GraphQueryAggregatorService_get_attribute_local_result() throw();
  std::string success;

  _GraphQueryAggregatorService_get_attribute_local_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_attribute_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_attribute_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_attribute_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_attribute_local_presult__isset {
  _GraphQueryAggregatorService_get_attribute_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_attribute_local_presult__isset;

class GraphQueryAggregatorService_get_attribute_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_attribute_local_presult() throw();
  std::string* success;

  _GraphQueryAggregatorService_get_attribute_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_args__isset {
  _GraphQueryAggregatorService_get_neighbors_args__isset() : nodeId(false) {}
  bool nodeId :1;
} _GraphQueryAggregatorService_get_neighbors_args__isset;

class GraphQueryAggregatorService_get_neighbors_args {
 public:

  GraphQueryAggregatorService_get_neighbors_args(const GraphQueryAggregatorService_get_neighbors_args&);
  GraphQueryAggregatorService_get_neighbors_args& operator=(const GraphQueryAggregatorService_get_neighbors_args&);
  GraphQueryAggregatorService_get_neighbors_args() : nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_args() throw();
  int64_t nodeId;

  _GraphQueryAggregatorService_get_neighbors_args__isset __isset;

  void __set_nodeId(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_pargs() throw();
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_result__isset {
  _GraphQueryAggregatorService_get_neighbors_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_result__isset;

class GraphQueryAggregatorService_get_neighbors_result {
 public:

  GraphQueryAggregatorService_get_neighbors_result(const GraphQueryAggregatorService_get_neighbors_result&);
  GraphQueryAggregatorService_get_neighbors_result& operator=(const GraphQueryAggregatorService_get_neighbors_result&);
  GraphQueryAggregatorService_get_neighbors_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_presult__isset;

class GraphQueryAggregatorService_get_neighbors_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_local_args__isset {
  _GraphQueryAggregatorService_get_neighbors_local_args__isset() : shardId(false), nodeId(false) {}
  bool shardId :1;
  bool nodeId :1;
} _GraphQueryAggregatorService_get_neighbors_local_args__isset;

class GraphQueryAggregatorService_get_neighbors_local_args {
 public:

  GraphQueryAggregatorService_get_neighbors_local_args(const GraphQueryAggregatorService_get_neighbors_local_args&);
  GraphQueryAggregatorService_get_neighbors_local_args& operator=(const GraphQueryAggregatorService_get_neighbors_local_args&);
  GraphQueryAggregatorService_get_neighbors_local_args() : shardId(0), nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_local_args() throw();
  int32_t shardId;
  int64_t nodeId;

  _GraphQueryAggregatorService_get_neighbors_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_nodeId(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_local_result__isset {
  _GraphQueryAggregatorService_get_neighbors_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_local_result__isset;

class GraphQueryAggregatorService_get_neighbors_local_result {
 public:

  GraphQueryAggregatorService_get_neighbors_local_result(const GraphQueryAggregatorService_get_neighbors_local_result&);
  GraphQueryAggregatorService_get_neighbors_local_result& operator=(const GraphQueryAggregatorService_get_neighbors_local_result&);
  GraphQueryAggregatorService_get_neighbors_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_local_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_local_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_local_presult__isset;

class GraphQueryAggregatorService_get_neighbors_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_local_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_args__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_args__isset() : nodeId(false), atype(false) {}
  bool nodeId :1;
  bool atype :1;
} _GraphQueryAggregatorService_get_neighbors_atype_args__isset;

class GraphQueryAggregatorService_get_neighbors_atype_args {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_args(const GraphQueryAggregatorService_get_neighbors_atype_args&);
  GraphQueryAggregatorService_get_neighbors_atype_args& operator=(const GraphQueryAggregatorService_get_neighbors_atype_args&);
  GraphQueryAggregatorService_get_neighbors_atype_args() : nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_args() throw();
  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_neighbors_atype_args__isset __isset;

  void __set_nodeId(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_atype_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_pargs() throw();
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_result__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_atype_result__isset;

class GraphQueryAggregatorService_get_neighbors_atype_result {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_result(const GraphQueryAggregatorService_get_neighbors_atype_result&);
  GraphQueryAggregatorService_get_neighbors_atype_result& operator=(const GraphQueryAggregatorService_get_neighbors_atype_result&);
  GraphQueryAggregatorService_get_neighbors_atype_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_atype_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_atype_presult__isset;

class GraphQueryAggregatorService_get_neighbors_atype_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_atype_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset() : shardId(false), nodeId(false), atype(false) {}
  bool shardId :1;
  bool nodeId :1;
  bool atype :1;
} _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset;

class GraphQueryAggregatorService_get_neighbors_atype_local_args {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_local_args(const GraphQueryAggregatorService_get_neighbors_atype_local_args&);
  GraphQueryAggregatorService_get_neighbors_atype_local_args& operator=(const GraphQueryAggregatorService_get_neighbors_atype_local_args&);
  GraphQueryAggregatorService_get_neighbors_atype_local_args() : shardId(0), nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_args() throw();
  int32_t shardId;
  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_nodeId(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_atype_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset;

class GraphQueryAggregatorService_get_neighbors_atype_local_result {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_local_result(const GraphQueryAggregatorService_get_neighbors_atype_local_result&);
  GraphQueryAggregatorService_get_neighbors_atype_local_result& operator=(const GraphQueryAggregatorService_get_neighbors_atype_local_result&);
  GraphQueryAggregatorService_get_neighbors_atype_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset;

class GraphQueryAggregatorService_get_neighbors_atype_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_args__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_args__isset() : nodeId(false), attrId(false), attrKey(false) {}
  bool nodeId :1;
  bool attrId :1;
  bool attrKey :1;
} _GraphQueryAggregatorService_get_neighbors_attr_args__isset;

class GraphQueryAggregatorService_get_neighbors_attr_args {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_args(const GraphQueryAggregatorService_get_neighbors_attr_args&);
  GraphQueryAggregatorService_get_neighbors_attr_args& operator=(const GraphQueryAggregatorService_get_neighbors_attr_args&);
  GraphQueryAggregatorService_get_neighbors_attr_args() : nodeId(0), attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_args() throw();
  int64_t nodeId;
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_neighbors_attr_args__isset __isset;

  void __set_nodeId(const int64_t val);

  void __set_attrId(const int32_t val);

  void __set_attrKey(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_attr_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_pargs() throw();
  const int64_t* nodeId;
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_result__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_attr_result__isset;

class GraphQueryAggregatorService_get_neighbors_attr_result {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_result(const GraphQueryAggregatorService_get_neighbors_attr_result&);
  GraphQueryAggregatorService_get_neighbors_attr_result& operator=(const GraphQueryAggregatorService_get_neighbors_attr_result&);
  GraphQueryAggregatorService_get_neighbors_attr_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_attr_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_attr_presult__isset;

class GraphQueryAggregatorService_get_neighbors_attr_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_attr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset() : shardId(false), nodeId(false), attrId(false), attrKey(false) {}
  bool shardId :1;
  bool nodeId :1;
  bool attrId :1;
  bool attrKey :1;
} _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset;

class GraphQueryAggregatorService_get_neighbors_attr_local_args {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_local_args(const GraphQueryAggregatorService_get_neighbors_attr_local_args&);
  GraphQueryAggregatorService_get_neighbors_attr_local_args& operator=(const GraphQueryAggregatorService_get_neighbors_attr_local_args&);
  GraphQueryAggregatorService_get_neighbors_attr_local_args() : shardId(0), nodeId(0), attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_args() throw();
  int32_t shardId;
  int64_t nodeId;
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_nodeId(const int64_t val);

  void __set_attrId(const int32_t val);

  void __set_attrKey(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_attr_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* nodeId;
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset;

class GraphQueryAggregatorService_get_neighbors_attr_local_result {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_local_result(const GraphQueryAggregatorService_get_neighbors_attr_local_result&);
  GraphQueryAggregatorService_get_neighbors_attr_local_result& operator=(const GraphQueryAggregatorService_get_neighbors_attr_local_result&);
  GraphQueryAggregatorService_get_neighbors_attr_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset;

class GraphQueryAggregatorService_get_neighbors_attr_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes_args__isset {
  _GraphQueryAggregatorService_get_nodes_args__isset() : attrId(false), attrKey(false) {}
  bool attrId :1;
  bool attrKey :1;
} _GraphQueryAggregatorService_get_nodes_args__isset;

class GraphQueryAggregatorService_get_nodes_args {
 public:

  GraphQueryAggregatorService_get_nodes_args(const GraphQueryAggregatorService_get_nodes_args&);
  GraphQueryAggregatorService_get_nodes_args& operator=(const GraphQueryAggregatorService_get_nodes_args&);
  GraphQueryAggregatorService_get_nodes_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_args() throw();
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_nodes_args__isset __isset;

  void __set_attrId(const int32_t val);

  void __set_attrKey(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_nodes_args & rhs) const
  {
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_pargs() throw();
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_result__isset {
  _GraphQueryAggregatorService_get_nodes_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes_result__isset;

class GraphQueryAggregatorService_get_nodes_result {
 public:

  GraphQueryAggregatorService_get_nodes_result(const GraphQueryAggregatorService_get_nodes_result&);
  GraphQueryAggregatorService_get_nodes_result& operator=(const GraphQueryAggregatorService_get_nodes_result&);
  GraphQueryAggregatorService_get_nodes_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_result() throw();
  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_nodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_presult__isset {
  _GraphQueryAggregatorService_get_nodes_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes_presult__isset;

class GraphQueryAggregatorService_get_nodes_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_presult() throw();
  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes_local_args__isset {
  _GraphQueryAggregatorService_get_nodes_local_args__isset() : attrId(false), attrKey(false) {}
  bool attrId :1;
  bool attrKey :1;
} _GraphQueryAggregatorService_get_nodes_local_args__isset;

class GraphQueryAggregatorService_get_nodes_local_args {
 public:

  GraphQueryAggregatorService_get_nodes_local_args(const GraphQueryAggregatorService_get_nodes_local_args&);
  GraphQueryAggregatorService_get_nodes_local_args& operator=(const GraphQueryAggregatorService_get_nodes_local_args&);
  GraphQueryAggregatorService_get_nodes_local_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_local_args() throw();
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_nodes_local_args__isset __isset;

  void __set_attrId(const int32_t val);

  void __set_attrKey(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_nodes_local_args & rhs) const
  {
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_local_pargs() throw();
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_local_result__isset {
  _GraphQueryAggregatorService_get_nodes_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes_local_result__isset;

class GraphQueryAggregatorService_get_nodes_local_result {
 public:

  GraphQueryAggregatorService_get_nodes_local_result(const GraphQueryAggregatorService_get_nodes_local_result&);
  GraphQueryAggregatorService_get_nodes_local_result& operator=(const GraphQueryAggregatorService_get_nodes_local_result&);
  GraphQueryAggregatorService_get_nodes_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_local_result() throw();
  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes_local_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_nodes_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_local_presult__isset {
  _GraphQueryAggregatorService_get_nodes_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes_local_presult__isset;

class GraphQueryAggregatorService_get_nodes_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_local_presult() throw();
  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes2_args__isset {
  _GraphQueryAggregatorService_get_nodes2_args__isset() : attrId1(false), attrKey1(false), attrId2(false), attrKey2(false) {}
  bool attrId1 :1;
  bool attrKey1 :1;
  bool attrId2 :1;
  bool attrKey2 :1;
} _GraphQueryAggregatorService_get_nodes2_args__isset;

class GraphQueryAggregatorService_get_nodes2_args {
 public:

  GraphQueryAggregatorService_get_nodes2_args(const GraphQueryAggregatorService_get_nodes2_args&);
  GraphQueryAggregatorService_get_nodes2_args& operator=(const GraphQueryAggregatorService_get_nodes2_args&);
  GraphQueryAggregatorService_get_nodes2_args() : attrId1(0), attrKey1(), attrId2(0), attrKey2() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_args() throw();
  int32_t attrId1;
  std::string attrKey1;
  int32_t attrId2;
  std::string attrKey2;

  _GraphQueryAggregatorService_get_nodes2_args__isset __isset;

  void __set_attrId1(const int32_t val);

  void __set_attrKey1(const std::string& val);

  void __set_attrId2(const int32_t val);

  void __set_attrKey2(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_nodes2_args & rhs) const
  {
    if (!(attrId1 == rhs.attrId1))
      return false;
    if (!(attrKey1 == rhs.attrKey1))
      return false;
    if (!(attrId2 == rhs.attrId2))
      return false;
    if (!(attrKey2 == rhs.attrKey2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes2_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_pargs() throw();
  const int32_t* attrId1;
  const std::string* attrKey1;
  const int32_t* attrId2;
  const std::string* attrKey2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_result__isset {
  _GraphQueryAggregatorService_get_nodes2_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes2_result__isset;

class GraphQueryAggregatorService_get_nodes2_result {
 public:

  GraphQueryAggregatorService_get_nodes2_result(const GraphQueryAggregatorService_get_nodes2_result&);
  GraphQueryAggregatorService_get_nodes2_result& operator=(const GraphQueryAggregatorService_get_nodes2_result&);
  GraphQueryAggregatorService_get_nodes2_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_result() throw();
  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes2_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_nodes2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_presult__isset {
  _GraphQueryAggregatorService_get_nodes2_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes2_presult__isset;

class GraphQueryAggregatorService_get_nodes2_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_presult() throw();
  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes2_local_args__isset {
  _GraphQueryAggregatorService_get_nodes2_local_args__isset() : attrId1(false), attrKey1(false), attrId2(false), attrKey2(false) {}
  bool attrId1 :1;
  bool attrKey1 :1;
  bool attrId2 :1;
  bool attrKey2 :1;
} _GraphQueryAggregatorService_get_nodes2_local_args__isset;

class GraphQueryAggregatorService_get_nodes2_local_args {
 public:

  GraphQueryAggregatorService_get_nodes2_local_args(const GraphQueryAggregatorService_get_nodes2_local_args&);
  GraphQueryAggregatorService_get_nodes2_local_args& operator=(const GraphQueryAggregatorService_get_nodes2_local_args&);
  GraphQueryAggregatorService_get_nodes2_local_args() : attrId1(0), attrKey1(), attrId2(0), attrKey2() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_local_args() throw();
  int32_t attrId1;
  std::string attrKey1;
  int32_t attrId2;
  std::string attrKey2;

  _GraphQueryAggregatorService_get_nodes2_local_args__isset __isset;

  void __set_attrId1(const int32_t val);

  void __set_attrKey1(const std::string& val);

  void __set_attrId2(const int32_t val);

  void __set_attrKey2(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_get_nodes2_local_args & rhs) const
  {
    if (!(attrId1 == rhs.attrId1))
      return false;
    if (!(attrKey1 == rhs.attrKey1))
      return false;
    if (!(attrId2 == rhs.attrId2))
      return false;
    if (!(attrKey2 == rhs.attrKey2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes2_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_local_pargs() throw();
  const int32_t* attrId1;
  const std::string* attrKey1;
  const int32_t* attrId2;
  const std::string* attrKey2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_local_result__isset {
  _GraphQueryAggregatorService_get_nodes2_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes2_local_result__isset;

class GraphQueryAggregatorService_get_nodes2_local_result {
 public:

  GraphQueryAggregatorService_get_nodes2_local_result(const GraphQueryAggregatorService_get_nodes2_local_result&);
  GraphQueryAggregatorService_get_nodes2_local_result& operator=(const GraphQueryAggregatorService_get_nodes2_local_result&);
  GraphQueryAggregatorService_get_nodes2_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_local_result() throw();
  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes2_local_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_get_nodes2_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_local_presult__isset {
  _GraphQueryAggregatorService_get_nodes2_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_nodes2_local_presult__isset;

class GraphQueryAggregatorService_get_nodes2_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_local_presult() throw();
  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes2_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_filter_nodes_local_args__isset {
  _GraphQueryAggregatorService_filter_nodes_local_args__isset() : nodeIds(false), attrId(false), attrKey(false) {}
  bool nodeIds :1;
  bool attrId :1;
  bool attrKey :1;
} _GraphQueryAggregatorService_filter_nodes_local_args__isset;

class GraphQueryAggregatorService_filter_nodes_local_args {
 public:

  GraphQueryAggregatorService_filter_nodes_local_args(const GraphQueryAggregatorService_filter_nodes_local_args&);
  GraphQueryAggregatorService_filter_nodes_local_args& operator=(const GraphQueryAggregatorService_filter_nodes_local_args&);
  GraphQueryAggregatorService_filter_nodes_local_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_filter_nodes_local_args() throw();
  std::vector<int64_t>  nodeIds;
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_filter_nodes_local_args__isset __isset;

  void __set_nodeIds(const std::vector<int64_t> & val);

  void __set_attrId(const int32_t val);

  void __set_attrKey(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_filter_nodes_local_args & rhs) const
  {
    if (!(nodeIds == rhs.nodeIds))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_filter_nodes_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_filter_nodes_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_filter_nodes_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_filter_nodes_local_pargs() throw();
  const std::vector<int64_t> * nodeIds;
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_filter_nodes_local_result__isset {
  _GraphQueryAggregatorService_filter_nodes_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_filter_nodes_local_result__isset;

class GraphQueryAggregatorService_filter_nodes_local_result {
 public:

  GraphQueryAggregatorService_filter_nodes_local_result(const GraphQueryAggregatorService_filter_nodes_local_result&);
  GraphQueryAggregatorService_filter_nodes_local_result& operator=(const GraphQueryAggregatorService_filter_nodes_local_result&);
  GraphQueryAggregatorService_filter_nodes_local_result() {
  }

  virtual ~GraphQueryAggregatorService_filter_nodes_local_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_filter_nodes_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_filter_nodes_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_filter_nodes_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_filter_nodes_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_filter_nodes_local_presult__isset {
  _GraphQueryAggregatorService_filter_nodes_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_filter_nodes_local_presult__isset;

class GraphQueryAggregatorService_filter_nodes_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_filter_nodes_local_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_filter_nodes_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_args__isset {
  _GraphQueryAggregatorService_get_edge_attrs_args__isset() : nodeId(false), atype(false) {}
  bool nodeId :1;
  bool atype :1;
} _GraphQueryAggregatorService_get_edge_attrs_args__isset;

class GraphQueryAggregatorService_get_edge_attrs_args {
 public:

  GraphQueryAggregatorService_get_edge_attrs_args(const GraphQueryAggregatorService_get_edge_attrs_args&);
  GraphQueryAggregatorService_get_edge_attrs_args& operator=(const GraphQueryAggregatorService_get_edge_attrs_args&);
  GraphQueryAggregatorService_get_edge_attrs_args() : nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_args() throw();
  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_edge_attrs_args__isset __isset;

  void __set_nodeId(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_edge_attrs_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_pargs() throw();
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_result__isset {
  _GraphQueryAggregatorService_get_edge_attrs_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_edge_attrs_result__isset;

class GraphQueryAggregatorService_get_edge_attrs_result {
 public:

  GraphQueryAggregatorService_get_edge_attrs_result(const GraphQueryAggregatorService_get_edge_attrs_result&);
  GraphQueryAggregatorService_get_edge_attrs_result& operator=(const GraphQueryAggregatorService_get_edge_attrs_result&);
  GraphQueryAggregatorService_get_edge_attrs_result() {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_result() throw();
  std::vector<std::string>  success;

  _GraphQueryAggregatorService_get_edge_attrs_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_presult__isset {
  _GraphQueryAggregatorService_get_edge_attrs_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_edge_attrs_presult__isset;

class GraphQueryAggregatorService_get_edge_attrs_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_presult() throw();
  std::vector<std::string> * success;

  _GraphQueryAggregatorService_get_edge_attrs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_local_args__isset {
  _GraphQueryAggregatorService_get_edge_attrs_local_args__isset() : shardId(false), nodeId(false), atype(false) {}
  bool shardId :1;
  bool nodeId :1;
  bool atype :1;
} _GraphQueryAggregatorService_get_edge_attrs_local_args__isset;

class GraphQueryAggregatorService_get_edge_attrs_local_args {
 public:

  GraphQueryAggregatorService_get_edge_attrs_local_args(const GraphQueryAggregatorService_get_edge_attrs_local_args&);
  GraphQueryAggregatorService_get_edge_attrs_local_args& operator=(const GraphQueryAggregatorService_get_edge_attrs_local_args&);
  GraphQueryAggregatorService_get_edge_attrs_local_args() : shardId(0), nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_args() throw();
  int32_t shardId;
  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_edge_attrs_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_nodeId(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_edge_attrs_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_local_result__isset {
  _GraphQueryAggregatorService_get_edge_attrs_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_edge_attrs_local_result__isset;

class GraphQueryAggregatorService_get_edge_attrs_local_result {
 public:

  GraphQueryAggregatorService_get_edge_attrs_local_result(const GraphQueryAggregatorService_get_edge_attrs_local_result&);
  GraphQueryAggregatorService_get_edge_attrs_local_result& operator=(const GraphQueryAggregatorService_get_edge_attrs_local_result&);
  GraphQueryAggregatorService_get_edge_attrs_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_result() throw();
  std::vector<std::string>  success;

  _GraphQueryAggregatorService_get_edge_attrs_local_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset {
  _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset;

class GraphQueryAggregatorService_get_edge_attrs_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_presult() throw();
  std::vector<std::string> * success;

  _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_range_args__isset {
  _GraphQueryAggregatorService_assoc_range_args__isset() : src(false), atype(false), off(false), len(false) {}
  bool src :1;
  bool atype :1;
  bool off :1;
  bool len :1;
} _GraphQueryAggregatorService_assoc_range_args__isset;

class GraphQueryAggregatorService_assoc_range_args {
 public:

  GraphQueryAggregatorService_assoc_range_args(const GraphQueryAggregatorService_assoc_range_args&);
  GraphQueryAggregatorService_assoc_range_args& operator=(const GraphQueryAggregatorService_assoc_range_args&);
  GraphQueryAggregatorService_assoc_range_args() : src(0), atype(0), off(0), len(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_args() throw();
  int64_t src;
  int64_t atype;
  int32_t off;
  int32_t len;

  _GraphQueryAggregatorService_assoc_range_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_off(const int32_t val);

  void __set_len(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_range_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_range_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const int32_t* off;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_result__isset {
  _GraphQueryAggregatorService_assoc_range_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_range_result__isset;

class GraphQueryAggregatorService_assoc_range_result {
 public:

  GraphQueryAggregatorService_assoc_range_result(const GraphQueryAggregatorService_assoc_range_result&);
  GraphQueryAggregatorService_assoc_range_result& operator=(const GraphQueryAggregatorService_assoc_range_result&);
  GraphQueryAggregatorService_assoc_range_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_range_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_assoc_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_presult__isset {
  _GraphQueryAggregatorService_assoc_range_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_range_presult__isset;

class GraphQueryAggregatorService_assoc_range_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_range_local_args__isset {
  _GraphQueryAggregatorService_assoc_range_local_args__isset() : shardId(false), src(false), atype(false), off(false), len(false) {}
  bool shardId :1;
  bool src :1;
  bool atype :1;
  bool off :1;
  bool len :1;
} _GraphQueryAggregatorService_assoc_range_local_args__isset;

class GraphQueryAggregatorService_assoc_range_local_args {
 public:

  GraphQueryAggregatorService_assoc_range_local_args(const GraphQueryAggregatorService_assoc_range_local_args&);
  GraphQueryAggregatorService_assoc_range_local_args& operator=(const GraphQueryAggregatorService_assoc_range_local_args&);
  GraphQueryAggregatorService_assoc_range_local_args() : shardId(0), src(0), atype(0), off(0), len(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_local_args() throw();
  int32_t shardId;
  int64_t src;
  int64_t atype;
  int32_t off;
  int32_t len;

  _GraphQueryAggregatorService_assoc_range_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_off(const int32_t val);

  void __set_len(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_range_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_range_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;
  const int32_t* off;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_local_result__isset {
  _GraphQueryAggregatorService_assoc_range_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_range_local_result__isset;

class GraphQueryAggregatorService_assoc_range_local_result {
 public:

  GraphQueryAggregatorService_assoc_range_local_result(const GraphQueryAggregatorService_assoc_range_local_result&);
  GraphQueryAggregatorService_assoc_range_local_result& operator=(const GraphQueryAggregatorService_assoc_range_local_result&);
  GraphQueryAggregatorService_assoc_range_local_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_local_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_range_local_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_assoc_range_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_local_presult__isset {
  _GraphQueryAggregatorService_assoc_range_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_range_local_presult__isset;

class GraphQueryAggregatorService_assoc_range_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_local_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_range_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_count_args__isset {
  _GraphQueryAggregatorService_assoc_count_args__isset() : src(false), atype(false) {}
  bool src :1;
  bool atype :1;
} _GraphQueryAggregatorService_assoc_count_args__isset;

class GraphQueryAggregatorService_assoc_count_args {
 public:

  GraphQueryAggregatorService_assoc_count_args(const GraphQueryAggregatorService_assoc_count_args&);
  GraphQueryAggregatorService_assoc_count_args& operator=(const GraphQueryAggregatorService_assoc_count_args&);
  GraphQueryAggregatorService_assoc_count_args() : src(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_args() throw();
  int64_t src;
  int64_t atype;

  _GraphQueryAggregatorService_assoc_count_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_count_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_count_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_pargs() throw();
  const int64_t* src;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_result__isset {
  _GraphQueryAggregatorService_assoc_count_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_count_result__isset;

class GraphQueryAggregatorService_assoc_count_result {
 public:

  GraphQueryAggregatorService_assoc_count_result(const GraphQueryAggregatorService_assoc_count_result&);
  GraphQueryAggregatorService_assoc_count_result& operator=(const GraphQueryAggregatorService_assoc_count_result&);
  GraphQueryAggregatorService_assoc_count_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_result() throw();
  int64_t success;

  _GraphQueryAggregatorService_assoc_count_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_presult__isset {
  _GraphQueryAggregatorService_assoc_count_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_count_presult__isset;

class GraphQueryAggregatorService_assoc_count_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_presult() throw();
  int64_t* success;

  _GraphQueryAggregatorService_assoc_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_count_local_args__isset {
  _GraphQueryAggregatorService_assoc_count_local_args__isset() : shardId(false), src(false), atype(false) {}
  bool shardId :1;
  bool src :1;
  bool atype :1;
} _GraphQueryAggregatorService_assoc_count_local_args__isset;

class GraphQueryAggregatorService_assoc_count_local_args {
 public:

  GraphQueryAggregatorService_assoc_count_local_args(const GraphQueryAggregatorService_assoc_count_local_args&);
  GraphQueryAggregatorService_assoc_count_local_args& operator=(const GraphQueryAggregatorService_assoc_count_local_args&);
  GraphQueryAggregatorService_assoc_count_local_args() : shardId(0), src(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_local_args() throw();
  int32_t shardId;
  int64_t src;
  int64_t atype;

  _GraphQueryAggregatorService_assoc_count_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_count_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_count_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_local_result__isset {
  _GraphQueryAggregatorService_assoc_count_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_count_local_result__isset;

class GraphQueryAggregatorService_assoc_count_local_result {
 public:

  GraphQueryAggregatorService_assoc_count_local_result(const GraphQueryAggregatorService_assoc_count_local_result&);
  GraphQueryAggregatorService_assoc_count_local_result& operator=(const GraphQueryAggregatorService_assoc_count_local_result&);
  GraphQueryAggregatorService_assoc_count_local_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_local_result() throw();
  int64_t success;

  _GraphQueryAggregatorService_assoc_count_local_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_count_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_local_presult__isset {
  _GraphQueryAggregatorService_assoc_count_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_count_local_presult__isset;

class GraphQueryAggregatorService_assoc_count_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_local_presult() throw();
  int64_t* success;

  _GraphQueryAggregatorService_assoc_count_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_get_args__isset {
  _GraphQueryAggregatorService_assoc_get_args__isset() : src(false), atype(false), dstIdSet(false), tLow(false), tHigh(false) {}
  bool src :1;
  bool atype :1;
  bool dstIdSet :1;
  bool tLow :1;
  bool tHigh :1;
} _GraphQueryAggregatorService_assoc_get_args__isset;

class GraphQueryAggregatorService_assoc_get_args {
 public:

  GraphQueryAggregatorService_assoc_get_args(const GraphQueryAggregatorService_assoc_get_args&);
  GraphQueryAggregatorService_assoc_get_args& operator=(const GraphQueryAggregatorService_assoc_get_args&);
  GraphQueryAggregatorService_assoc_get_args() : src(0), atype(0), tLow(0), tHigh(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_args() throw();
  int64_t src;
  int64_t atype;
  std::set<int64_t>  dstIdSet;
  int64_t tLow;
  int64_t tHigh;

  _GraphQueryAggregatorService_assoc_get_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_dstIdSet(const std::set<int64_t> & val);

  void __set_tLow(const int64_t val);

  void __set_tHigh(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_get_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dstIdSet == rhs.dstIdSet))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_get_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const std::set<int64_t> * dstIdSet;
  const int64_t* tLow;
  const int64_t* tHigh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_result__isset {
  _GraphQueryAggregatorService_assoc_get_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_get_result__isset;

class GraphQueryAggregatorService_assoc_get_result {
 public:

  GraphQueryAggregatorService_assoc_get_result(const GraphQueryAggregatorService_assoc_get_result&);
  GraphQueryAggregatorService_assoc_get_result& operator=(const GraphQueryAggregatorService_assoc_get_result&);
  GraphQueryAggregatorService_assoc_get_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_get_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_assoc_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_presult__isset {
  _GraphQueryAggregatorService_assoc_get_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_get_presult__isset;

class GraphQueryAggregatorService_assoc_get_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_get_local_args__isset {
  _GraphQueryAggregatorService_assoc_get_local_args__isset() : shardId(false), src(false), atype(false), dstIdSet(false), tLow(false), tHigh(false) {}
  bool shardId :1;
  bool src :1;
  bool atype :1;
  bool dstIdSet :1;
  bool tLow :1;
  bool tHigh :1;
} _GraphQueryAggregatorService_assoc_get_local_args__isset;

class GraphQueryAggregatorService_assoc_get_local_args {
 public:

  GraphQueryAggregatorService_assoc_get_local_args(const GraphQueryAggregatorService_assoc_get_local_args&);
  GraphQueryAggregatorService_assoc_get_local_args& operator=(const GraphQueryAggregatorService_assoc_get_local_args&);
  GraphQueryAggregatorService_assoc_get_local_args() : shardId(0), src(0), atype(0), tLow(0), tHigh(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_local_args() throw();
  int32_t shardId;
  int64_t src;
  int64_t atype;
  std::set<int64_t>  dstIdSet;
  int64_t tLow;
  int64_t tHigh;

  _GraphQueryAggregatorService_assoc_get_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_dstIdSet(const std::set<int64_t> & val);

  void __set_tLow(const int64_t val);

  void __set_tHigh(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_get_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dstIdSet == rhs.dstIdSet))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_get_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;
  const std::set<int64_t> * dstIdSet;
  const int64_t* tLow;
  const int64_t* tHigh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_local_result__isset {
  _GraphQueryAggregatorService_assoc_get_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_get_local_result__isset;

class GraphQueryAggregatorService_assoc_get_local_result {
 public:

  GraphQueryAggregatorService_assoc_get_local_result(const GraphQueryAggregatorService_assoc_get_local_result&);
  GraphQueryAggregatorService_assoc_get_local_result& operator=(const GraphQueryAggregatorService_assoc_get_local_result&);
  GraphQueryAggregatorService_assoc_get_local_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_local_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_get_local_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_assoc_get_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_local_presult__isset {
  _GraphQueryAggregatorService_assoc_get_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_get_local_presult__isset;

class GraphQueryAggregatorService_assoc_get_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_local_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_get_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_obj_add_args__isset {
  _GraphQueryAggregatorService_obj_add_args__isset() : attrs(false) {}
  bool attrs :1;
} _GraphQueryAggregatorService_obj_add_args__isset;

class GraphQueryAggregatorService_obj_add_args {
 public:

  GraphQueryAggregatorService_obj_add_args(const GraphQueryAggregatorService_obj_add_args&);
  GraphQueryAggregatorService_obj_add_args& operator=(const GraphQueryAggregatorService_obj_add_args&);
  GraphQueryAggregatorService_obj_add_args() {
  }

  virtual ~GraphQueryAggregatorService_obj_add_args() throw();
  std::vector<std::string>  attrs;

  _GraphQueryAggregatorService_obj_add_args__isset __isset;

  void __set_attrs(const std::vector<std::string> & val);

  bool operator == (const GraphQueryAggregatorService_obj_add_args & rhs) const
  {
    if (!(attrs == rhs.attrs))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_obj_add_pargs {
 public:


  virtual ~GraphQueryAggregatorService_obj_add_pargs() throw();
  const std::vector<std::string> * attrs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_add_result__isset {
  _GraphQueryAggregatorService_obj_add_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_obj_add_result__isset;

class GraphQueryAggregatorService_obj_add_result {
 public:

  GraphQueryAggregatorService_obj_add_result(const GraphQueryAggregatorService_obj_add_result&);
  GraphQueryAggregatorService_obj_add_result& operator=(const GraphQueryAggregatorService_obj_add_result&);
  GraphQueryAggregatorService_obj_add_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_obj_add_result() throw();
  int64_t success;

  _GraphQueryAggregatorService_obj_add_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_obj_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_add_presult__isset {
  _GraphQueryAggregatorService_obj_add_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_obj_add_presult__isset;

class GraphQueryAggregatorService_obj_add_presult {
 public:


  virtual ~GraphQueryAggregatorService_obj_add_presult() throw();
  int64_t* success;

  _GraphQueryAggregatorService_obj_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_obj_get_args__isset {
  _GraphQueryAggregatorService_obj_get_args__isset() : nodeId(false) {}
  bool nodeId :1;
} _GraphQueryAggregatorService_obj_get_args__isset;

class GraphQueryAggregatorService_obj_get_args {
 public:

  GraphQueryAggregatorService_obj_get_args(const GraphQueryAggregatorService_obj_get_args&);
  GraphQueryAggregatorService_obj_get_args& operator=(const GraphQueryAggregatorService_obj_get_args&);
  GraphQueryAggregatorService_obj_get_args() : nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_obj_get_args() throw();
  int64_t nodeId;

  _GraphQueryAggregatorService_obj_get_args__isset __isset;

  void __set_nodeId(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_obj_get_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_obj_get_pargs {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_pargs() throw();
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_result__isset {
  _GraphQueryAggregatorService_obj_get_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_obj_get_result__isset;

class GraphQueryAggregatorService_obj_get_result {
 public:

  GraphQueryAggregatorService_obj_get_result(const GraphQueryAggregatorService_obj_get_result&);
  GraphQueryAggregatorService_obj_get_result& operator=(const GraphQueryAggregatorService_obj_get_result&);
  GraphQueryAggregatorService_obj_get_result() {
  }

  virtual ~GraphQueryAggregatorService_obj_get_result() throw();
  std::vector<std::string>  success;

  _GraphQueryAggregatorService_obj_get_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const GraphQueryAggregatorService_obj_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_presult__isset {
  _GraphQueryAggregatorService_obj_get_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_obj_get_presult__isset;

class GraphQueryAggregatorService_obj_get_presult {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_presult() throw();
  std::vector<std::string> * success;

  _GraphQueryAggregatorService_obj_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_obj_get_local_args__isset {
  _GraphQueryAggregatorService_obj_get_local_args__isset() : shardId(false), nodeId(false) {}
  bool shardId :1;
  bool nodeId :1;
} _GraphQueryAggregatorService_obj_get_local_args__isset;

class GraphQueryAggregatorService_obj_get_local_args {
 public:

  GraphQueryAggregatorService_obj_get_local_args(const GraphQueryAggregatorService_obj_get_local_args&);
  GraphQueryAggregatorService_obj_get_local_args& operator=(const GraphQueryAggregatorService_obj_get_local_args&);
  GraphQueryAggregatorService_obj_get_local_args() : shardId(0), nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_obj_get_local_args() throw();
  int32_t shardId;
  int64_t nodeId;

  _GraphQueryAggregatorService_obj_get_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_nodeId(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_obj_get_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_obj_get_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_local_result__isset {
  _GraphQueryAggregatorService_obj_get_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_obj_get_local_result__isset;

class GraphQueryAggregatorService_obj_get_local_result {
 public:

  GraphQueryAggregatorService_obj_get_local_result(const GraphQueryAggregatorService_obj_get_local_result&);
  GraphQueryAggregatorService_obj_get_local_result& operator=(const GraphQueryAggregatorService_obj_get_local_result&);
  GraphQueryAggregatorService_obj_get_local_result() {
  }

  virtual ~GraphQueryAggregatorService_obj_get_local_result() throw();
  std::vector<std::string>  success;

  _GraphQueryAggregatorService_obj_get_local_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const GraphQueryAggregatorService_obj_get_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_local_presult__isset {
  _GraphQueryAggregatorService_obj_get_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_obj_get_local_presult__isset;

class GraphQueryAggregatorService_obj_get_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_local_presult() throw();
  std::vector<std::string> * success;

  _GraphQueryAggregatorService_obj_get_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_args__isset {
  _GraphQueryAggregatorService_assoc_time_range_args__isset() : src(false), atype(false), tLow(false), tHigh(false), limit(false) {}
  bool src :1;
  bool atype :1;
  bool tLow :1;
  bool tHigh :1;
  bool limit :1;
} _GraphQueryAggregatorService_assoc_time_range_args__isset;

class GraphQueryAggregatorService_assoc_time_range_args {
 public:

  GraphQueryAggregatorService_assoc_time_range_args(const GraphQueryAggregatorService_assoc_time_range_args&);
  GraphQueryAggregatorService_assoc_time_range_args& operator=(const GraphQueryAggregatorService_assoc_time_range_args&);
  GraphQueryAggregatorService_assoc_time_range_args() : src(0), atype(0), tLow(0), tHigh(0), limit(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_args() throw();
  int64_t src;
  int64_t atype;
  int64_t tLow;
  int64_t tHigh;
  int32_t limit;

  _GraphQueryAggregatorService_assoc_time_range_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_tLow(const int64_t val);

  void __set_tHigh(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_time_range_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const int64_t* tLow;
  const int64_t* tHigh;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_result__isset {
  _GraphQueryAggregatorService_assoc_time_range_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_time_range_result__isset;

class GraphQueryAggregatorService_assoc_time_range_result {
 public:

  GraphQueryAggregatorService_assoc_time_range_result(const GraphQueryAggregatorService_assoc_time_range_result&);
  GraphQueryAggregatorService_assoc_time_range_result& operator=(const GraphQueryAggregatorService_assoc_time_range_result&);
  GraphQueryAggregatorService_assoc_time_range_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_time_range_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_presult__isset {
  _GraphQueryAggregatorService_assoc_time_range_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_time_range_presult__isset;

class GraphQueryAggregatorService_assoc_time_range_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_time_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_local_args__isset {
  _GraphQueryAggregatorService_assoc_time_range_local_args__isset() : shardId(false), src(false), atype(false), tLow(false), tHigh(false), limit(false) {}
  bool shardId :1;
  bool src :1;
  bool atype :1;
  bool tLow :1;
  bool tHigh :1;
  bool limit :1;
} _GraphQueryAggregatorService_assoc_time_range_local_args__isset;

class GraphQueryAggregatorService_assoc_time_range_local_args {
 public:

  GraphQueryAggregatorService_assoc_time_range_local_args(const GraphQueryAggregatorService_assoc_time_range_local_args&);
  GraphQueryAggregatorService_assoc_time_range_local_args& operator=(const GraphQueryAggregatorService_assoc_time_range_local_args&);
  GraphQueryAggregatorService_assoc_time_range_local_args() : shardId(0), src(0), atype(0), tLow(0), tHigh(0), limit(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_local_args() throw();
  int32_t shardId;
  int64_t src;
  int64_t atype;
  int64_t tLow;
  int64_t tHigh;
  int32_t limit;

  _GraphQueryAggregatorService_assoc_time_range_local_args__isset __isset;

  void __set_shardId(const int32_t val);

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_tLow(const int64_t val);

  void __set_tHigh(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_time_range_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_local_pargs() throw();
  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;
  const int64_t* tLow;
  const int64_t* tHigh;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_local_result__isset {
  _GraphQueryAggregatorService_assoc_time_range_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_time_range_local_result__isset;

class GraphQueryAggregatorService_assoc_time_range_local_result {
 public:

  GraphQueryAggregatorService_assoc_time_range_local_result(const GraphQueryAggregatorService_assoc_time_range_local_result&);
  GraphQueryAggregatorService_assoc_time_range_local_result& operator=(const GraphQueryAggregatorService_assoc_time_range_local_result&);
  GraphQueryAggregatorService_assoc_time_range_local_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_local_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_time_range_local_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_local_presult__isset {
  _GraphQueryAggregatorService_assoc_time_range_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_time_range_local_presult__isset;

class GraphQueryAggregatorService_assoc_time_range_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_local_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_time_range_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_add_args__isset {
  _GraphQueryAggregatorService_assoc_add_args__isset() : src(false), atype(false), dst(false), time(false), attr(false) {}
  bool src :1;
  bool atype :1;
  bool dst :1;
  bool time :1;
  bool attr :1;
} _GraphQueryAggregatorService_assoc_add_args__isset;

class GraphQueryAggregatorService_assoc_add_args {
 public:

  GraphQueryAggregatorService_assoc_add_args(const GraphQueryAggregatorService_assoc_add_args&);
  GraphQueryAggregatorService_assoc_add_args& operator=(const GraphQueryAggregatorService_assoc_add_args&);
  GraphQueryAggregatorService_assoc_add_args() : src(0), atype(0), dst(0), time(0), attr() {
  }

  virtual ~GraphQueryAggregatorService_assoc_add_args() throw();
  int64_t src;
  int64_t atype;
  int64_t dst;
  int64_t time;
  std::string attr;

  _GraphQueryAggregatorService_assoc_add_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_dst(const int64_t val);

  void __set_time(const int64_t val);

  void __set_attr(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_assoc_add_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dst == rhs.dst))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_add_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_add_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const int64_t* dst;
  const int64_t* time;
  const std::string* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_add_result__isset {
  _GraphQueryAggregatorService_assoc_add_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_add_result__isset;

class GraphQueryAggregatorService_assoc_add_result {
 public:

  GraphQueryAggregatorService_assoc_add_result(const GraphQueryAggregatorService_assoc_add_result&);
  GraphQueryAggregatorService_assoc_add_result& operator=(const GraphQueryAggregatorService_assoc_add_result&);
  GraphQueryAggregatorService_assoc_add_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_add_result() throw();
  int32_t success;

  _GraphQueryAggregatorService_assoc_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GraphQueryAggregatorService_assoc_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_add_presult__isset {
  _GraphQueryAggregatorService_assoc_add_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_assoc_add_presult__isset;

class GraphQueryAggregatorService_assoc_add_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_add_presult() throw();
  int32_t* success;

  _GraphQueryAggregatorService_assoc_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getNode_args__isset {
  _GraphQueryAggregatorService_getNode_args__isset() : id(false) {}
  bool id :1;
} _GraphQueryAggregatorService_getNode_args__isset;

class GraphQueryAggregatorService_getNode_args {
 public:

  GraphQueryAggregatorService_getNode_args(const GraphQueryAggregatorService_getNode_args&);
  GraphQueryAggregatorService_getNode_args& operator=(const GraphQueryAggregatorService_getNode_args&);
  GraphQueryAggregatorService_getNode_args() : id(0) {
  }

  virtual ~GraphQueryAggregatorService_getNode_args() throw();
  int64_t id;

  _GraphQueryAggregatorService_getNode_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getNode_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getNode_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getNode_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getNode_result__isset {
  _GraphQueryAggregatorService_getNode_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getNode_result__isset;

class GraphQueryAggregatorService_getNode_result {
 public:

  GraphQueryAggregatorService_getNode_result(const GraphQueryAggregatorService_getNode_result&);
  GraphQueryAggregatorService_getNode_result& operator=(const GraphQueryAggregatorService_getNode_result&);
  GraphQueryAggregatorService_getNode_result() : success() {
  }

  virtual ~GraphQueryAggregatorService_getNode_result() throw();
  std::string success;

  _GraphQueryAggregatorService_getNode_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_getNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getNode_presult__isset {
  _GraphQueryAggregatorService_getNode_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getNode_presult__isset;

class GraphQueryAggregatorService_getNode_presult {
 public:


  virtual ~GraphQueryAggregatorService_getNode_presult() throw();
  std::string* success;

  _GraphQueryAggregatorService_getNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getNodeLocal_args__isset {
  _GraphQueryAggregatorService_getNodeLocal_args__isset() : shard_id(false), id(false) {}
  bool shard_id :1;
  bool id :1;
} _GraphQueryAggregatorService_getNodeLocal_args__isset;

class GraphQueryAggregatorService_getNodeLocal_args {
 public:

  GraphQueryAggregatorService_getNodeLocal_args(const GraphQueryAggregatorService_getNodeLocal_args&);
  GraphQueryAggregatorService_getNodeLocal_args& operator=(const GraphQueryAggregatorService_getNodeLocal_args&);
  GraphQueryAggregatorService_getNodeLocal_args() : shard_id(0), id(0) {
  }

  virtual ~GraphQueryAggregatorService_getNodeLocal_args() throw();
  int64_t shard_id;
  int64_t id;

  _GraphQueryAggregatorService_getNodeLocal_args__isset __isset;

  void __set_shard_id(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getNodeLocal_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getNodeLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getNodeLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getNodeLocal_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getNodeLocal_pargs() throw();
  const int64_t* shard_id;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getNodeLocal_result__isset {
  _GraphQueryAggregatorService_getNodeLocal_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getNodeLocal_result__isset;

class GraphQueryAggregatorService_getNodeLocal_result {
 public:

  GraphQueryAggregatorService_getNodeLocal_result(const GraphQueryAggregatorService_getNodeLocal_result&);
  GraphQueryAggregatorService_getNodeLocal_result& operator=(const GraphQueryAggregatorService_getNodeLocal_result&);
  GraphQueryAggregatorService_getNodeLocal_result() : success() {
  }

  virtual ~GraphQueryAggregatorService_getNodeLocal_result() throw();
  std::string success;

  _GraphQueryAggregatorService_getNodeLocal_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_getNodeLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getNodeLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getNodeLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getNodeLocal_presult__isset {
  _GraphQueryAggregatorService_getNodeLocal_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getNodeLocal_presult__isset;

class GraphQueryAggregatorService_getNodeLocal_presult {
 public:


  virtual ~GraphQueryAggregatorService_getNodeLocal_presult() throw();
  std::string* success;

  _GraphQueryAggregatorService_getNodeLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_addNode_args__isset {
  _GraphQueryAggregatorService_addNode_args__isset() : id(false), data(false) {}
  bool id :1;
  bool data :1;
} _GraphQueryAggregatorService_addNode_args__isset;

class GraphQueryAggregatorService_addNode_args {
 public:

  GraphQueryAggregatorService_addNode_args(const GraphQueryAggregatorService_addNode_args&);
  GraphQueryAggregatorService_addNode_args& operator=(const GraphQueryAggregatorService_addNode_args&);
  GraphQueryAggregatorService_addNode_args() : id(0), data() {
  }

  virtual ~GraphQueryAggregatorService_addNode_args() throw();
  int64_t id;
  std::string data;

  _GraphQueryAggregatorService_addNode_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_data(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_addNode_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_addNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_addNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_addNode_pargs {
 public:


  virtual ~GraphQueryAggregatorService_addNode_pargs() throw();
  const int64_t* id;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_addNode_result__isset {
  _GraphQueryAggregatorService_addNode_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_addNode_result__isset;

class GraphQueryAggregatorService_addNode_result {
 public:

  GraphQueryAggregatorService_addNode_result(const GraphQueryAggregatorService_addNode_result&);
  GraphQueryAggregatorService_addNode_result& operator=(const GraphQueryAggregatorService_addNode_result&);
  GraphQueryAggregatorService_addNode_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_addNode_result() throw();
  int64_t success;

  _GraphQueryAggregatorService_addNode_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_addNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_addNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_addNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_addNode_presult__isset {
  _GraphQueryAggregatorService_addNode_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_addNode_presult__isset;

class GraphQueryAggregatorService_addNode_presult {
 public:


  virtual ~GraphQueryAggregatorService_addNode_presult() throw();
  int64_t* success;

  _GraphQueryAggregatorService_addNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_deleteNode_args__isset {
  _GraphQueryAggregatorService_deleteNode_args__isset() : id(false) {}
  bool id :1;
} _GraphQueryAggregatorService_deleteNode_args__isset;

class GraphQueryAggregatorService_deleteNode_args {
 public:

  GraphQueryAggregatorService_deleteNode_args(const GraphQueryAggregatorService_deleteNode_args&);
  GraphQueryAggregatorService_deleteNode_args& operator=(const GraphQueryAggregatorService_deleteNode_args&);
  GraphQueryAggregatorService_deleteNode_args() : id(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteNode_args() throw();
  int64_t id;

  _GraphQueryAggregatorService_deleteNode_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_deleteNode_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_deleteNode_pargs {
 public:


  virtual ~GraphQueryAggregatorService_deleteNode_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteNode_result__isset {
  _GraphQueryAggregatorService_deleteNode_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteNode_result__isset;

class GraphQueryAggregatorService_deleteNode_result {
 public:

  GraphQueryAggregatorService_deleteNode_result(const GraphQueryAggregatorService_deleteNode_result&);
  GraphQueryAggregatorService_deleteNode_result& operator=(const GraphQueryAggregatorService_deleteNode_result&);
  GraphQueryAggregatorService_deleteNode_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteNode_result() throw();
  bool success;

  _GraphQueryAggregatorService_deleteNode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphQueryAggregatorService_deleteNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteNode_presult__isset {
  _GraphQueryAggregatorService_deleteNode_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteNode_presult__isset;

class GraphQueryAggregatorService_deleteNode_presult {
 public:


  virtual ~GraphQueryAggregatorService_deleteNode_presult() throw();
  bool* success;

  _GraphQueryAggregatorService_deleteNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_deleteNodeLocal_args__isset {
  _GraphQueryAggregatorService_deleteNodeLocal_args__isset() : shard_id(false), id(false) {}
  bool shard_id :1;
  bool id :1;
} _GraphQueryAggregatorService_deleteNodeLocal_args__isset;

class GraphQueryAggregatorService_deleteNodeLocal_args {
 public:

  GraphQueryAggregatorService_deleteNodeLocal_args(const GraphQueryAggregatorService_deleteNodeLocal_args&);
  GraphQueryAggregatorService_deleteNodeLocal_args& operator=(const GraphQueryAggregatorService_deleteNodeLocal_args&);
  GraphQueryAggregatorService_deleteNodeLocal_args() : shard_id(0), id(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteNodeLocal_args() throw();
  int64_t shard_id;
  int64_t id;

  _GraphQueryAggregatorService_deleteNodeLocal_args__isset __isset;

  void __set_shard_id(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_deleteNodeLocal_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteNodeLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteNodeLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_deleteNodeLocal_pargs {
 public:


  virtual ~GraphQueryAggregatorService_deleteNodeLocal_pargs() throw();
  const int64_t* shard_id;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteNodeLocal_result__isset {
  _GraphQueryAggregatorService_deleteNodeLocal_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteNodeLocal_result__isset;

class GraphQueryAggregatorService_deleteNodeLocal_result {
 public:

  GraphQueryAggregatorService_deleteNodeLocal_result(const GraphQueryAggregatorService_deleteNodeLocal_result&);
  GraphQueryAggregatorService_deleteNodeLocal_result& operator=(const GraphQueryAggregatorService_deleteNodeLocal_result&);
  GraphQueryAggregatorService_deleteNodeLocal_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteNodeLocal_result() throw();
  bool success;

  _GraphQueryAggregatorService_deleteNodeLocal_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphQueryAggregatorService_deleteNodeLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteNodeLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteNodeLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteNodeLocal_presult__isset {
  _GraphQueryAggregatorService_deleteNodeLocal_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteNodeLocal_presult__isset;

class GraphQueryAggregatorService_deleteNodeLocal_presult {
 public:


  virtual ~GraphQueryAggregatorService_deleteNodeLocal_presult() throw();
  bool* success;

  _GraphQueryAggregatorService_deleteNodeLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_updateNode_args__isset {
  _GraphQueryAggregatorService_updateNode_args__isset() : id(false), data(false) {}
  bool id :1;
  bool data :1;
} _GraphQueryAggregatorService_updateNode_args__isset;

class GraphQueryAggregatorService_updateNode_args {
 public:

  GraphQueryAggregatorService_updateNode_args(const GraphQueryAggregatorService_updateNode_args&);
  GraphQueryAggregatorService_updateNode_args& operator=(const GraphQueryAggregatorService_updateNode_args&);
  GraphQueryAggregatorService_updateNode_args() : id(0), data() {
  }

  virtual ~GraphQueryAggregatorService_updateNode_args() throw();
  int64_t id;
  std::string data;

  _GraphQueryAggregatorService_updateNode_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_data(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_updateNode_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_updateNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_updateNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_updateNode_pargs {
 public:


  virtual ~GraphQueryAggregatorService_updateNode_pargs() throw();
  const int64_t* id;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_updateNode_result__isset {
  _GraphQueryAggregatorService_updateNode_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_updateNode_result__isset;

class GraphQueryAggregatorService_updateNode_result {
 public:

  GraphQueryAggregatorService_updateNode_result(const GraphQueryAggregatorService_updateNode_result&);
  GraphQueryAggregatorService_updateNode_result& operator=(const GraphQueryAggregatorService_updateNode_result&);
  GraphQueryAggregatorService_updateNode_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_updateNode_result() throw();
  bool success;

  _GraphQueryAggregatorService_updateNode_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphQueryAggregatorService_updateNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_updateNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_updateNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_updateNode_presult__isset {
  _GraphQueryAggregatorService_updateNode_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_updateNode_presult__isset;

class GraphQueryAggregatorService_updateNode_presult {
 public:


  virtual ~GraphQueryAggregatorService_updateNode_presult() throw();
  bool* success;

  _GraphQueryAggregatorService_updateNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getLink_args__isset {
  _GraphQueryAggregatorService_getLink_args__isset() : id1(false), link_type(false), id2(false) {}
  bool id1 :1;
  bool link_type :1;
  bool id2 :1;
} _GraphQueryAggregatorService_getLink_args__isset;

class GraphQueryAggregatorService_getLink_args {
 public:

  GraphQueryAggregatorService_getLink_args(const GraphQueryAggregatorService_getLink_args&);
  GraphQueryAggregatorService_getLink_args& operator=(const GraphQueryAggregatorService_getLink_args&);
  GraphQueryAggregatorService_getLink_args() : id1(0), link_type(0), id2(0) {
  }

  virtual ~GraphQueryAggregatorService_getLink_args() throw();
  int64_t id1;
  int64_t link_type;
  int64_t id2;

  _GraphQueryAggregatorService_getLink_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getLink_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getLink_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getLink_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLink_result__isset {
  _GraphQueryAggregatorService_getLink_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLink_result__isset;

class GraphQueryAggregatorService_getLink_result {
 public:

  GraphQueryAggregatorService_getLink_result(const GraphQueryAggregatorService_getLink_result&);
  GraphQueryAggregatorService_getLink_result& operator=(const GraphQueryAggregatorService_getLink_result&);
  GraphQueryAggregatorService_getLink_result() {
  }

  virtual ~GraphQueryAggregatorService_getLink_result() throw();
  ThriftAssoc success;

  _GraphQueryAggregatorService_getLink_result__isset __isset;

  void __set_success(const ThriftAssoc& val);

  bool operator == (const GraphQueryAggregatorService_getLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLink_presult__isset {
  _GraphQueryAggregatorService_getLink_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLink_presult__isset;

class GraphQueryAggregatorService_getLink_presult {
 public:


  virtual ~GraphQueryAggregatorService_getLink_presult() throw();
  ThriftAssoc* success;

  _GraphQueryAggregatorService_getLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getLinkLocal_args__isset {
  _GraphQueryAggregatorService_getLinkLocal_args__isset() : shard_id(false), id1(false), link_type(false), id2(false) {}
  bool shard_id :1;
  bool id1 :1;
  bool link_type :1;
  bool id2 :1;
} _GraphQueryAggregatorService_getLinkLocal_args__isset;

class GraphQueryAggregatorService_getLinkLocal_args {
 public:

  GraphQueryAggregatorService_getLinkLocal_args(const GraphQueryAggregatorService_getLinkLocal_args&);
  GraphQueryAggregatorService_getLinkLocal_args& operator=(const GraphQueryAggregatorService_getLinkLocal_args&);
  GraphQueryAggregatorService_getLinkLocal_args() : shard_id(0), id1(0), link_type(0), id2(0) {
  }

  virtual ~GraphQueryAggregatorService_getLinkLocal_args() throw();
  int64_t shard_id;
  int64_t id1;
  int64_t link_type;
  int64_t id2;

  _GraphQueryAggregatorService_getLinkLocal_args__isset __isset;

  void __set_shard_id(const int64_t val);

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getLinkLocal_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLinkLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLinkLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getLinkLocal_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getLinkLocal_pargs() throw();
  const int64_t* shard_id;
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLinkLocal_result__isset {
  _GraphQueryAggregatorService_getLinkLocal_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLinkLocal_result__isset;

class GraphQueryAggregatorService_getLinkLocal_result {
 public:

  GraphQueryAggregatorService_getLinkLocal_result(const GraphQueryAggregatorService_getLinkLocal_result&);
  GraphQueryAggregatorService_getLinkLocal_result& operator=(const GraphQueryAggregatorService_getLinkLocal_result&);
  GraphQueryAggregatorService_getLinkLocal_result() {
  }

  virtual ~GraphQueryAggregatorService_getLinkLocal_result() throw();
  ThriftAssoc success;

  _GraphQueryAggregatorService_getLinkLocal_result__isset __isset;

  void __set_success(const ThriftAssoc& val);

  bool operator == (const GraphQueryAggregatorService_getLinkLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLinkLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLinkLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLinkLocal_presult__isset {
  _GraphQueryAggregatorService_getLinkLocal_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLinkLocal_presult__isset;

class GraphQueryAggregatorService_getLinkLocal_presult {
 public:


  virtual ~GraphQueryAggregatorService_getLinkLocal_presult() throw();
  ThriftAssoc* success;

  _GraphQueryAggregatorService_getLinkLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_addLink_args__isset {
  _GraphQueryAggregatorService_addLink_args__isset() : link(false) {}
  bool link :1;
} _GraphQueryAggregatorService_addLink_args__isset;

class GraphQueryAggregatorService_addLink_args {
 public:

  GraphQueryAggregatorService_addLink_args(const GraphQueryAggregatorService_addLink_args&);
  GraphQueryAggregatorService_addLink_args& operator=(const GraphQueryAggregatorService_addLink_args&);
  GraphQueryAggregatorService_addLink_args() {
  }

  virtual ~GraphQueryAggregatorService_addLink_args() throw();
  ThriftAssoc link;

  _GraphQueryAggregatorService_addLink_args__isset __isset;

  void __set_link(const ThriftAssoc& val);

  bool operator == (const GraphQueryAggregatorService_addLink_args & rhs) const
  {
    if (!(link == rhs.link))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_addLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_addLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_addLink_pargs {
 public:


  virtual ~GraphQueryAggregatorService_addLink_pargs() throw();
  const ThriftAssoc* link;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_addLink_result__isset {
  _GraphQueryAggregatorService_addLink_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_addLink_result__isset;

class GraphQueryAggregatorService_addLink_result {
 public:

  GraphQueryAggregatorService_addLink_result(const GraphQueryAggregatorService_addLink_result&);
  GraphQueryAggregatorService_addLink_result& operator=(const GraphQueryAggregatorService_addLink_result&);
  GraphQueryAggregatorService_addLink_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_addLink_result() throw();
  bool success;

  _GraphQueryAggregatorService_addLink_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphQueryAggregatorService_addLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_addLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_addLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_addLink_presult__isset {
  _GraphQueryAggregatorService_addLink_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_addLink_presult__isset;

class GraphQueryAggregatorService_addLink_presult {
 public:


  virtual ~GraphQueryAggregatorService_addLink_presult() throw();
  bool* success;

  _GraphQueryAggregatorService_addLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_deleteLink_args__isset {
  _GraphQueryAggregatorService_deleteLink_args__isset() : id1(false), link_type(false), id2(false) {}
  bool id1 :1;
  bool link_type :1;
  bool id2 :1;
} _GraphQueryAggregatorService_deleteLink_args__isset;

class GraphQueryAggregatorService_deleteLink_args {
 public:

  GraphQueryAggregatorService_deleteLink_args(const GraphQueryAggregatorService_deleteLink_args&);
  GraphQueryAggregatorService_deleteLink_args& operator=(const GraphQueryAggregatorService_deleteLink_args&);
  GraphQueryAggregatorService_deleteLink_args() : id1(0), link_type(0), id2(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteLink_args() throw();
  int64_t id1;
  int64_t link_type;
  int64_t id2;

  _GraphQueryAggregatorService_deleteLink_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_deleteLink_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_deleteLink_pargs {
 public:


  virtual ~GraphQueryAggregatorService_deleteLink_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteLink_result__isset {
  _GraphQueryAggregatorService_deleteLink_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteLink_result__isset;

class GraphQueryAggregatorService_deleteLink_result {
 public:

  GraphQueryAggregatorService_deleteLink_result(const GraphQueryAggregatorService_deleteLink_result&);
  GraphQueryAggregatorService_deleteLink_result& operator=(const GraphQueryAggregatorService_deleteLink_result&);
  GraphQueryAggregatorService_deleteLink_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteLink_result() throw();
  bool success;

  _GraphQueryAggregatorService_deleteLink_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphQueryAggregatorService_deleteLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteLink_presult__isset {
  _GraphQueryAggregatorService_deleteLink_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteLink_presult__isset;

class GraphQueryAggregatorService_deleteLink_presult {
 public:


  virtual ~GraphQueryAggregatorService_deleteLink_presult() throw();
  bool* success;

  _GraphQueryAggregatorService_deleteLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_deleteLinkLocal_args__isset {
  _GraphQueryAggregatorService_deleteLinkLocal_args__isset() : shard_id(false), id1(false), link_type(false), id2(false) {}
  bool shard_id :1;
  bool id1 :1;
  bool link_type :1;
  bool id2 :1;
} _GraphQueryAggregatorService_deleteLinkLocal_args__isset;

class GraphQueryAggregatorService_deleteLinkLocal_args {
 public:

  GraphQueryAggregatorService_deleteLinkLocal_args(const GraphQueryAggregatorService_deleteLinkLocal_args&);
  GraphQueryAggregatorService_deleteLinkLocal_args& operator=(const GraphQueryAggregatorService_deleteLinkLocal_args&);
  GraphQueryAggregatorService_deleteLinkLocal_args() : shard_id(0), id1(0), link_type(0), id2(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteLinkLocal_args() throw();
  int64_t shard_id;
  int64_t id1;
  int64_t link_type;
  int64_t id2;

  _GraphQueryAggregatorService_deleteLinkLocal_args__isset __isset;

  void __set_shard_id(const int64_t val);

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_deleteLinkLocal_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteLinkLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteLinkLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_deleteLinkLocal_pargs {
 public:


  virtual ~GraphQueryAggregatorService_deleteLinkLocal_pargs() throw();
  const int64_t* shard_id;
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteLinkLocal_result__isset {
  _GraphQueryAggregatorService_deleteLinkLocal_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteLinkLocal_result__isset;

class GraphQueryAggregatorService_deleteLinkLocal_result {
 public:

  GraphQueryAggregatorService_deleteLinkLocal_result(const GraphQueryAggregatorService_deleteLinkLocal_result&);
  GraphQueryAggregatorService_deleteLinkLocal_result& operator=(const GraphQueryAggregatorService_deleteLinkLocal_result&);
  GraphQueryAggregatorService_deleteLinkLocal_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_deleteLinkLocal_result() throw();
  bool success;

  _GraphQueryAggregatorService_deleteLinkLocal_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphQueryAggregatorService_deleteLinkLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_deleteLinkLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_deleteLinkLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_deleteLinkLocal_presult__isset {
  _GraphQueryAggregatorService_deleteLinkLocal_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_deleteLinkLocal_presult__isset;

class GraphQueryAggregatorService_deleteLinkLocal_presult {
 public:


  virtual ~GraphQueryAggregatorService_deleteLinkLocal_presult() throw();
  bool* success;

  _GraphQueryAggregatorService_deleteLinkLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_updateLink_args__isset {
  _GraphQueryAggregatorService_updateLink_args__isset() : link(false) {}
  bool link :1;
} _GraphQueryAggregatorService_updateLink_args__isset;

class GraphQueryAggregatorService_updateLink_args {
 public:

  GraphQueryAggregatorService_updateLink_args(const GraphQueryAggregatorService_updateLink_args&);
  GraphQueryAggregatorService_updateLink_args& operator=(const GraphQueryAggregatorService_updateLink_args&);
  GraphQueryAggregatorService_updateLink_args() {
  }

  virtual ~GraphQueryAggregatorService_updateLink_args() throw();
  ThriftAssoc link;

  _GraphQueryAggregatorService_updateLink_args__isset __isset;

  void __set_link(const ThriftAssoc& val);

  bool operator == (const GraphQueryAggregatorService_updateLink_args & rhs) const
  {
    if (!(link == rhs.link))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_updateLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_updateLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_updateLink_pargs {
 public:


  virtual ~GraphQueryAggregatorService_updateLink_pargs() throw();
  const ThriftAssoc* link;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_updateLink_result__isset {
  _GraphQueryAggregatorService_updateLink_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_updateLink_result__isset;

class GraphQueryAggregatorService_updateLink_result {
 public:

  GraphQueryAggregatorService_updateLink_result(const GraphQueryAggregatorService_updateLink_result&);
  GraphQueryAggregatorService_updateLink_result& operator=(const GraphQueryAggregatorService_updateLink_result&);
  GraphQueryAggregatorService_updateLink_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_updateLink_result() throw();
  bool success;

  _GraphQueryAggregatorService_updateLink_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphQueryAggregatorService_updateLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_updateLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_updateLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_updateLink_presult__isset {
  _GraphQueryAggregatorService_updateLink_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_updateLink_presult__isset;

class GraphQueryAggregatorService_updateLink_presult {
 public:


  virtual ~GraphQueryAggregatorService_updateLink_presult() throw();
  bool* success;

  _GraphQueryAggregatorService_updateLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getLinkList_args__isset {
  _GraphQueryAggregatorService_getLinkList_args__isset() : id1(false), link_type(false) {}
  bool id1 :1;
  bool link_type :1;
} _GraphQueryAggregatorService_getLinkList_args__isset;

class GraphQueryAggregatorService_getLinkList_args {
 public:

  GraphQueryAggregatorService_getLinkList_args(const GraphQueryAggregatorService_getLinkList_args&);
  GraphQueryAggregatorService_getLinkList_args& operator=(const GraphQueryAggregatorService_getLinkList_args&);
  GraphQueryAggregatorService_getLinkList_args() : id1(0), link_type(0) {
  }

  virtual ~GraphQueryAggregatorService_getLinkList_args() throw();
  int64_t id1;
  int64_t link_type;

  _GraphQueryAggregatorService_getLinkList_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getLinkList_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLinkList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLinkList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getLinkList_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getLinkList_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLinkList_result__isset {
  _GraphQueryAggregatorService_getLinkList_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLinkList_result__isset;

class GraphQueryAggregatorService_getLinkList_result {
 public:

  GraphQueryAggregatorService_getLinkList_result(const GraphQueryAggregatorService_getLinkList_result&);
  GraphQueryAggregatorService_getLinkList_result& operator=(const GraphQueryAggregatorService_getLinkList_result&);
  GraphQueryAggregatorService_getLinkList_result() {
  }

  virtual ~GraphQueryAggregatorService_getLinkList_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_getLinkList_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_getLinkList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLinkList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLinkList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLinkList_presult__isset {
  _GraphQueryAggregatorService_getLinkList_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLinkList_presult__isset;

class GraphQueryAggregatorService_getLinkList_presult {
 public:


  virtual ~GraphQueryAggregatorService_getLinkList_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_getLinkList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getLinkListLocal_args__isset {
  _GraphQueryAggregatorService_getLinkListLocal_args__isset() : shard_id(false), id1(false), link_type(false) {}
  bool shard_id :1;
  bool id1 :1;
  bool link_type :1;
} _GraphQueryAggregatorService_getLinkListLocal_args__isset;

class GraphQueryAggregatorService_getLinkListLocal_args {
 public:

  GraphQueryAggregatorService_getLinkListLocal_args(const GraphQueryAggregatorService_getLinkListLocal_args&);
  GraphQueryAggregatorService_getLinkListLocal_args& operator=(const GraphQueryAggregatorService_getLinkListLocal_args&);
  GraphQueryAggregatorService_getLinkListLocal_args() : shard_id(0), id1(0), link_type(0) {
  }

  virtual ~GraphQueryAggregatorService_getLinkListLocal_args() throw();
  int64_t shard_id;
  int64_t id1;
  int64_t link_type;

  _GraphQueryAggregatorService_getLinkListLocal_args__isset __isset;

  void __set_shard_id(const int64_t val);

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getLinkListLocal_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLinkListLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLinkListLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getLinkListLocal_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getLinkListLocal_pargs() throw();
  const int64_t* shard_id;
  const int64_t* id1;
  const int64_t* link_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLinkListLocal_result__isset {
  _GraphQueryAggregatorService_getLinkListLocal_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLinkListLocal_result__isset;

class GraphQueryAggregatorService_getLinkListLocal_result {
 public:

  GraphQueryAggregatorService_getLinkListLocal_result(const GraphQueryAggregatorService_getLinkListLocal_result&);
  GraphQueryAggregatorService_getLinkListLocal_result& operator=(const GraphQueryAggregatorService_getLinkListLocal_result&);
  GraphQueryAggregatorService_getLinkListLocal_result() {
  }

  virtual ~GraphQueryAggregatorService_getLinkListLocal_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_getLinkListLocal_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_getLinkListLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getLinkListLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getLinkListLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getLinkListLocal_presult__isset {
  _GraphQueryAggregatorService_getLinkListLocal_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getLinkListLocal_presult__isset;

class GraphQueryAggregatorService_getLinkListLocal_presult {
 public:


  virtual ~GraphQueryAggregatorService_getLinkListLocal_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_getLinkListLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getFilteredLinkList_args__isset {
  _GraphQueryAggregatorService_getFilteredLinkList_args__isset() : id1(false), link_type(false), min_timestamp(false), max_timestamp(false), offset(false), limit(false) {}
  bool id1 :1;
  bool link_type :1;
  bool min_timestamp :1;
  bool max_timestamp :1;
  bool offset :1;
  bool limit :1;
} _GraphQueryAggregatorService_getFilteredLinkList_args__isset;

class GraphQueryAggregatorService_getFilteredLinkList_args {
 public:

  GraphQueryAggregatorService_getFilteredLinkList_args(const GraphQueryAggregatorService_getFilteredLinkList_args&);
  GraphQueryAggregatorService_getFilteredLinkList_args& operator=(const GraphQueryAggregatorService_getFilteredLinkList_args&);
  GraphQueryAggregatorService_getFilteredLinkList_args() : id1(0), link_type(0), min_timestamp(0), max_timestamp(0), offset(0), limit(0) {
  }

  virtual ~GraphQueryAggregatorService_getFilteredLinkList_args() throw();
  int64_t id1;
  int64_t link_type;
  int64_t min_timestamp;
  int64_t max_timestamp;
  int64_t offset;
  int64_t limit;

  _GraphQueryAggregatorService_getFilteredLinkList_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_min_timestamp(const int64_t val);

  void __set_max_timestamp(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getFilteredLinkList_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(min_timestamp == rhs.min_timestamp))
      return false;
    if (!(max_timestamp == rhs.max_timestamp))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getFilteredLinkList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getFilteredLinkList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getFilteredLinkList_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getFilteredLinkList_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* min_timestamp;
  const int64_t* max_timestamp;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getFilteredLinkList_result__isset {
  _GraphQueryAggregatorService_getFilteredLinkList_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getFilteredLinkList_result__isset;

class GraphQueryAggregatorService_getFilteredLinkList_result {
 public:

  GraphQueryAggregatorService_getFilteredLinkList_result(const GraphQueryAggregatorService_getFilteredLinkList_result&);
  GraphQueryAggregatorService_getFilteredLinkList_result& operator=(const GraphQueryAggregatorService_getFilteredLinkList_result&);
  GraphQueryAggregatorService_getFilteredLinkList_result() {
  }

  virtual ~GraphQueryAggregatorService_getFilteredLinkList_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_getFilteredLinkList_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_getFilteredLinkList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getFilteredLinkList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getFilteredLinkList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getFilteredLinkList_presult__isset {
  _GraphQueryAggregatorService_getFilteredLinkList_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getFilteredLinkList_presult__isset;

class GraphQueryAggregatorService_getFilteredLinkList_presult {
 public:


  virtual ~GraphQueryAggregatorService_getFilteredLinkList_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_getFilteredLinkList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_getFilteredLinkListLocal_args__isset {
  _GraphQueryAggregatorService_getFilteredLinkListLocal_args__isset() : shard_id(false), id1(false), link_type(false), min_timestamp(false), max_timestamp(false), offset(false), limit(false) {}
  bool shard_id :1;
  bool id1 :1;
  bool link_type :1;
  bool min_timestamp :1;
  bool max_timestamp :1;
  bool offset :1;
  bool limit :1;
} _GraphQueryAggregatorService_getFilteredLinkListLocal_args__isset;

class GraphQueryAggregatorService_getFilteredLinkListLocal_args {
 public:

  GraphQueryAggregatorService_getFilteredLinkListLocal_args(const GraphQueryAggregatorService_getFilteredLinkListLocal_args&);
  GraphQueryAggregatorService_getFilteredLinkListLocal_args& operator=(const GraphQueryAggregatorService_getFilteredLinkListLocal_args&);
  GraphQueryAggregatorService_getFilteredLinkListLocal_args() : shard_id(0), id1(0), link_type(0), min_timestamp(0), max_timestamp(0), offset(0), limit(0) {
  }

  virtual ~GraphQueryAggregatorService_getFilteredLinkListLocal_args() throw();
  int64_t shard_id;
  int64_t id1;
  int64_t link_type;
  int64_t min_timestamp;
  int64_t max_timestamp;
  int64_t offset;
  int64_t limit;

  _GraphQueryAggregatorService_getFilteredLinkListLocal_args__isset __isset;

  void __set_shard_id(const int64_t val);

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_min_timestamp(const int64_t val);

  void __set_max_timestamp(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_getFilteredLinkListLocal_args & rhs) const
  {
    if (!(shard_id == rhs.shard_id))
      return false;
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(min_timestamp == rhs.min_timestamp))
      return false;
    if (!(max_timestamp == rhs.max_timestamp))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getFilteredLinkListLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getFilteredLinkListLocal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_getFilteredLinkListLocal_pargs {
 public:


  virtual ~GraphQueryAggregatorService_getFilteredLinkListLocal_pargs() throw();
  const int64_t* shard_id;
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* min_timestamp;
  const int64_t* max_timestamp;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getFilteredLinkListLocal_result__isset {
  _GraphQueryAggregatorService_getFilteredLinkListLocal_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getFilteredLinkListLocal_result__isset;

class GraphQueryAggregatorService_getFilteredLinkListLocal_result {
 public:

  GraphQueryAggregatorService_getFilteredLinkListLocal_result(const GraphQueryAggregatorService_getFilteredLinkListLocal_result&);
  GraphQueryAggregatorService_getFilteredLinkListLocal_result& operator=(const GraphQueryAggregatorService_getFilteredLinkListLocal_result&);
  GraphQueryAggregatorService_getFilteredLinkListLocal_result() {
  }

  virtual ~GraphQueryAggregatorService_getFilteredLinkListLocal_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_getFilteredLinkListLocal_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryAggregatorService_getFilteredLinkListLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_getFilteredLinkListLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_getFilteredLinkListLocal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_getFilteredLinkListLocal_presult__isset {
  _GraphQueryAggregatorService_getFilteredLinkListLocal_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_getFilteredLinkListLocal_presult__isset;

class GraphQueryAggregatorService_getFilteredLinkListLocal_presult {
 public:


  virtual ~GraphQueryAggregatorService_getFilteredLinkListLocal_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_getFilteredLinkListLocal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_countLinks_args__isset {
  _GraphQueryAggregatorService_countLinks_args__isset() : id1(false), link_type(false) {}
  bool id1 :1;
  bool link_type :1;
} _GraphQueryAggregatorService_countLinks_args__isset;

class GraphQueryAggregatorService_countLinks_args {
 public:

  GraphQueryAggregatorService_countLinks_args(const GraphQueryAggregatorService_countLinks_args&);
  GraphQueryAggregatorService_countLinks_args& operator=(const GraphQueryAggregatorService_countLinks_args&);
  GraphQueryAggregatorService_countLinks_args() : id1(0), link_type(0) {
  }

  virtual ~GraphQueryAggregatorService_countLinks_args() throw();
  int64_t id1;
  int64_t link_type;

  _GraphQueryAggregatorService_countLinks_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_countLinks_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_countLinks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_countLinks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_countLinks_pargs {
 public:


  virtual ~GraphQueryAggregatorService_countLinks_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_countLinks_result__isset {
  _GraphQueryAggregatorService_countLinks_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_countLinks_result__isset;

class GraphQueryAggregatorService_countLinks_result {
 public:

  GraphQueryAggregatorService_countLinks_result(const GraphQueryAggregatorService_countLinks_result&);
  GraphQueryAggregatorService_countLinks_result& operator=(const GraphQueryAggregatorService_countLinks_result&);
  GraphQueryAggregatorService_countLinks_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_countLinks_result() throw();
  int64_t success;

  _GraphQueryAggregatorService_countLinks_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphQueryAggregatorService_countLinks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_countLinks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_countLinks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_countLinks_presult__isset {
  _GraphQueryAggregatorService_countLinks_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_countLinks_presult__isset;

class GraphQueryAggregatorService_countLinks_presult {
 public:


  virtual ~GraphQueryAggregatorService_countLinks_presult() throw();
  int64_t* success;

  _GraphQueryAggregatorService_countLinks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_regular_path_query_args__isset {
  _GraphQueryAggregatorService_regular_path_query_args__isset() : query(false) {}
  bool query :1;
} _GraphQueryAggregatorService_regular_path_query_args__isset;

class GraphQueryAggregatorService_regular_path_query_args {
 public:

  GraphQueryAggregatorService_regular_path_query_args(const GraphQueryAggregatorService_regular_path_query_args&);
  GraphQueryAggregatorService_regular_path_query_args& operator=(const GraphQueryAggregatorService_regular_path_query_args&);
  GraphQueryAggregatorService_regular_path_query_args() : query() {
  }

  virtual ~GraphQueryAggregatorService_regular_path_query_args() throw();
  std::string query;

  _GraphQueryAggregatorService_regular_path_query_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const GraphQueryAggregatorService_regular_path_query_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_regular_path_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_regular_path_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_regular_path_query_pargs {
 public:


  virtual ~GraphQueryAggregatorService_regular_path_query_pargs() throw();
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_regular_path_query_result__isset {
  _GraphQueryAggregatorService_regular_path_query_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_regular_path_query_result__isset;

class GraphQueryAggregatorService_regular_path_query_result {
 public:

  GraphQueryAggregatorService_regular_path_query_result(const GraphQueryAggregatorService_regular_path_query_result&);
  GraphQueryAggregatorService_regular_path_query_result& operator=(const GraphQueryAggregatorService_regular_path_query_result&);
  GraphQueryAggregatorService_regular_path_query_result() {
  }

  virtual ~GraphQueryAggregatorService_regular_path_query_result() throw();
  RPQCtx success;

  _GraphQueryAggregatorService_regular_path_query_result__isset __isset;

  void __set_success(const RPQCtx& val);

  bool operator == (const GraphQueryAggregatorService_regular_path_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_regular_path_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_regular_path_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_regular_path_query_presult__isset {
  _GraphQueryAggregatorService_regular_path_query_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_regular_path_query_presult__isset;

class GraphQueryAggregatorService_regular_path_query_presult {
 public:


  virtual ~GraphQueryAggregatorService_regular_path_query_presult() throw();
  RPQCtx* success;

  _GraphQueryAggregatorService_regular_path_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_rpq_args__isset {
  _GraphQueryAggregatorService_rpq_args__isset() : query(false) {}
  bool query :1;
} _GraphQueryAggregatorService_rpq_args__isset;

class GraphQueryAggregatorService_rpq_args {
 public:

  GraphQueryAggregatorService_rpq_args(const GraphQueryAggregatorService_rpq_args&);
  GraphQueryAggregatorService_rpq_args& operator=(const GraphQueryAggregatorService_rpq_args&);
  GraphQueryAggregatorService_rpq_args() {
  }

  virtual ~GraphQueryAggregatorService_rpq_args() throw();
  RPQuery query;

  _GraphQueryAggregatorService_rpq_args__isset __isset;

  void __set_query(const RPQuery& val);

  bool operator == (const GraphQueryAggregatorService_rpq_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_rpq_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_rpq_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_rpq_pargs {
 public:


  virtual ~GraphQueryAggregatorService_rpq_pargs() throw();
  const RPQuery* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_rpq_result__isset {
  _GraphQueryAggregatorService_rpq_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_rpq_result__isset;

class GraphQueryAggregatorService_rpq_result {
 public:

  GraphQueryAggregatorService_rpq_result(const GraphQueryAggregatorService_rpq_result&);
  GraphQueryAggregatorService_rpq_result& operator=(const GraphQueryAggregatorService_rpq_result&);
  GraphQueryAggregatorService_rpq_result() {
  }

  virtual ~GraphQueryAggregatorService_rpq_result() throw();
  RPQCtx success;

  _GraphQueryAggregatorService_rpq_result__isset __isset;

  void __set_success(const RPQCtx& val);

  bool operator == (const GraphQueryAggregatorService_rpq_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_rpq_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_rpq_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_rpq_presult__isset {
  _GraphQueryAggregatorService_rpq_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_rpq_presult__isset;

class GraphQueryAggregatorService_rpq_presult {
 public:


  virtual ~GraphQueryAggregatorService_rpq_presult() throw();
  RPQCtx* success;

  _GraphQueryAggregatorService_rpq_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_path_query_args__isset {
  _GraphQueryAggregatorService_path_query_args__isset() : query(false) {}
  bool query :1;
} _GraphQueryAggregatorService_path_query_args__isset;

class GraphQueryAggregatorService_path_query_args {
 public:

  GraphQueryAggregatorService_path_query_args(const GraphQueryAggregatorService_path_query_args&);
  GraphQueryAggregatorService_path_query_args& operator=(const GraphQueryAggregatorService_path_query_args&);
  GraphQueryAggregatorService_path_query_args() {
  }

  virtual ~GraphQueryAggregatorService_path_query_args() throw();
  std::vector<int64_t>  query;

  _GraphQueryAggregatorService_path_query_args__isset __isset;

  void __set_query(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_path_query_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_path_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_path_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_path_query_pargs {
 public:


  virtual ~GraphQueryAggregatorService_path_query_pargs() throw();
  const std::vector<int64_t> * query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_path_query_result__isset {
  _GraphQueryAggregatorService_path_query_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_path_query_result__isset;

class GraphQueryAggregatorService_path_query_result {
 public:

  GraphQueryAggregatorService_path_query_result(const GraphQueryAggregatorService_path_query_result&);
  GraphQueryAggregatorService_path_query_result& operator=(const GraphQueryAggregatorService_path_query_result&);
  GraphQueryAggregatorService_path_query_result() {
  }

  virtual ~GraphQueryAggregatorService_path_query_result() throw();
  RPQCtx success;

  _GraphQueryAggregatorService_path_query_result__isset __isset;

  void __set_success(const RPQCtx& val);

  bool operator == (const GraphQueryAggregatorService_path_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_path_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_path_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_path_query_presult__isset {
  _GraphQueryAggregatorService_path_query_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_path_query_presult__isset;

class GraphQueryAggregatorService_path_query_presult {
 public:


  virtual ~GraphQueryAggregatorService_path_query_presult() throw();
  RPQCtx* success;

  _GraphQueryAggregatorService_path_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_path_query_local_args__isset {
  _GraphQueryAggregatorService_path_query_local_args__isset() : query(false) {}
  bool query :1;
} _GraphQueryAggregatorService_path_query_local_args__isset;

class GraphQueryAggregatorService_path_query_local_args {
 public:

  GraphQueryAggregatorService_path_query_local_args(const GraphQueryAggregatorService_path_query_local_args&);
  GraphQueryAggregatorService_path_query_local_args& operator=(const GraphQueryAggregatorService_path_query_local_args&);
  GraphQueryAggregatorService_path_query_local_args() {
  }

  virtual ~GraphQueryAggregatorService_path_query_local_args() throw();
  std::vector<int64_t>  query;

  _GraphQueryAggregatorService_path_query_local_args__isset __isset;

  void __set_query(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryAggregatorService_path_query_local_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_path_query_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_path_query_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_path_query_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_path_query_local_pargs() throw();
  const std::vector<int64_t> * query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_path_query_local_result__isset {
  _GraphQueryAggregatorService_path_query_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_path_query_local_result__isset;

class GraphQueryAggregatorService_path_query_local_result {
 public:

  GraphQueryAggregatorService_path_query_local_result(const GraphQueryAggregatorService_path_query_local_result&);
  GraphQueryAggregatorService_path_query_local_result& operator=(const GraphQueryAggregatorService_path_query_local_result&);
  GraphQueryAggregatorService_path_query_local_result() {
  }

  virtual ~GraphQueryAggregatorService_path_query_local_result() throw();
  RPQCtx success;

  _GraphQueryAggregatorService_path_query_local_result__isset __isset;

  void __set_success(const RPQCtx& val);

  bool operator == (const GraphQueryAggregatorService_path_query_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_path_query_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_path_query_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_path_query_local_presult__isset {
  _GraphQueryAggregatorService_path_query_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_path_query_local_presult__isset;

class GraphQueryAggregatorService_path_query_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_path_query_local_presult() throw();
  RPQCtx* success;

  _GraphQueryAggregatorService_path_query_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_advance_path_query_ctx_args__isset {
  _GraphQueryAggregatorService_advance_path_query_ctx_args__isset() : query(false), ctx(false) {}
  bool query :1;
  bool ctx :1;
} _GraphQueryAggregatorService_advance_path_query_ctx_args__isset;

class GraphQueryAggregatorService_advance_path_query_ctx_args {
 public:

  GraphQueryAggregatorService_advance_path_query_ctx_args(const GraphQueryAggregatorService_advance_path_query_ctx_args&);
  GraphQueryAggregatorService_advance_path_query_ctx_args& operator=(const GraphQueryAggregatorService_advance_path_query_ctx_args&);
  GraphQueryAggregatorService_advance_path_query_ctx_args() {
  }

  virtual ~GraphQueryAggregatorService_advance_path_query_ctx_args() throw();
  std::vector<int64_t>  query;
  RPQCtx ctx;

  _GraphQueryAggregatorService_advance_path_query_ctx_args__isset __isset;

  void __set_query(const std::vector<int64_t> & val);

  void __set_ctx(const RPQCtx& val);

  bool operator == (const GraphQueryAggregatorService_advance_path_query_ctx_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_advance_path_query_ctx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_advance_path_query_ctx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_advance_path_query_ctx_pargs {
 public:


  virtual ~GraphQueryAggregatorService_advance_path_query_ctx_pargs() throw();
  const std::vector<int64_t> * query;
  const RPQCtx* ctx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_advance_path_query_ctx_result__isset {
  _GraphQueryAggregatorService_advance_path_query_ctx_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_advance_path_query_ctx_result__isset;

class GraphQueryAggregatorService_advance_path_query_ctx_result {
 public:

  GraphQueryAggregatorService_advance_path_query_ctx_result(const GraphQueryAggregatorService_advance_path_query_ctx_result&);
  GraphQueryAggregatorService_advance_path_query_ctx_result& operator=(const GraphQueryAggregatorService_advance_path_query_ctx_result&);
  GraphQueryAggregatorService_advance_path_query_ctx_result() {
  }

  virtual ~GraphQueryAggregatorService_advance_path_query_ctx_result() throw();
  RPQCtx success;

  _GraphQueryAggregatorService_advance_path_query_ctx_result__isset __isset;

  void __set_success(const RPQCtx& val);

  bool operator == (const GraphQueryAggregatorService_advance_path_query_ctx_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_advance_path_query_ctx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_advance_path_query_ctx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_advance_path_query_ctx_presult__isset {
  _GraphQueryAggregatorService_advance_path_query_ctx_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryAggregatorService_advance_path_query_ctx_presult__isset;

class GraphQueryAggregatorService_advance_path_query_ctx_presult {
 public:


  virtual ~GraphQueryAggregatorService_advance_path_query_ctx_presult() throw();
  RPQCtx* success;

  _GraphQueryAggregatorService_advance_path_query_ctx_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GraphQueryAggregatorServiceClient : virtual public GraphQueryAggregatorServiceIf {
 public:
  GraphQueryAggregatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphQueryAggregatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t init();
  void send_init();
  int32_t recv_init();
  int32_t connect_to_aggregators();
  void send_connect_to_aggregators();
  int32_t recv_connect_to_aggregators();
  void disconnect_from_aggregators();
  void send_disconnect_from_aggregators();
  void recv_disconnect_from_aggregators();
  void shutdown();
  void send_shutdown();
  void recv_shutdown();
  void record_edge_updates(const int32_t next_shard, const int32_t local_shard, const std::vector<ThriftSrcAtype> & updates);
  void send_record_edge_updates(const int32_t next_shard, const int32_t local_shard, const std::vector<ThriftSrcAtype> & updates);
  void recv_record_edge_updates();
  void record_node_append(const int32_t next_shard, const int32_t local_shard, const int64_t obj);
  void send_record_node_append(const int32_t next_shard, const int32_t local_shard, const int64_t obj);
  void recv_record_node_append();
  void get_attribute(std::string& _return, const int64_t nodeId, const int32_t attrId);
  void send_get_attribute(const int64_t nodeId, const int32_t attrId);
  void recv_get_attribute(std::string& _return);
  void get_attribute_local(std::string& _return, const int64_t shardId, const int64_t nodeId, const int32_t attrId);
  void send_get_attribute_local(const int64_t shardId, const int64_t nodeId, const int32_t attrId);
  void recv_get_attribute_local(std::string& _return);
  void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId);
  void send_get_neighbors(const int64_t nodeId);
  void recv_get_neighbors(std::vector<int64_t> & _return);
  void get_neighbors_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId);
  void send_get_neighbors_local(const int32_t shardId, const int64_t nodeId);
  void recv_get_neighbors_local(std::vector<int64_t> & _return);
  void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype);
  void send_get_neighbors_atype(const int64_t nodeId, const int64_t atype);
  void recv_get_neighbors_atype(std::vector<int64_t> & _return);
  void get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void send_get_neighbors_atype_local(const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void recv_get_neighbors_atype_local(std::vector<int64_t> & _return);
  void get_neighbors_attr(std::vector<int64_t> & _return, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void send_get_neighbors_attr(const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void recv_get_neighbors_attr(std::vector<int64_t> & _return);
  void get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void send_get_neighbors_attr_local(const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void recv_get_neighbors_attr_local(std::vector<int64_t> & _return);
  void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey);
  void send_get_nodes(const int32_t attrId, const std::string& attrKey);
  void recv_get_nodes(std::set<int64_t> & _return);
  void get_nodes_local(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey);
  void send_get_nodes_local(const int32_t attrId, const std::string& attrKey);
  void recv_get_nodes_local(std::set<int64_t> & _return);
  void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void send_get_nodes2(const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void recv_get_nodes2(std::set<int64_t> & _return);
  void get_nodes2_local(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void send_get_nodes2_local(const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void recv_get_nodes2_local(std::set<int64_t> & _return);
  void filter_nodes_local(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  void send_filter_nodes_local(const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  void recv_filter_nodes_local(std::vector<int64_t> & _return);
  void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype);
  void send_get_edge_attrs(const int64_t nodeId, const int64_t atype);
  void recv_get_edge_attrs(std::vector<std::string> & _return);
  void get_edge_attrs_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void send_get_edge_attrs_local(const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void recv_get_edge_attrs_local(std::vector<std::string> & _return);
  void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void send_assoc_range(const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void recv_assoc_range(std::vector<ThriftAssoc> & _return);
  void assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void send_assoc_range_local(const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void recv_assoc_range_local(std::vector<ThriftAssoc> & _return);
  int64_t assoc_count(const int64_t src, const int64_t atype);
  void send_assoc_count(const int64_t src, const int64_t atype);
  int64_t recv_assoc_count();
  int64_t assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype);
  void send_assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype);
  int64_t recv_assoc_count_local();
  void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void send_assoc_get(const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void recv_assoc_get(std::vector<ThriftAssoc> & _return);
  void assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void send_assoc_get_local(const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void recv_assoc_get_local(std::vector<ThriftAssoc> & _return);
  int64_t obj_add(const std::vector<std::string> & attrs);
  void send_obj_add(const std::vector<std::string> & attrs);
  int64_t recv_obj_add();
  void obj_get(std::vector<std::string> & _return, const int64_t nodeId);
  void send_obj_get(const int64_t nodeId);
  void recv_obj_get(std::vector<std::string> & _return);
  void obj_get_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId);
  void send_obj_get_local(const int32_t shardId, const int64_t nodeId);
  void recv_obj_get_local(std::vector<std::string> & _return);
  void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void send_assoc_time_range(const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void recv_assoc_time_range(std::vector<ThriftAssoc> & _return);
  void assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void send_assoc_time_range_local(const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void recv_assoc_time_range_local(std::vector<ThriftAssoc> & _return);
  int32_t assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr);
  void send_assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr);
  int32_t recv_assoc_add();
  void getNode(std::string& _return, const int64_t id);
  void send_getNode(const int64_t id);
  void recv_getNode(std::string& _return);
  void getNodeLocal(std::string& _return, const int64_t shard_id, const int64_t id);
  void send_getNodeLocal(const int64_t shard_id, const int64_t id);
  void recv_getNodeLocal(std::string& _return);
  int64_t addNode(const int64_t id, const std::string& data);
  void send_addNode(const int64_t id, const std::string& data);
  int64_t recv_addNode();
  bool deleteNode(const int64_t id);
  void send_deleteNode(const int64_t id);
  bool recv_deleteNode();
  bool deleteNodeLocal(const int64_t shard_id, const int64_t id);
  void send_deleteNodeLocal(const int64_t shard_id, const int64_t id);
  bool recv_deleteNodeLocal();
  bool updateNode(const int64_t id, const std::string& data);
  void send_updateNode(const int64_t id, const std::string& data);
  bool recv_updateNode();
  void getLink(ThriftAssoc& _return, const int64_t id1, const int64_t link_type, const int64_t id2);
  void send_getLink(const int64_t id1, const int64_t link_type, const int64_t id2);
  void recv_getLink(ThriftAssoc& _return);
  void getLinkLocal(ThriftAssoc& _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  void send_getLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  void recv_getLinkLocal(ThriftAssoc& _return);
  bool addLink(const ThriftAssoc& link);
  void send_addLink(const ThriftAssoc& link);
  bool recv_addLink();
  bool deleteLink(const int64_t id1, const int64_t link_type, const int64_t id2);
  void send_deleteLink(const int64_t id1, const int64_t link_type, const int64_t id2);
  bool recv_deleteLink();
  bool deleteLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  void send_deleteLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  bool recv_deleteLinkLocal();
  bool updateLink(const ThriftAssoc& link);
  void send_updateLink(const ThriftAssoc& link);
  bool recv_updateLink();
  void getLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type);
  void send_getLinkList(const int64_t id1, const int64_t link_type);
  void recv_getLinkList(std::vector<ThriftAssoc> & _return);
  void getLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type);
  void send_getLinkListLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type);
  void recv_getLinkListLocal(std::vector<ThriftAssoc> & _return);
  void getFilteredLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  void send_getFilteredLinkList(const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  void recv_getFilteredLinkList(std::vector<ThriftAssoc> & _return);
  void getFilteredLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  void send_getFilteredLinkListLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  void recv_getFilteredLinkListLocal(std::vector<ThriftAssoc> & _return);
  int64_t countLinks(const int64_t id1, const int64_t link_type);
  void send_countLinks(const int64_t id1, const int64_t link_type);
  int64_t recv_countLinks();
  void regular_path_query(RPQCtx& _return, const std::string& query);
  void send_regular_path_query(const std::string& query);
  void recv_regular_path_query(RPQCtx& _return);
  void rpq(RPQCtx& _return, const RPQuery& query);
  void send_rpq(const RPQuery& query);
  void recv_rpq(RPQCtx& _return);
  void path_query(RPQCtx& _return, const std::vector<int64_t> & query);
  void send_path_query(const std::vector<int64_t> & query);
  void recv_path_query(RPQCtx& _return);
  void path_query_local(RPQCtx& _return, const std::vector<int64_t> & query);
  void send_path_query_local(const std::vector<int64_t> & query);
  void recv_path_query_local(RPQCtx& _return);
  void advance_path_query_ctx(RPQCtx& _return, const std::vector<int64_t> & query, const RPQCtx& ctx);
  void send_advance_path_query_ctx(const std::vector<int64_t> & query, const RPQCtx& ctx);
  void recv_advance_path_query_ctx(RPQCtx& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GraphQueryAggregatorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GraphQueryAggregatorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GraphQueryAggregatorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_connect_to_aggregators(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect_from_aggregators(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_record_edge_updates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_record_node_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_attribute_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_atype(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_atype_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_attr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_attr_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes2_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filter_nodes_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_edge_attrs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_edge_attrs_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_range_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_count_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_get_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obj_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obj_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obj_get_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_time_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_time_range_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNodeLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteNodeLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLinkLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteLinkLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLinkList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLinkListLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFilteredLinkList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFilteredLinkListLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countLinks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_regular_path_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rpq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_path_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_path_query_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_advance_path_query_ctx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GraphQueryAggregatorServiceProcessor(boost::shared_ptr<GraphQueryAggregatorServiceIf> iface) :
    iface_(iface) {
    processMap_["init"] = &GraphQueryAggregatorServiceProcessor::process_init;
    processMap_["connect_to_aggregators"] = &GraphQueryAggregatorServiceProcessor::process_connect_to_aggregators;
    processMap_["disconnect_from_aggregators"] = &GraphQueryAggregatorServiceProcessor::process_disconnect_from_aggregators;
    processMap_["shutdown"] = &GraphQueryAggregatorServiceProcessor::process_shutdown;
    processMap_["record_edge_updates"] = &GraphQueryAggregatorServiceProcessor::process_record_edge_updates;
    processMap_["record_node_append"] = &GraphQueryAggregatorServiceProcessor::process_record_node_append;
    processMap_["get_attribute"] = &GraphQueryAggregatorServiceProcessor::process_get_attribute;
    processMap_["get_attribute_local"] = &GraphQueryAggregatorServiceProcessor::process_get_attribute_local;
    processMap_["get_neighbors"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors;
    processMap_["get_neighbors_local"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_local;
    processMap_["get_neighbors_atype"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_atype;
    processMap_["get_neighbors_atype_local"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_atype_local;
    processMap_["get_neighbors_attr"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_attr;
    processMap_["get_neighbors_attr_local"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_attr_local;
    processMap_["get_nodes"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes;
    processMap_["get_nodes_local"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes_local;
    processMap_["get_nodes2"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes2;
    processMap_["get_nodes2_local"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes2_local;
    processMap_["filter_nodes_local"] = &GraphQueryAggregatorServiceProcessor::process_filter_nodes_local;
    processMap_["get_edge_attrs"] = &GraphQueryAggregatorServiceProcessor::process_get_edge_attrs;
    processMap_["get_edge_attrs_local"] = &GraphQueryAggregatorServiceProcessor::process_get_edge_attrs_local;
    processMap_["assoc_range"] = &GraphQueryAggregatorServiceProcessor::process_assoc_range;
    processMap_["assoc_range_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_range_local;
    processMap_["assoc_count"] = &GraphQueryAggregatorServiceProcessor::process_assoc_count;
    processMap_["assoc_count_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_count_local;
    processMap_["assoc_get"] = &GraphQueryAggregatorServiceProcessor::process_assoc_get;
    processMap_["assoc_get_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_get_local;
    processMap_["obj_add"] = &GraphQueryAggregatorServiceProcessor::process_obj_add;
    processMap_["obj_get"] = &GraphQueryAggregatorServiceProcessor::process_obj_get;
    processMap_["obj_get_local"] = &GraphQueryAggregatorServiceProcessor::process_obj_get_local;
    processMap_["assoc_time_range"] = &GraphQueryAggregatorServiceProcessor::process_assoc_time_range;
    processMap_["assoc_time_range_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_time_range_local;
    processMap_["assoc_add"] = &GraphQueryAggregatorServiceProcessor::process_assoc_add;
    processMap_["getNode"] = &GraphQueryAggregatorServiceProcessor::process_getNode;
    processMap_["getNodeLocal"] = &GraphQueryAggregatorServiceProcessor::process_getNodeLocal;
    processMap_["addNode"] = &GraphQueryAggregatorServiceProcessor::process_addNode;
    processMap_["deleteNode"] = &GraphQueryAggregatorServiceProcessor::process_deleteNode;
    processMap_["deleteNodeLocal"] = &GraphQueryAggregatorServiceProcessor::process_deleteNodeLocal;
    processMap_["updateNode"] = &GraphQueryAggregatorServiceProcessor::process_updateNode;
    processMap_["getLink"] = &GraphQueryAggregatorServiceProcessor::process_getLink;
    processMap_["getLinkLocal"] = &GraphQueryAggregatorServiceProcessor::process_getLinkLocal;
    processMap_["addLink"] = &GraphQueryAggregatorServiceProcessor::process_addLink;
    processMap_["deleteLink"] = &GraphQueryAggregatorServiceProcessor::process_deleteLink;
    processMap_["deleteLinkLocal"] = &GraphQueryAggregatorServiceProcessor::process_deleteLinkLocal;
    processMap_["updateLink"] = &GraphQueryAggregatorServiceProcessor::process_updateLink;
    processMap_["getLinkList"] = &GraphQueryAggregatorServiceProcessor::process_getLinkList;
    processMap_["getLinkListLocal"] = &GraphQueryAggregatorServiceProcessor::process_getLinkListLocal;
    processMap_["getFilteredLinkList"] = &GraphQueryAggregatorServiceProcessor::process_getFilteredLinkList;
    processMap_["getFilteredLinkListLocal"] = &GraphQueryAggregatorServiceProcessor::process_getFilteredLinkListLocal;
    processMap_["countLinks"] = &GraphQueryAggregatorServiceProcessor::process_countLinks;
    processMap_["regular_path_query"] = &GraphQueryAggregatorServiceProcessor::process_regular_path_query;
    processMap_["rpq"] = &GraphQueryAggregatorServiceProcessor::process_rpq;
    processMap_["path_query"] = &GraphQueryAggregatorServiceProcessor::process_path_query;
    processMap_["path_query_local"] = &GraphQueryAggregatorServiceProcessor::process_path_query_local;
    processMap_["advance_path_query_ctx"] = &GraphQueryAggregatorServiceProcessor::process_advance_path_query_ctx;
  }

  virtual ~GraphQueryAggregatorServiceProcessor() {}
};

class GraphQueryAggregatorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GraphQueryAggregatorServiceProcessorFactory(const ::boost::shared_ptr< GraphQueryAggregatorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GraphQueryAggregatorServiceIfFactory > handlerFactory_;
};

class GraphQueryAggregatorServiceMultiface : virtual public GraphQueryAggregatorServiceIf {
 public:
  GraphQueryAggregatorServiceMultiface(std::vector<boost::shared_ptr<GraphQueryAggregatorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GraphQueryAggregatorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GraphQueryAggregatorServiceIf> > ifaces_;
  GraphQueryAggregatorServiceMultiface() {}
  void add(boost::shared_ptr<GraphQueryAggregatorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t init() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init();
    }
    return ifaces_[i]->init();
  }

  int32_t connect_to_aggregators() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect_to_aggregators();
    }
    return ifaces_[i]->connect_to_aggregators();
  }

  void disconnect_from_aggregators() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect_from_aggregators();
    }
    ifaces_[i]->disconnect_from_aggregators();
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

  void record_edge_updates(const int32_t next_shard, const int32_t local_shard, const std::vector<ThriftSrcAtype> & updates) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->record_edge_updates(next_shard, local_shard, updates);
    }
    ifaces_[i]->record_edge_updates(next_shard, local_shard, updates);
  }

  void record_node_append(const int32_t next_shard, const int32_t local_shard, const int64_t obj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->record_node_append(next_shard, local_shard, obj);
    }
    ifaces_[i]->record_node_append(next_shard, local_shard, obj);
  }

  void get_attribute(std::string& _return, const int64_t nodeId, const int32_t attrId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_attribute(_return, nodeId, attrId);
    }
    ifaces_[i]->get_attribute(_return, nodeId, attrId);
    return;
  }

  void get_attribute_local(std::string& _return, const int64_t shardId, const int64_t nodeId, const int32_t attrId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_attribute_local(_return, shardId, nodeId, attrId);
    }
    ifaces_[i]->get_attribute_local(_return, shardId, nodeId, attrId);
    return;
  }

  void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors(_return, nodeId);
    }
    ifaces_[i]->get_neighbors(_return, nodeId);
    return;
  }

  void get_neighbors_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_local(_return, shardId, nodeId);
    }
    ifaces_[i]->get_neighbors_local(_return, shardId, nodeId);
    return;
  }

  void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_atype(_return, nodeId, atype);
    }
    ifaces_[i]->get_neighbors_atype(_return, nodeId, atype);
    return;
  }

  void get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_atype_local(_return, shardId, nodeId, atype);
    }
    ifaces_[i]->get_neighbors_atype_local(_return, shardId, nodeId, atype);
    return;
  }

  void get_neighbors_attr(std::vector<int64_t> & _return, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_attr(_return, nodeId, attrId, attrKey);
    }
    ifaces_[i]->get_neighbors_attr(_return, nodeId, attrId, attrKey);
    return;
  }

  void get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_attr_local(_return, shardId, nodeId, attrId, attrKey);
    }
    ifaces_[i]->get_neighbors_attr_local(_return, shardId, nodeId, attrId, attrKey);
    return;
  }

  void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes(_return, attrId, attrKey);
    }
    ifaces_[i]->get_nodes(_return, attrId, attrKey);
    return;
  }

  void get_nodes_local(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes_local(_return, attrId, attrKey);
    }
    ifaces_[i]->get_nodes_local(_return, attrId, attrKey);
    return;
  }

  void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes2(_return, attrId1, attrKey1, attrId2, attrKey2);
    }
    ifaces_[i]->get_nodes2(_return, attrId1, attrKey1, attrId2, attrKey2);
    return;
  }

  void get_nodes2_local(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes2_local(_return, attrId1, attrKey1, attrId2, attrKey2);
    }
    ifaces_[i]->get_nodes2_local(_return, attrId1, attrKey1, attrId2, attrKey2);
    return;
  }

  void filter_nodes_local(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filter_nodes_local(_return, nodeIds, attrId, attrKey);
    }
    ifaces_[i]->filter_nodes_local(_return, nodeIds, attrId, attrKey);
    return;
  }

  void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_edge_attrs(_return, nodeId, atype);
    }
    ifaces_[i]->get_edge_attrs(_return, nodeId, atype);
    return;
  }

  void get_edge_attrs_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_edge_attrs_local(_return, shardId, nodeId, atype);
    }
    ifaces_[i]->get_edge_attrs_local(_return, shardId, nodeId, atype);
    return;
  }

  void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_range(_return, src, atype, off, len);
    }
    ifaces_[i]->assoc_range(_return, src, atype, off, len);
    return;
  }

  void assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_range_local(_return, shardId, src, atype, off, len);
    }
    ifaces_[i]->assoc_range_local(_return, shardId, src, atype, off, len);
    return;
  }

  int64_t assoc_count(const int64_t src, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_count(src, atype);
    }
    return ifaces_[i]->assoc_count(src, atype);
  }

  int64_t assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_count_local(shardId, src, atype);
    }
    return ifaces_[i]->assoc_count_local(shardId, src, atype);
  }

  void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_get(_return, src, atype, dstIdSet, tLow, tHigh);
    }
    ifaces_[i]->assoc_get(_return, src, atype, dstIdSet, tLow, tHigh);
    return;
  }

  void assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_get_local(_return, shardId, src, atype, dstIdSet, tLow, tHigh);
    }
    ifaces_[i]->assoc_get_local(_return, shardId, src, atype, dstIdSet, tLow, tHigh);
    return;
  }

  int64_t obj_add(const std::vector<std::string> & attrs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obj_add(attrs);
    }
    return ifaces_[i]->obj_add(attrs);
  }

  void obj_get(std::vector<std::string> & _return, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obj_get(_return, nodeId);
    }
    ifaces_[i]->obj_get(_return, nodeId);
    return;
  }

  void obj_get_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obj_get_local(_return, shardId, nodeId);
    }
    ifaces_[i]->obj_get_local(_return, shardId, nodeId);
    return;
  }

  void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_time_range(_return, src, atype, tLow, tHigh, limit);
    }
    ifaces_[i]->assoc_time_range(_return, src, atype, tLow, tHigh, limit);
    return;
  }

  void assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_time_range_local(_return, shardId, src, atype, tLow, tHigh, limit);
    }
    ifaces_[i]->assoc_time_range_local(_return, shardId, src, atype, tLow, tHigh, limit);
    return;
  }

  int32_t assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_add(src, atype, dst, time, attr);
    }
    return ifaces_[i]->assoc_add(src, atype, dst, time, attr);
  }

  void getNode(std::string& _return, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNode(_return, id);
    }
    ifaces_[i]->getNode(_return, id);
    return;
  }

  void getNodeLocal(std::string& _return, const int64_t shard_id, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNodeLocal(_return, shard_id, id);
    }
    ifaces_[i]->getNodeLocal(_return, shard_id, id);
    return;
  }

  int64_t addNode(const int64_t id, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addNode(id, data);
    }
    return ifaces_[i]->addNode(id, data);
  }

  bool deleteNode(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteNode(id);
    }
    return ifaces_[i]->deleteNode(id);
  }

  bool deleteNodeLocal(const int64_t shard_id, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteNodeLocal(shard_id, id);
    }
    return ifaces_[i]->deleteNodeLocal(shard_id, id);
  }

  bool updateNode(const int64_t id, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateNode(id, data);
    }
    return ifaces_[i]->updateNode(id, data);
  }

  void getLink(ThriftAssoc& _return, const int64_t id1, const int64_t link_type, const int64_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLink(_return, id1, link_type, id2);
    }
    ifaces_[i]->getLink(_return, id1, link_type, id2);
    return;
  }

  void getLinkLocal(ThriftAssoc& _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLinkLocal(_return, shard_id, id1, link_type, id2);
    }
    ifaces_[i]->getLinkLocal(_return, shard_id, id1, link_type, id2);
    return;
  }

  bool addLink(const ThriftAssoc& link) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLink(link);
    }
    return ifaces_[i]->addLink(link);
  }

  bool deleteLink(const int64_t id1, const int64_t link_type, const int64_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteLink(id1, link_type, id2);
    }
    return ifaces_[i]->deleteLink(id1, link_type, id2);
  }

  bool deleteLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteLinkLocal(shard_id, id1, link_type, id2);
    }
    return ifaces_[i]->deleteLinkLocal(shard_id, id1, link_type, id2);
  }

  bool updateLink(const ThriftAssoc& link) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateLink(link);
    }
    return ifaces_[i]->updateLink(link);
  }

  void getLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLinkList(_return, id1, link_type);
    }
    ifaces_[i]->getLinkList(_return, id1, link_type);
    return;
  }

  void getLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLinkListLocal(_return, shard_id, id1, link_type);
    }
    ifaces_[i]->getLinkListLocal(_return, shard_id, id1, link_type);
    return;
  }

  void getFilteredLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFilteredLinkList(_return, id1, link_type, min_timestamp, max_timestamp, offset, limit);
    }
    ifaces_[i]->getFilteredLinkList(_return, id1, link_type, min_timestamp, max_timestamp, offset, limit);
    return;
  }

  void getFilteredLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFilteredLinkListLocal(_return, shard_id, id1, link_type, min_timestamp, max_timestamp, offset, limit);
    }
    ifaces_[i]->getFilteredLinkListLocal(_return, shard_id, id1, link_type, min_timestamp, max_timestamp, offset, limit);
    return;
  }

  int64_t countLinks(const int64_t id1, const int64_t link_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countLinks(id1, link_type);
    }
    return ifaces_[i]->countLinks(id1, link_type);
  }

  void regular_path_query(RPQCtx& _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->regular_path_query(_return, query);
    }
    ifaces_[i]->regular_path_query(_return, query);
    return;
  }

  void rpq(RPQCtx& _return, const RPQuery& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rpq(_return, query);
    }
    ifaces_[i]->rpq(_return, query);
    return;
  }

  void path_query(RPQCtx& _return, const std::vector<int64_t> & query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->path_query(_return, query);
    }
    ifaces_[i]->path_query(_return, query);
    return;
  }

  void path_query_local(RPQCtx& _return, const std::vector<int64_t> & query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->path_query_local(_return, query);
    }
    ifaces_[i]->path_query_local(_return, query);
    return;
  }

  void advance_path_query_ctx(RPQCtx& _return, const std::vector<int64_t> & query, const RPQCtx& ctx) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->advance_path_query_ctx(_return, query, ctx);
    }
    ifaces_[i]->advance_path_query_ctx(_return, query, ctx);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GraphQueryAggregatorServiceConcurrentClient : virtual public GraphQueryAggregatorServiceIf {
 public:
  GraphQueryAggregatorServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphQueryAggregatorServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t init();
  int32_t send_init();
  int32_t recv_init(const int32_t seqid);
  int32_t connect_to_aggregators();
  int32_t send_connect_to_aggregators();
  int32_t recv_connect_to_aggregators(const int32_t seqid);
  void disconnect_from_aggregators();
  int32_t send_disconnect_from_aggregators();
  void recv_disconnect_from_aggregators(const int32_t seqid);
  void shutdown();
  int32_t send_shutdown();
  void recv_shutdown(const int32_t seqid);
  void record_edge_updates(const int32_t next_shard, const int32_t local_shard, const std::vector<ThriftSrcAtype> & updates);
  int32_t send_record_edge_updates(const int32_t next_shard, const int32_t local_shard, const std::vector<ThriftSrcAtype> & updates);
  void recv_record_edge_updates(const int32_t seqid);
  void record_node_append(const int32_t next_shard, const int32_t local_shard, const int64_t obj);
  int32_t send_record_node_append(const int32_t next_shard, const int32_t local_shard, const int64_t obj);
  void recv_record_node_append(const int32_t seqid);
  void get_attribute(std::string& _return, const int64_t nodeId, const int32_t attrId);
  int32_t send_get_attribute(const int64_t nodeId, const int32_t attrId);
  void recv_get_attribute(std::string& _return, const int32_t seqid);
  void get_attribute_local(std::string& _return, const int64_t shardId, const int64_t nodeId, const int32_t attrId);
  int32_t send_get_attribute_local(const int64_t shardId, const int64_t nodeId, const int32_t attrId);
  void recv_get_attribute_local(std::string& _return, const int32_t seqid);
  void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId);
  int32_t send_get_neighbors(const int64_t nodeId);
  void recv_get_neighbors(std::vector<int64_t> & _return, const int32_t seqid);
  void get_neighbors_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId);
  int32_t send_get_neighbors_local(const int32_t shardId, const int64_t nodeId);
  void recv_get_neighbors_local(std::vector<int64_t> & _return, const int32_t seqid);
  void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype);
  int32_t send_get_neighbors_atype(const int64_t nodeId, const int64_t atype);
  void recv_get_neighbors_atype(std::vector<int64_t> & _return, const int32_t seqid);
  void get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype);
  int32_t send_get_neighbors_atype_local(const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void recv_get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t seqid);
  void get_neighbors_attr(std::vector<int64_t> & _return, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  int32_t send_get_neighbors_attr(const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void recv_get_neighbors_attr(std::vector<int64_t> & _return, const int32_t seqid);
  void get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  int32_t send_get_neighbors_attr_local(const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void recv_get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t seqid);
  void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey);
  int32_t send_get_nodes(const int32_t attrId, const std::string& attrKey);
  void recv_get_nodes(std::set<int64_t> & _return, const int32_t seqid);
  void get_nodes_local(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey);
  int32_t send_get_nodes_local(const int32_t attrId, const std::string& attrKey);
  void recv_get_nodes_local(std::set<int64_t> & _return, const int32_t seqid);
  void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  int32_t send_get_nodes2(const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void recv_get_nodes2(std::set<int64_t> & _return, const int32_t seqid);
  void get_nodes2_local(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  int32_t send_get_nodes2_local(const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void recv_get_nodes2_local(std::set<int64_t> & _return, const int32_t seqid);
  void filter_nodes_local(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  int32_t send_filter_nodes_local(const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  void recv_filter_nodes_local(std::vector<int64_t> & _return, const int32_t seqid);
  void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype);
  int32_t send_get_edge_attrs(const int64_t nodeId, const int64_t atype);
  void recv_get_edge_attrs(std::vector<std::string> & _return, const int32_t seqid);
  void get_edge_attrs_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype);
  int32_t send_get_edge_attrs_local(const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void recv_get_edge_attrs_local(std::vector<std::string> & _return, const int32_t seqid);
  void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  int32_t send_assoc_range(const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void recv_assoc_range(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  void assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  int32_t send_assoc_range_local(const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void recv_assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  int64_t assoc_count(const int64_t src, const int64_t atype);
  int32_t send_assoc_count(const int64_t src, const int64_t atype);
  int64_t recv_assoc_count(const int32_t seqid);
  int64_t assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype);
  int32_t send_assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype);
  int64_t recv_assoc_count_local(const int32_t seqid);
  void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  int32_t send_assoc_get(const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void recv_assoc_get(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  void assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  int32_t send_assoc_get_local(const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void recv_assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  int64_t obj_add(const std::vector<std::string> & attrs);
  int32_t send_obj_add(const std::vector<std::string> & attrs);
  int64_t recv_obj_add(const int32_t seqid);
  void obj_get(std::vector<std::string> & _return, const int64_t nodeId);
  int32_t send_obj_get(const int64_t nodeId);
  void recv_obj_get(std::vector<std::string> & _return, const int32_t seqid);
  void obj_get_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId);
  int32_t send_obj_get_local(const int32_t shardId, const int64_t nodeId);
  void recv_obj_get_local(std::vector<std::string> & _return, const int32_t seqid);
  void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  int32_t send_assoc_time_range(const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void recv_assoc_time_range(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  void assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  int32_t send_assoc_time_range_local(const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void recv_assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  int32_t assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr);
  int32_t send_assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr);
  int32_t recv_assoc_add(const int32_t seqid);
  void getNode(std::string& _return, const int64_t id);
  int32_t send_getNode(const int64_t id);
  void recv_getNode(std::string& _return, const int32_t seqid);
  void getNodeLocal(std::string& _return, const int64_t shard_id, const int64_t id);
  int32_t send_getNodeLocal(const int64_t shard_id, const int64_t id);
  void recv_getNodeLocal(std::string& _return, const int32_t seqid);
  int64_t addNode(const int64_t id, const std::string& data);
  int32_t send_addNode(const int64_t id, const std::string& data);
  int64_t recv_addNode(const int32_t seqid);
  bool deleteNode(const int64_t id);
  int32_t send_deleteNode(const int64_t id);
  bool recv_deleteNode(const int32_t seqid);
  bool deleteNodeLocal(const int64_t shard_id, const int64_t id);
  int32_t send_deleteNodeLocal(const int64_t shard_id, const int64_t id);
  bool recv_deleteNodeLocal(const int32_t seqid);
  bool updateNode(const int64_t id, const std::string& data);
  int32_t send_updateNode(const int64_t id, const std::string& data);
  bool recv_updateNode(const int32_t seqid);
  void getLink(ThriftAssoc& _return, const int64_t id1, const int64_t link_type, const int64_t id2);
  int32_t send_getLink(const int64_t id1, const int64_t link_type, const int64_t id2);
  void recv_getLink(ThriftAssoc& _return, const int32_t seqid);
  void getLinkLocal(ThriftAssoc& _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  int32_t send_getLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  void recv_getLinkLocal(ThriftAssoc& _return, const int32_t seqid);
  bool addLink(const ThriftAssoc& link);
  int32_t send_addLink(const ThriftAssoc& link);
  bool recv_addLink(const int32_t seqid);
  bool deleteLink(const int64_t id1, const int64_t link_type, const int64_t id2);
  int32_t send_deleteLink(const int64_t id1, const int64_t link_type, const int64_t id2);
  bool recv_deleteLink(const int32_t seqid);
  bool deleteLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  int32_t send_deleteLinkLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t id2);
  bool recv_deleteLinkLocal(const int32_t seqid);
  bool updateLink(const ThriftAssoc& link);
  int32_t send_updateLink(const ThriftAssoc& link);
  bool recv_updateLink(const int32_t seqid);
  void getLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type);
  int32_t send_getLinkList(const int64_t id1, const int64_t link_type);
  void recv_getLinkList(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  void getLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type);
  int32_t send_getLinkListLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type);
  void recv_getLinkListLocal(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  void getFilteredLinkList(std::vector<ThriftAssoc> & _return, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  int32_t send_getFilteredLinkList(const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  void recv_getFilteredLinkList(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  void getFilteredLinkListLocal(std::vector<ThriftAssoc> & _return, const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  int32_t send_getFilteredLinkListLocal(const int64_t shard_id, const int64_t id1, const int64_t link_type, const int64_t min_timestamp, const int64_t max_timestamp, const int64_t offset, const int64_t limit);
  void recv_getFilteredLinkListLocal(std::vector<ThriftAssoc> & _return, const int32_t seqid);
  int64_t countLinks(const int64_t id1, const int64_t link_type);
  int32_t send_countLinks(const int64_t id1, const int64_t link_type);
  int64_t recv_countLinks(const int32_t seqid);
  void regular_path_query(RPQCtx& _return, const std::string& query);
  int32_t send_regular_path_query(const std::string& query);
  void recv_regular_path_query(RPQCtx& _return, const int32_t seqid);
  void rpq(RPQCtx& _return, const RPQuery& query);
  int32_t send_rpq(const RPQuery& query);
  void recv_rpq(RPQCtx& _return, const int32_t seqid);
  void path_query(RPQCtx& _return, const std::vector<int64_t> & query);
  int32_t send_path_query(const std::vector<int64_t> & query);
  void recv_path_query(RPQCtx& _return, const int32_t seqid);
  void path_query_local(RPQCtx& _return, const std::vector<int64_t> & query);
  int32_t send_path_query_local(const std::vector<int64_t> & query);
  void recv_path_query_local(RPQCtx& _return, const int32_t seqid);
  void advance_path_query_ctx(RPQCtx& _return, const std::vector<int64_t> & query, const RPQCtx& ctx);
  int32_t send_advance_path_query_ctx(const std::vector<int64_t> & query, const RPQCtx& ctx);
  void recv_advance_path_query_ctx(RPQCtx& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
