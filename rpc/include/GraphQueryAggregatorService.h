/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GraphQueryAggregatorService_H
#define GraphQueryAggregatorService_H

#include <thrift/TDispatchProcessor.h>
#include "succinct_graph_types.h"



class GraphQueryAggregatorServiceIf {
 public:
  virtual ~GraphQueryAggregatorServiceIf() {}
  virtual int32_t init() = 0;
  virtual int32_t init_local_shards() = 0;
  virtual int32_t connect_to_aggregators() = 0;
  virtual void shutdown() = 0;
  virtual void disconnect_from_local_shards() = 0;
  virtual void disconnect_from_aggregators() = 0;
  virtual void get_attribute_local(std::string& _return, const int64_t nodeId, const int32_t attrId) = 0;
  virtual void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId) = 0;
  virtual void get_neighbors_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId) = 0;
  virtual void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype) = 0;
  virtual void get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) = 0;
  virtual void get_neighbors_attr(std::vector<int64_t> & _return, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_nodes_local(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) = 0;
  virtual void get_nodes2_local(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) = 0;
  virtual void filter_nodes_local(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype) = 0;
  virtual void get_edge_attrs_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) = 0;
  virtual void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) = 0;
  virtual void assoc_range_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int32_t> & off, const std::vector<int32_t> & len) = 0;
  virtual void assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) = 0;
  virtual int64_t assoc_count(const int64_t src, const int64_t atype) = 0;
  virtual void assoc_count_batched(std::vector<int64_t> & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype) = 0;
  virtual int64_t assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype) = 0;
  virtual void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) = 0;
  virtual void assoc_get_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<std::set<int64_t> > & dstIdSet, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh) = 0;
  virtual void assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) = 0;
  virtual void obj_get(std::vector<std::string> & _return, const int64_t nodeId) = 0;
  virtual void obj_get_batched(std::vector<std::vector<std::string> > & _return, const std::vector<int64_t> & nodeId) = 0;
  virtual void obj_get_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId) = 0;
  virtual void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) = 0;
  virtual void assoc_time_range_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh, const std::vector<int32_t> & limit) = 0;
  virtual void assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) = 0;
};

class GraphQueryAggregatorServiceIfFactory {
 public:
  typedef GraphQueryAggregatorServiceIf Handler;

  virtual ~GraphQueryAggregatorServiceIfFactory() {}

  virtual GraphQueryAggregatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GraphQueryAggregatorServiceIf* /* handler */) = 0;
};

class GraphQueryAggregatorServiceIfSingletonFactory : virtual public GraphQueryAggregatorServiceIfFactory {
 public:
  GraphQueryAggregatorServiceIfSingletonFactory(const boost::shared_ptr<GraphQueryAggregatorServiceIf>& iface) : iface_(iface) {}
  virtual ~GraphQueryAggregatorServiceIfSingletonFactory() {}

  virtual GraphQueryAggregatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GraphQueryAggregatorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<GraphQueryAggregatorServiceIf> iface_;
};

class GraphQueryAggregatorServiceNull : virtual public GraphQueryAggregatorServiceIf {
 public:
  virtual ~GraphQueryAggregatorServiceNull() {}
  int32_t init() {
    int32_t _return = 0;
    return _return;
  }
  int32_t init_local_shards() {
    int32_t _return = 0;
    return _return;
  }
  int32_t connect_to_aggregators() {
    int32_t _return = 0;
    return _return;
  }
  void shutdown() {
    return;
  }
  void disconnect_from_local_shards() {
    return;
  }
  void disconnect_from_aggregators() {
    return;
  }
  void get_attribute_local(std::string& /* _return */, const int64_t /* nodeId */, const int32_t /* attrId */) {
    return;
  }
  void get_neighbors(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */) {
    return;
  }
  void get_neighbors_local(std::vector<int64_t> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */) {
    return;
  }
  void get_neighbors_atype(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void get_neighbors_atype_local(std::vector<int64_t> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void get_neighbors_attr(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_neighbors_attr_local(std::vector<int64_t> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_nodes(std::set<int64_t> & /* _return */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_nodes_local(std::set<int64_t> & /* _return */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_nodes2(std::set<int64_t> & /* _return */, const int32_t /* attrId1 */, const std::string& /* attrKey1 */, const int32_t /* attrId2 */, const std::string& /* attrKey2 */) {
    return;
  }
  void get_nodes2_local(std::set<int64_t> & /* _return */, const int32_t /* attrId1 */, const std::string& /* attrKey1 */, const int32_t /* attrId2 */, const std::string& /* attrKey2 */) {
    return;
  }
  void filter_nodes_local(std::vector<int64_t> & /* _return */, const std::vector<int64_t> & /* nodeIds */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_edge_attrs(std::vector<std::string> & /* _return */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void get_edge_attrs_local(std::vector<std::string> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void assoc_range(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const int32_t /* off */, const int32_t /* len */) {
    return;
  }
  void assoc_range_batched(std::vector<std::vector<ThriftAssoc> > & /* _return */, const std::vector<int64_t> & /* src */, const std::vector<int64_t> & /* atype */, const std::vector<int32_t> & /* off */, const std::vector<int32_t> & /* len */) {
    return;
  }
  void assoc_range_local(std::vector<ThriftAssoc> & /* _return */, const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */, const int32_t /* off */, const int32_t /* len */) {
    return;
  }
  int64_t assoc_count(const int64_t /* src */, const int64_t /* atype */) {
    int64_t _return = 0;
    return _return;
  }
  void assoc_count_batched(std::vector<int64_t> & /* _return */, const std::vector<int64_t> & /* src */, const std::vector<int64_t> & /* atype */) {
    return;
  }
  int64_t assoc_count_local(const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */) {
    int64_t _return = 0;
    return _return;
  }
  void assoc_get(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const std::set<int64_t> & /* dstIdSet */, const int64_t /* tLow */, const int64_t /* tHigh */) {
    return;
  }
  void assoc_get_batched(std::vector<std::vector<ThriftAssoc> > & /* _return */, const std::vector<int64_t> & /* src */, const std::vector<int64_t> & /* atype */, const std::vector<std::set<int64_t> > & /* dstIdSet */, const std::vector<int64_t> & /* tLow */, const std::vector<int64_t> & /* tHigh */) {
    return;
  }
  void assoc_get_local(std::vector<ThriftAssoc> & /* _return */, const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */, const std::set<int64_t> & /* dstIdSet */, const int64_t /* tLow */, const int64_t /* tHigh */) {
    return;
  }
  void obj_get(std::vector<std::string> & /* _return */, const int64_t /* nodeId */) {
    return;
  }
  void obj_get_batched(std::vector<std::vector<std::string> > & /* _return */, const std::vector<int64_t> & /* nodeId */) {
    return;
  }
  void obj_get_local(std::vector<std::string> & /* _return */, const int32_t /* shardId */, const int64_t /* nodeId */) {
    return;
  }
  void assoc_time_range(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const int64_t /* tLow */, const int64_t /* tHigh */, const int32_t /* limit */) {
    return;
  }
  void assoc_time_range_batched(std::vector<std::vector<ThriftAssoc> > & /* _return */, const std::vector<int64_t> & /* src */, const std::vector<int64_t> & /* atype */, const std::vector<int64_t> & /* tLow */, const std::vector<int64_t> & /* tHigh */, const std::vector<int32_t> & /* limit */) {
    return;
  }
  void assoc_time_range_local(std::vector<ThriftAssoc> & /* _return */, const int32_t /* shardId */, const int64_t /* src */, const int64_t /* atype */, const int64_t /* tLow */, const int64_t /* tHigh */, const int32_t /* limit */) {
    return;
  }
};


class GraphQueryAggregatorService_init_args {
 public:

  GraphQueryAggregatorService_init_args() {
  }

  virtual ~GraphQueryAggregatorService_init_args() throw() {}


  bool operator == (const GraphQueryAggregatorService_init_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_init_pargs {
 public:


  virtual ~GraphQueryAggregatorService_init_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_init_result__isset {
  _GraphQueryAggregatorService_init_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_init_result__isset;

class GraphQueryAggregatorService_init_result {
 public:

  GraphQueryAggregatorService_init_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_init_result() throw() {}

  int32_t success;

  _GraphQueryAggregatorService_init_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_init_presult__isset {
  _GraphQueryAggregatorService_init_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_init_presult__isset;

class GraphQueryAggregatorService_init_presult {
 public:


  virtual ~GraphQueryAggregatorService_init_presult() throw() {}

  int32_t* success;

  _GraphQueryAggregatorService_init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_init_local_shards_args {
 public:

  GraphQueryAggregatorService_init_local_shards_args() {
  }

  virtual ~GraphQueryAggregatorService_init_local_shards_args() throw() {}


  bool operator == (const GraphQueryAggregatorService_init_local_shards_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_init_local_shards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_init_local_shards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_init_local_shards_pargs {
 public:


  virtual ~GraphQueryAggregatorService_init_local_shards_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_init_local_shards_result__isset {
  _GraphQueryAggregatorService_init_local_shards_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_init_local_shards_result__isset;

class GraphQueryAggregatorService_init_local_shards_result {
 public:

  GraphQueryAggregatorService_init_local_shards_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_init_local_shards_result() throw() {}

  int32_t success;

  _GraphQueryAggregatorService_init_local_shards_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_init_local_shards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_init_local_shards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_init_local_shards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_init_local_shards_presult__isset {
  _GraphQueryAggregatorService_init_local_shards_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_init_local_shards_presult__isset;

class GraphQueryAggregatorService_init_local_shards_presult {
 public:


  virtual ~GraphQueryAggregatorService_init_local_shards_presult() throw() {}

  int32_t* success;

  _GraphQueryAggregatorService_init_local_shards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_connect_to_aggregators_args {
 public:

  GraphQueryAggregatorService_connect_to_aggregators_args() {
  }

  virtual ~GraphQueryAggregatorService_connect_to_aggregators_args() throw() {}


  bool operator == (const GraphQueryAggregatorService_connect_to_aggregators_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_connect_to_aggregators_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_connect_to_aggregators_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_connect_to_aggregators_pargs {
 public:


  virtual ~GraphQueryAggregatorService_connect_to_aggregators_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_connect_to_aggregators_result__isset {
  _GraphQueryAggregatorService_connect_to_aggregators_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_connect_to_aggregators_result__isset;

class GraphQueryAggregatorService_connect_to_aggregators_result {
 public:

  GraphQueryAggregatorService_connect_to_aggregators_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_connect_to_aggregators_result() throw() {}

  int32_t success;

  _GraphQueryAggregatorService_connect_to_aggregators_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_connect_to_aggregators_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_connect_to_aggregators_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_connect_to_aggregators_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_connect_to_aggregators_presult__isset {
  _GraphQueryAggregatorService_connect_to_aggregators_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_connect_to_aggregators_presult__isset;

class GraphQueryAggregatorService_connect_to_aggregators_presult {
 public:


  virtual ~GraphQueryAggregatorService_connect_to_aggregators_presult() throw() {}

  int32_t* success;

  _GraphQueryAggregatorService_connect_to_aggregators_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_shutdown_args {
 public:

  GraphQueryAggregatorService_shutdown_args() {
  }

  virtual ~GraphQueryAggregatorService_shutdown_args() throw() {}


  bool operator == (const GraphQueryAggregatorService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_shutdown_pargs {
 public:


  virtual ~GraphQueryAggregatorService_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_shutdown_result {
 public:

  GraphQueryAggregatorService_shutdown_result() {
  }

  virtual ~GraphQueryAggregatorService_shutdown_result() throw() {}


  bool operator == (const GraphQueryAggregatorService_shutdown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_shutdown_presult {
 public:


  virtual ~GraphQueryAggregatorService_shutdown_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_disconnect_from_local_shards_args {
 public:

  GraphQueryAggregatorService_disconnect_from_local_shards_args() {
  }

  virtual ~GraphQueryAggregatorService_disconnect_from_local_shards_args() throw() {}


  bool operator == (const GraphQueryAggregatorService_disconnect_from_local_shards_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_disconnect_from_local_shards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_disconnect_from_local_shards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_local_shards_pargs {
 public:


  virtual ~GraphQueryAggregatorService_disconnect_from_local_shards_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_local_shards_result {
 public:

  GraphQueryAggregatorService_disconnect_from_local_shards_result() {
  }

  virtual ~GraphQueryAggregatorService_disconnect_from_local_shards_result() throw() {}


  bool operator == (const GraphQueryAggregatorService_disconnect_from_local_shards_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_disconnect_from_local_shards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_disconnect_from_local_shards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_local_shards_presult {
 public:


  virtual ~GraphQueryAggregatorService_disconnect_from_local_shards_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GraphQueryAggregatorService_disconnect_from_aggregators_args {
 public:

  GraphQueryAggregatorService_disconnect_from_aggregators_args() {
  }

  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_args() throw() {}


  bool operator == (const GraphQueryAggregatorService_disconnect_from_aggregators_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_disconnect_from_aggregators_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_disconnect_from_aggregators_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_aggregators_pargs {
 public:


  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_aggregators_result {
 public:

  GraphQueryAggregatorService_disconnect_from_aggregators_result() {
  }

  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_result() throw() {}


  bool operator == (const GraphQueryAggregatorService_disconnect_from_aggregators_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_disconnect_from_aggregators_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_disconnect_from_aggregators_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_disconnect_from_aggregators_presult {
 public:


  virtual ~GraphQueryAggregatorService_disconnect_from_aggregators_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_attribute_local_args__isset {
  _GraphQueryAggregatorService_get_attribute_local_args__isset() : nodeId(false), attrId(false) {}
  bool nodeId;
  bool attrId;
} _GraphQueryAggregatorService_get_attribute_local_args__isset;

class GraphQueryAggregatorService_get_attribute_local_args {
 public:

  GraphQueryAggregatorService_get_attribute_local_args() : nodeId(0), attrId(0) {
  }

  virtual ~GraphQueryAggregatorService_get_attribute_local_args() throw() {}

  int64_t nodeId;
  int32_t attrId;

  _GraphQueryAggregatorService_get_attribute_local_args__isset __isset;

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_attrId(const int32_t val) {
    attrId = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_attribute_local_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_attribute_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_attribute_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_attribute_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_attribute_local_pargs() throw() {}

  const int64_t* nodeId;
  const int32_t* attrId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_attribute_local_result__isset {
  _GraphQueryAggregatorService_get_attribute_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_attribute_local_result__isset;

class GraphQueryAggregatorService_get_attribute_local_result {
 public:

  GraphQueryAggregatorService_get_attribute_local_result() : success() {
  }

  virtual ~GraphQueryAggregatorService_get_attribute_local_result() throw() {}

  std::string success;

  _GraphQueryAggregatorService_get_attribute_local_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_attribute_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_attribute_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_attribute_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_attribute_local_presult__isset {
  _GraphQueryAggregatorService_get_attribute_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_attribute_local_presult__isset;

class GraphQueryAggregatorService_get_attribute_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_attribute_local_presult() throw() {}

  std::string* success;

  _GraphQueryAggregatorService_get_attribute_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_args__isset {
  _GraphQueryAggregatorService_get_neighbors_args__isset() : nodeId(false) {}
  bool nodeId;
} _GraphQueryAggregatorService_get_neighbors_args__isset;

class GraphQueryAggregatorService_get_neighbors_args {
 public:

  GraphQueryAggregatorService_get_neighbors_args() : nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_args() throw() {}

  int64_t nodeId;

  _GraphQueryAggregatorService_get_neighbors_args__isset __isset;

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_pargs() throw() {}

  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_result__isset {
  _GraphQueryAggregatorService_get_neighbors_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_result__isset;

class GraphQueryAggregatorService_get_neighbors_result {
 public:

  GraphQueryAggregatorService_get_neighbors_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_presult__isset;

class GraphQueryAggregatorService_get_neighbors_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_local_args__isset {
  _GraphQueryAggregatorService_get_neighbors_local_args__isset() : shardId(false), nodeId(false) {}
  bool shardId;
  bool nodeId;
} _GraphQueryAggregatorService_get_neighbors_local_args__isset;

class GraphQueryAggregatorService_get_neighbors_local_args {
 public:

  GraphQueryAggregatorService_get_neighbors_local_args() : shardId(0), nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_local_args() throw() {}

  int32_t shardId;
  int64_t nodeId;

  _GraphQueryAggregatorService_get_neighbors_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_local_result__isset {
  _GraphQueryAggregatorService_get_neighbors_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_local_result__isset;

class GraphQueryAggregatorService_get_neighbors_local_result {
 public:

  GraphQueryAggregatorService_get_neighbors_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_local_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_local_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_local_presult__isset;

class GraphQueryAggregatorService_get_neighbors_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_local_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_args__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_args__isset() : nodeId(false), atype(false) {}
  bool nodeId;
  bool atype;
} _GraphQueryAggregatorService_get_neighbors_atype_args__isset;

class GraphQueryAggregatorService_get_neighbors_atype_args {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_args() : nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_args() throw() {}

  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_neighbors_atype_args__isset __isset;

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_atype_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_pargs() throw() {}

  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_result__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_atype_result__isset;

class GraphQueryAggregatorService_get_neighbors_atype_result {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_atype_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_atype_presult__isset;

class GraphQueryAggregatorService_get_neighbors_atype_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_atype_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset() : shardId(false), nodeId(false), atype(false) {}
  bool shardId;
  bool nodeId;
  bool atype;
} _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset;

class GraphQueryAggregatorService_get_neighbors_atype_local_args {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_local_args() : shardId(0), nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_args() throw() {}

  int32_t shardId;
  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_neighbors_atype_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_atype_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset;

class GraphQueryAggregatorService_get_neighbors_atype_local_result {
 public:

  GraphQueryAggregatorService_get_neighbors_atype_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_atype_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_atype_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_atype_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_atype_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset;

class GraphQueryAggregatorService_get_neighbors_atype_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_atype_local_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_atype_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_args__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_args__isset() : nodeId(false), attrId(false), attrKey(false) {}
  bool nodeId;
  bool attrId;
  bool attrKey;
} _GraphQueryAggregatorService_get_neighbors_attr_args__isset;

class GraphQueryAggregatorService_get_neighbors_attr_args {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_args() : nodeId(0), attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_args() throw() {}

  int64_t nodeId;
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_neighbors_attr_args__isset __isset;

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_attrId(const int32_t val) {
    attrId = val;
  }

  void __set_attrKey(const std::string& val) {
    attrKey = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_attr_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_pargs() throw() {}

  const int64_t* nodeId;
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_result__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_attr_result__isset;

class GraphQueryAggregatorService_get_neighbors_attr_result {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_attr_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_attr_presult__isset;

class GraphQueryAggregatorService_get_neighbors_attr_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_attr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset() : shardId(false), nodeId(false), attrId(false), attrKey(false) {}
  bool shardId;
  bool nodeId;
  bool attrId;
  bool attrKey;
} _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset;

class GraphQueryAggregatorService_get_neighbors_attr_local_args {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_local_args() : shardId(0), nodeId(0), attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_args() throw() {}

  int32_t shardId;
  int64_t nodeId;
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_neighbors_attr_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_attrId(const int32_t val) {
    attrId = val;
  }

  void __set_attrKey(const std::string& val) {
    attrKey = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_neighbors_attr_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* nodeId;
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset;

class GraphQueryAggregatorService_get_neighbors_attr_local_result {
 public:

  GraphQueryAggregatorService_get_neighbors_attr_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_get_neighbors_attr_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_neighbors_attr_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_neighbors_attr_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_neighbors_attr_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset {
  _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset;

class GraphQueryAggregatorService_get_neighbors_attr_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_neighbors_attr_local_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_get_neighbors_attr_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes_args__isset {
  _GraphQueryAggregatorService_get_nodes_args__isset() : attrId(false), attrKey(false) {}
  bool attrId;
  bool attrKey;
} _GraphQueryAggregatorService_get_nodes_args__isset;

class GraphQueryAggregatorService_get_nodes_args {
 public:

  GraphQueryAggregatorService_get_nodes_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_args() throw() {}

  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_nodes_args__isset __isset;

  void __set_attrId(const int32_t val) {
    attrId = val;
  }

  void __set_attrKey(const std::string& val) {
    attrKey = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes_args & rhs) const
  {
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_pargs() throw() {}

  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_result__isset {
  _GraphQueryAggregatorService_get_nodes_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes_result__isset;

class GraphQueryAggregatorService_get_nodes_result {
 public:

  GraphQueryAggregatorService_get_nodes_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_result() throw() {}

  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_presult__isset {
  _GraphQueryAggregatorService_get_nodes_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes_presult__isset;

class GraphQueryAggregatorService_get_nodes_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_presult() throw() {}

  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes_local_args__isset {
  _GraphQueryAggregatorService_get_nodes_local_args__isset() : attrId(false), attrKey(false) {}
  bool attrId;
  bool attrKey;
} _GraphQueryAggregatorService_get_nodes_local_args__isset;

class GraphQueryAggregatorService_get_nodes_local_args {
 public:

  GraphQueryAggregatorService_get_nodes_local_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_local_args() throw() {}

  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_get_nodes_local_args__isset __isset;

  void __set_attrId(const int32_t val) {
    attrId = val;
  }

  void __set_attrKey(const std::string& val) {
    attrKey = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes_local_args & rhs) const
  {
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_local_pargs() throw() {}

  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_local_result__isset {
  _GraphQueryAggregatorService_get_nodes_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes_local_result__isset;

class GraphQueryAggregatorService_get_nodes_local_result {
 public:

  GraphQueryAggregatorService_get_nodes_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes_local_result() throw() {}

  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes_local_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes_local_presult__isset {
  _GraphQueryAggregatorService_get_nodes_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes_local_presult__isset;

class GraphQueryAggregatorService_get_nodes_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes_local_presult() throw() {}

  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes2_args__isset {
  _GraphQueryAggregatorService_get_nodes2_args__isset() : attrId1(false), attrKey1(false), attrId2(false), attrKey2(false) {}
  bool attrId1;
  bool attrKey1;
  bool attrId2;
  bool attrKey2;
} _GraphQueryAggregatorService_get_nodes2_args__isset;

class GraphQueryAggregatorService_get_nodes2_args {
 public:

  GraphQueryAggregatorService_get_nodes2_args() : attrId1(0), attrKey1(), attrId2(0), attrKey2() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_args() throw() {}

  int32_t attrId1;
  std::string attrKey1;
  int32_t attrId2;
  std::string attrKey2;

  _GraphQueryAggregatorService_get_nodes2_args__isset __isset;

  void __set_attrId1(const int32_t val) {
    attrId1 = val;
  }

  void __set_attrKey1(const std::string& val) {
    attrKey1 = val;
  }

  void __set_attrId2(const int32_t val) {
    attrId2 = val;
  }

  void __set_attrKey2(const std::string& val) {
    attrKey2 = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes2_args & rhs) const
  {
    if (!(attrId1 == rhs.attrId1))
      return false;
    if (!(attrKey1 == rhs.attrKey1))
      return false;
    if (!(attrId2 == rhs.attrId2))
      return false;
    if (!(attrKey2 == rhs.attrKey2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes2_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_pargs() throw() {}

  const int32_t* attrId1;
  const std::string* attrKey1;
  const int32_t* attrId2;
  const std::string* attrKey2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_result__isset {
  _GraphQueryAggregatorService_get_nodes2_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes2_result__isset;

class GraphQueryAggregatorService_get_nodes2_result {
 public:

  GraphQueryAggregatorService_get_nodes2_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_result() throw() {}

  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes2_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_presult__isset {
  _GraphQueryAggregatorService_get_nodes2_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes2_presult__isset;

class GraphQueryAggregatorService_get_nodes2_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_presult() throw() {}

  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_nodes2_local_args__isset {
  _GraphQueryAggregatorService_get_nodes2_local_args__isset() : attrId1(false), attrKey1(false), attrId2(false), attrKey2(false) {}
  bool attrId1;
  bool attrKey1;
  bool attrId2;
  bool attrKey2;
} _GraphQueryAggregatorService_get_nodes2_local_args__isset;

class GraphQueryAggregatorService_get_nodes2_local_args {
 public:

  GraphQueryAggregatorService_get_nodes2_local_args() : attrId1(0), attrKey1(), attrId2(0), attrKey2() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_local_args() throw() {}

  int32_t attrId1;
  std::string attrKey1;
  int32_t attrId2;
  std::string attrKey2;

  _GraphQueryAggregatorService_get_nodes2_local_args__isset __isset;

  void __set_attrId1(const int32_t val) {
    attrId1 = val;
  }

  void __set_attrKey1(const std::string& val) {
    attrKey1 = val;
  }

  void __set_attrId2(const int32_t val) {
    attrId2 = val;
  }

  void __set_attrKey2(const std::string& val) {
    attrKey2 = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes2_local_args & rhs) const
  {
    if (!(attrId1 == rhs.attrId1))
      return false;
    if (!(attrKey1 == rhs.attrKey1))
      return false;
    if (!(attrId2 == rhs.attrId2))
      return false;
    if (!(attrKey2 == rhs.attrKey2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_nodes2_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_local_pargs() throw() {}

  const int32_t* attrId1;
  const std::string* attrKey1;
  const int32_t* attrId2;
  const std::string* attrKey2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_local_result__isset {
  _GraphQueryAggregatorService_get_nodes2_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes2_local_result__isset;

class GraphQueryAggregatorService_get_nodes2_local_result {
 public:

  GraphQueryAggregatorService_get_nodes2_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_nodes2_local_result() throw() {}

  std::set<int64_t>  success;

  _GraphQueryAggregatorService_get_nodes2_local_result__isset __isset;

  void __set_success(const std::set<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_nodes2_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_nodes2_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_nodes2_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_nodes2_local_presult__isset {
  _GraphQueryAggregatorService_get_nodes2_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_nodes2_local_presult__isset;

class GraphQueryAggregatorService_get_nodes2_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_nodes2_local_presult() throw() {}

  std::set<int64_t> * success;

  _GraphQueryAggregatorService_get_nodes2_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_filter_nodes_local_args__isset {
  _GraphQueryAggregatorService_filter_nodes_local_args__isset() : nodeIds(false), attrId(false), attrKey(false) {}
  bool nodeIds;
  bool attrId;
  bool attrKey;
} _GraphQueryAggregatorService_filter_nodes_local_args__isset;

class GraphQueryAggregatorService_filter_nodes_local_args {
 public:

  GraphQueryAggregatorService_filter_nodes_local_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryAggregatorService_filter_nodes_local_args() throw() {}

  std::vector<int64_t>  nodeIds;
  int32_t attrId;
  std::string attrKey;

  _GraphQueryAggregatorService_filter_nodes_local_args__isset __isset;

  void __set_nodeIds(const std::vector<int64_t> & val) {
    nodeIds = val;
  }

  void __set_attrId(const int32_t val) {
    attrId = val;
  }

  void __set_attrKey(const std::string& val) {
    attrKey = val;
  }

  bool operator == (const GraphQueryAggregatorService_filter_nodes_local_args & rhs) const
  {
    if (!(nodeIds == rhs.nodeIds))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_filter_nodes_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_filter_nodes_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_filter_nodes_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_filter_nodes_local_pargs() throw() {}

  const std::vector<int64_t> * nodeIds;
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_filter_nodes_local_result__isset {
  _GraphQueryAggregatorService_filter_nodes_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_filter_nodes_local_result__isset;

class GraphQueryAggregatorService_filter_nodes_local_result {
 public:

  GraphQueryAggregatorService_filter_nodes_local_result() {
  }

  virtual ~GraphQueryAggregatorService_filter_nodes_local_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_filter_nodes_local_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_filter_nodes_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_filter_nodes_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_filter_nodes_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_filter_nodes_local_presult__isset {
  _GraphQueryAggregatorService_filter_nodes_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_filter_nodes_local_presult__isset;

class GraphQueryAggregatorService_filter_nodes_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_filter_nodes_local_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_filter_nodes_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_args__isset {
  _GraphQueryAggregatorService_get_edge_attrs_args__isset() : nodeId(false), atype(false) {}
  bool nodeId;
  bool atype;
} _GraphQueryAggregatorService_get_edge_attrs_args__isset;

class GraphQueryAggregatorService_get_edge_attrs_args {
 public:

  GraphQueryAggregatorService_get_edge_attrs_args() : nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_args() throw() {}

  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_edge_attrs_args__isset __isset;

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_edge_attrs_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_pargs() throw() {}

  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_result__isset {
  _GraphQueryAggregatorService_get_edge_attrs_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_edge_attrs_result__isset;

class GraphQueryAggregatorService_get_edge_attrs_result {
 public:

  GraphQueryAggregatorService_get_edge_attrs_result() {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_result() throw() {}

  std::vector<std::string>  success;

  _GraphQueryAggregatorService_get_edge_attrs_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_presult__isset {
  _GraphQueryAggregatorService_get_edge_attrs_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_edge_attrs_presult__isset;

class GraphQueryAggregatorService_get_edge_attrs_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_presult() throw() {}

  std::vector<std::string> * success;

  _GraphQueryAggregatorService_get_edge_attrs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_local_args__isset {
  _GraphQueryAggregatorService_get_edge_attrs_local_args__isset() : shardId(false), nodeId(false), atype(false) {}
  bool shardId;
  bool nodeId;
  bool atype;
} _GraphQueryAggregatorService_get_edge_attrs_local_args__isset;

class GraphQueryAggregatorService_get_edge_attrs_local_args {
 public:

  GraphQueryAggregatorService_get_edge_attrs_local_args() : shardId(0), nodeId(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_args() throw() {}

  int32_t shardId;
  int64_t nodeId;
  int64_t atype;

  _GraphQueryAggregatorService_get_edge_attrs_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_get_edge_attrs_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_local_result__isset {
  _GraphQueryAggregatorService_get_edge_attrs_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_edge_attrs_local_result__isset;

class GraphQueryAggregatorService_get_edge_attrs_local_result {
 public:

  GraphQueryAggregatorService_get_edge_attrs_local_result() {
  }

  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_result() throw() {}

  std::vector<std::string>  success;

  _GraphQueryAggregatorService_get_edge_attrs_local_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_get_edge_attrs_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_get_edge_attrs_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_get_edge_attrs_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset {
  _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset;

class GraphQueryAggregatorService_get_edge_attrs_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_get_edge_attrs_local_presult() throw() {}

  std::vector<std::string> * success;

  _GraphQueryAggregatorService_get_edge_attrs_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_range_args__isset {
  _GraphQueryAggregatorService_assoc_range_args__isset() : src(false), atype(false), off(false), len(false) {}
  bool src;
  bool atype;
  bool off;
  bool len;
} _GraphQueryAggregatorService_assoc_range_args__isset;

class GraphQueryAggregatorService_assoc_range_args {
 public:

  GraphQueryAggregatorService_assoc_range_args() : src(0), atype(0), off(0), len(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_args() throw() {}

  int64_t src;
  int64_t atype;
  int32_t off;
  int32_t len;

  _GraphQueryAggregatorService_assoc_range_args__isset __isset;

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  void __set_off(const int32_t val) {
    off = val;
  }

  void __set_len(const int32_t val) {
    len = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_range_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_range_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_pargs() throw() {}

  const int64_t* src;
  const int64_t* atype;
  const int32_t* off;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_result__isset {
  _GraphQueryAggregatorService_assoc_range_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_range_result__isset;

class GraphQueryAggregatorService_assoc_range_result {
 public:

  GraphQueryAggregatorService_assoc_range_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_result() throw() {}

  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_range_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_presult__isset {
  _GraphQueryAggregatorService_assoc_range_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_range_presult__isset;

class GraphQueryAggregatorService_assoc_range_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_presult() throw() {}

  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_range_batched_args__isset {
  _GraphQueryAggregatorService_assoc_range_batched_args__isset() : src(false), atype(false), off(false), len(false) {}
  bool src;
  bool atype;
  bool off;
  bool len;
} _GraphQueryAggregatorService_assoc_range_batched_args__isset;

class GraphQueryAggregatorService_assoc_range_batched_args {
 public:

  GraphQueryAggregatorService_assoc_range_batched_args() {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_batched_args() throw() {}

  std::vector<int64_t>  src;
  std::vector<int64_t>  atype;
  std::vector<int32_t>  off;
  std::vector<int32_t>  len;

  _GraphQueryAggregatorService_assoc_range_batched_args__isset __isset;

  void __set_src(const std::vector<int64_t> & val) {
    src = val;
  }

  void __set_atype(const std::vector<int64_t> & val) {
    atype = val;
  }

  void __set_off(const std::vector<int32_t> & val) {
    off = val;
  }

  void __set_len(const std::vector<int32_t> & val) {
    len = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_range_batched_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_batched_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_batched_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_range_batched_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_batched_pargs() throw() {}

  const std::vector<int64_t> * src;
  const std::vector<int64_t> * atype;
  const std::vector<int32_t> * off;
  const std::vector<int32_t> * len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_batched_result__isset {
  _GraphQueryAggregatorService_assoc_range_batched_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_range_batched_result__isset;

class GraphQueryAggregatorService_assoc_range_batched_result {
 public:

  GraphQueryAggregatorService_assoc_range_batched_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_batched_result() throw() {}

  std::vector<std::vector<ThriftAssoc> >  success;

  _GraphQueryAggregatorService_assoc_range_batched_result__isset __isset;

  void __set_success(const std::vector<std::vector<ThriftAssoc> > & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_range_batched_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_batched_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_batched_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_batched_presult__isset {
  _GraphQueryAggregatorService_assoc_range_batched_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_range_batched_presult__isset;

class GraphQueryAggregatorService_assoc_range_batched_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_batched_presult() throw() {}

  std::vector<std::vector<ThriftAssoc> > * success;

  _GraphQueryAggregatorService_assoc_range_batched_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_range_local_args__isset {
  _GraphQueryAggregatorService_assoc_range_local_args__isset() : shardId(false), src(false), atype(false), off(false), len(false) {}
  bool shardId;
  bool src;
  bool atype;
  bool off;
  bool len;
} _GraphQueryAggregatorService_assoc_range_local_args__isset;

class GraphQueryAggregatorService_assoc_range_local_args {
 public:

  GraphQueryAggregatorService_assoc_range_local_args() : shardId(0), src(0), atype(0), off(0), len(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_local_args() throw() {}

  int32_t shardId;
  int64_t src;
  int64_t atype;
  int32_t off;
  int32_t len;

  _GraphQueryAggregatorService_assoc_range_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  void __set_off(const int32_t val) {
    off = val;
  }

  void __set_len(const int32_t val) {
    len = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_range_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_range_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;
  const int32_t* off;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_local_result__isset {
  _GraphQueryAggregatorService_assoc_range_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_range_local_result__isset;

class GraphQueryAggregatorService_assoc_range_local_result {
 public:

  GraphQueryAggregatorService_assoc_range_local_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_range_local_result() throw() {}

  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_range_local_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_range_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_range_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_range_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_range_local_presult__isset {
  _GraphQueryAggregatorService_assoc_range_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_range_local_presult__isset;

class GraphQueryAggregatorService_assoc_range_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_range_local_presult() throw() {}

  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_range_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_count_args__isset {
  _GraphQueryAggregatorService_assoc_count_args__isset() : src(false), atype(false) {}
  bool src;
  bool atype;
} _GraphQueryAggregatorService_assoc_count_args__isset;

class GraphQueryAggregatorService_assoc_count_args {
 public:

  GraphQueryAggregatorService_assoc_count_args() : src(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_args() throw() {}

  int64_t src;
  int64_t atype;

  _GraphQueryAggregatorService_assoc_count_args__isset __isset;

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_count_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_count_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_pargs() throw() {}

  const int64_t* src;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_result__isset {
  _GraphQueryAggregatorService_assoc_count_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_count_result__isset;

class GraphQueryAggregatorService_assoc_count_result {
 public:

  GraphQueryAggregatorService_assoc_count_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_result() throw() {}

  int64_t success;

  _GraphQueryAggregatorService_assoc_count_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_presult__isset {
  _GraphQueryAggregatorService_assoc_count_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_count_presult__isset;

class GraphQueryAggregatorService_assoc_count_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_presult() throw() {}

  int64_t* success;

  _GraphQueryAggregatorService_assoc_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_count_batched_args__isset {
  _GraphQueryAggregatorService_assoc_count_batched_args__isset() : src(false), atype(false) {}
  bool src;
  bool atype;
} _GraphQueryAggregatorService_assoc_count_batched_args__isset;

class GraphQueryAggregatorService_assoc_count_batched_args {
 public:

  GraphQueryAggregatorService_assoc_count_batched_args() {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_batched_args() throw() {}

  std::vector<int64_t>  src;
  std::vector<int64_t>  atype;

  _GraphQueryAggregatorService_assoc_count_batched_args__isset __isset;

  void __set_src(const std::vector<int64_t> & val) {
    src = val;
  }

  void __set_atype(const std::vector<int64_t> & val) {
    atype = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_count_batched_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_batched_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_batched_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_count_batched_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_batched_pargs() throw() {}

  const std::vector<int64_t> * src;
  const std::vector<int64_t> * atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_batched_result__isset {
  _GraphQueryAggregatorService_assoc_count_batched_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_count_batched_result__isset;

class GraphQueryAggregatorService_assoc_count_batched_result {
 public:

  GraphQueryAggregatorService_assoc_count_batched_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_batched_result() throw() {}

  std::vector<int64_t>  success;

  _GraphQueryAggregatorService_assoc_count_batched_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_count_batched_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_batched_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_batched_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_batched_presult__isset {
  _GraphQueryAggregatorService_assoc_count_batched_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_count_batched_presult__isset;

class GraphQueryAggregatorService_assoc_count_batched_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_batched_presult() throw() {}

  std::vector<int64_t> * success;

  _GraphQueryAggregatorService_assoc_count_batched_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_count_local_args__isset {
  _GraphQueryAggregatorService_assoc_count_local_args__isset() : shardId(false), src(false), atype(false) {}
  bool shardId;
  bool src;
  bool atype;
} _GraphQueryAggregatorService_assoc_count_local_args__isset;

class GraphQueryAggregatorService_assoc_count_local_args {
 public:

  GraphQueryAggregatorService_assoc_count_local_args() : shardId(0), src(0), atype(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_local_args() throw() {}

  int32_t shardId;
  int64_t src;
  int64_t atype;

  _GraphQueryAggregatorService_assoc_count_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_count_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_count_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_local_result__isset {
  _GraphQueryAggregatorService_assoc_count_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_count_local_result__isset;

class GraphQueryAggregatorService_assoc_count_local_result {
 public:

  GraphQueryAggregatorService_assoc_count_local_result() : success(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_count_local_result() throw() {}

  int64_t success;

  _GraphQueryAggregatorService_assoc_count_local_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_count_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_count_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_count_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_count_local_presult__isset {
  _GraphQueryAggregatorService_assoc_count_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_count_local_presult__isset;

class GraphQueryAggregatorService_assoc_count_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_count_local_presult() throw() {}

  int64_t* success;

  _GraphQueryAggregatorService_assoc_count_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_get_args__isset {
  _GraphQueryAggregatorService_assoc_get_args__isset() : src(false), atype(false), dstIdSet(false), tLow(false), tHigh(false) {}
  bool src;
  bool atype;
  bool dstIdSet;
  bool tLow;
  bool tHigh;
} _GraphQueryAggregatorService_assoc_get_args__isset;

class GraphQueryAggregatorService_assoc_get_args {
 public:

  GraphQueryAggregatorService_assoc_get_args() : src(0), atype(0), tLow(0), tHigh(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_args() throw() {}

  int64_t src;
  int64_t atype;
  std::set<int64_t>  dstIdSet;
  int64_t tLow;
  int64_t tHigh;

  _GraphQueryAggregatorService_assoc_get_args__isset __isset;

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  void __set_dstIdSet(const std::set<int64_t> & val) {
    dstIdSet = val;
  }

  void __set_tLow(const int64_t val) {
    tLow = val;
  }

  void __set_tHigh(const int64_t val) {
    tHigh = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_get_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dstIdSet == rhs.dstIdSet))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_get_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_pargs() throw() {}

  const int64_t* src;
  const int64_t* atype;
  const std::set<int64_t> * dstIdSet;
  const int64_t* tLow;
  const int64_t* tHigh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_result__isset {
  _GraphQueryAggregatorService_assoc_get_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_get_result__isset;

class GraphQueryAggregatorService_assoc_get_result {
 public:

  GraphQueryAggregatorService_assoc_get_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_result() throw() {}

  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_get_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_presult__isset {
  _GraphQueryAggregatorService_assoc_get_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_get_presult__isset;

class GraphQueryAggregatorService_assoc_get_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_presult() throw() {}

  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_get_batched_args__isset {
  _GraphQueryAggregatorService_assoc_get_batched_args__isset() : src(false), atype(false), dstIdSet(false), tLow(false), tHigh(false) {}
  bool src;
  bool atype;
  bool dstIdSet;
  bool tLow;
  bool tHigh;
} _GraphQueryAggregatorService_assoc_get_batched_args__isset;

class GraphQueryAggregatorService_assoc_get_batched_args {
 public:

  GraphQueryAggregatorService_assoc_get_batched_args() {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_batched_args() throw() {}

  std::vector<int64_t>  src;
  std::vector<int64_t>  atype;
  std::vector<std::set<int64_t> >  dstIdSet;
  std::vector<int64_t>  tLow;
  std::vector<int64_t>  tHigh;

  _GraphQueryAggregatorService_assoc_get_batched_args__isset __isset;

  void __set_src(const std::vector<int64_t> & val) {
    src = val;
  }

  void __set_atype(const std::vector<int64_t> & val) {
    atype = val;
  }

  void __set_dstIdSet(const std::vector<std::set<int64_t> > & val) {
    dstIdSet = val;
  }

  void __set_tLow(const std::vector<int64_t> & val) {
    tLow = val;
  }

  void __set_tHigh(const std::vector<int64_t> & val) {
    tHigh = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_get_batched_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dstIdSet == rhs.dstIdSet))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_batched_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_batched_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_get_batched_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_batched_pargs() throw() {}

  const std::vector<int64_t> * src;
  const std::vector<int64_t> * atype;
  const std::vector<std::set<int64_t> > * dstIdSet;
  const std::vector<int64_t> * tLow;
  const std::vector<int64_t> * tHigh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_batched_result__isset {
  _GraphQueryAggregatorService_assoc_get_batched_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_get_batched_result__isset;

class GraphQueryAggregatorService_assoc_get_batched_result {
 public:

  GraphQueryAggregatorService_assoc_get_batched_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_batched_result() throw() {}

  std::vector<std::vector<ThriftAssoc> >  success;

  _GraphQueryAggregatorService_assoc_get_batched_result__isset __isset;

  void __set_success(const std::vector<std::vector<ThriftAssoc> > & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_get_batched_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_batched_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_batched_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_batched_presult__isset {
  _GraphQueryAggregatorService_assoc_get_batched_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_get_batched_presult__isset;

class GraphQueryAggregatorService_assoc_get_batched_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_batched_presult() throw() {}

  std::vector<std::vector<ThriftAssoc> > * success;

  _GraphQueryAggregatorService_assoc_get_batched_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_get_local_args__isset {
  _GraphQueryAggregatorService_assoc_get_local_args__isset() : shardId(false), src(false), atype(false), dstIdSet(false), tLow(false), tHigh(false) {}
  bool shardId;
  bool src;
  bool atype;
  bool dstIdSet;
  bool tLow;
  bool tHigh;
} _GraphQueryAggregatorService_assoc_get_local_args__isset;

class GraphQueryAggregatorService_assoc_get_local_args {
 public:

  GraphQueryAggregatorService_assoc_get_local_args() : shardId(0), src(0), atype(0), tLow(0), tHigh(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_local_args() throw() {}

  int32_t shardId;
  int64_t src;
  int64_t atype;
  std::set<int64_t>  dstIdSet;
  int64_t tLow;
  int64_t tHigh;

  _GraphQueryAggregatorService_assoc_get_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  void __set_dstIdSet(const std::set<int64_t> & val) {
    dstIdSet = val;
  }

  void __set_tLow(const int64_t val) {
    tLow = val;
  }

  void __set_tHigh(const int64_t val) {
    tHigh = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_get_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dstIdSet == rhs.dstIdSet))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_get_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;
  const std::set<int64_t> * dstIdSet;
  const int64_t* tLow;
  const int64_t* tHigh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_local_result__isset {
  _GraphQueryAggregatorService_assoc_get_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_get_local_result__isset;

class GraphQueryAggregatorService_assoc_get_local_result {
 public:

  GraphQueryAggregatorService_assoc_get_local_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_get_local_result() throw() {}

  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_get_local_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_get_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_get_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_get_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_get_local_presult__isset {
  _GraphQueryAggregatorService_assoc_get_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_get_local_presult__isset;

class GraphQueryAggregatorService_assoc_get_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_get_local_presult() throw() {}

  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_get_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_obj_get_args__isset {
  _GraphQueryAggregatorService_obj_get_args__isset() : nodeId(false) {}
  bool nodeId;
} _GraphQueryAggregatorService_obj_get_args__isset;

class GraphQueryAggregatorService_obj_get_args {
 public:

  GraphQueryAggregatorService_obj_get_args() : nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_obj_get_args() throw() {}

  int64_t nodeId;

  _GraphQueryAggregatorService_obj_get_args__isset __isset;

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  bool operator == (const GraphQueryAggregatorService_obj_get_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_obj_get_pargs {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_pargs() throw() {}

  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_result__isset {
  _GraphQueryAggregatorService_obj_get_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_obj_get_result__isset;

class GraphQueryAggregatorService_obj_get_result {
 public:

  GraphQueryAggregatorService_obj_get_result() {
  }

  virtual ~GraphQueryAggregatorService_obj_get_result() throw() {}

  std::vector<std::string>  success;

  _GraphQueryAggregatorService_obj_get_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_obj_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_presult__isset {
  _GraphQueryAggregatorService_obj_get_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_obj_get_presult__isset;

class GraphQueryAggregatorService_obj_get_presult {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_presult() throw() {}

  std::vector<std::string> * success;

  _GraphQueryAggregatorService_obj_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_obj_get_batched_args__isset {
  _GraphQueryAggregatorService_obj_get_batched_args__isset() : nodeId(false) {}
  bool nodeId;
} _GraphQueryAggregatorService_obj_get_batched_args__isset;

class GraphQueryAggregatorService_obj_get_batched_args {
 public:

  GraphQueryAggregatorService_obj_get_batched_args() {
  }

  virtual ~GraphQueryAggregatorService_obj_get_batched_args() throw() {}

  std::vector<int64_t>  nodeId;

  _GraphQueryAggregatorService_obj_get_batched_args__isset __isset;

  void __set_nodeId(const std::vector<int64_t> & val) {
    nodeId = val;
  }

  bool operator == (const GraphQueryAggregatorService_obj_get_batched_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_batched_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_batched_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_obj_get_batched_pargs {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_batched_pargs() throw() {}

  const std::vector<int64_t> * nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_batched_result__isset {
  _GraphQueryAggregatorService_obj_get_batched_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_obj_get_batched_result__isset;

class GraphQueryAggregatorService_obj_get_batched_result {
 public:

  GraphQueryAggregatorService_obj_get_batched_result() {
  }

  virtual ~GraphQueryAggregatorService_obj_get_batched_result() throw() {}

  std::vector<std::vector<std::string> >  success;

  _GraphQueryAggregatorService_obj_get_batched_result__isset __isset;

  void __set_success(const std::vector<std::vector<std::string> > & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_obj_get_batched_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_batched_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_batched_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_batched_presult__isset {
  _GraphQueryAggregatorService_obj_get_batched_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_obj_get_batched_presult__isset;

class GraphQueryAggregatorService_obj_get_batched_presult {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_batched_presult() throw() {}

  std::vector<std::vector<std::string> > * success;

  _GraphQueryAggregatorService_obj_get_batched_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_obj_get_local_args__isset {
  _GraphQueryAggregatorService_obj_get_local_args__isset() : shardId(false), nodeId(false) {}
  bool shardId;
  bool nodeId;
} _GraphQueryAggregatorService_obj_get_local_args__isset;

class GraphQueryAggregatorService_obj_get_local_args {
 public:

  GraphQueryAggregatorService_obj_get_local_args() : shardId(0), nodeId(0) {
  }

  virtual ~GraphQueryAggregatorService_obj_get_local_args() throw() {}

  int32_t shardId;
  int64_t nodeId;

  _GraphQueryAggregatorService_obj_get_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  bool operator == (const GraphQueryAggregatorService_obj_get_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_obj_get_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_local_result__isset {
  _GraphQueryAggregatorService_obj_get_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_obj_get_local_result__isset;

class GraphQueryAggregatorService_obj_get_local_result {
 public:

  GraphQueryAggregatorService_obj_get_local_result() {
  }

  virtual ~GraphQueryAggregatorService_obj_get_local_result() throw() {}

  std::vector<std::string>  success;

  _GraphQueryAggregatorService_obj_get_local_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_obj_get_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_obj_get_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_obj_get_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_obj_get_local_presult__isset {
  _GraphQueryAggregatorService_obj_get_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_obj_get_local_presult__isset;

class GraphQueryAggregatorService_obj_get_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_obj_get_local_presult() throw() {}

  std::vector<std::string> * success;

  _GraphQueryAggregatorService_obj_get_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_args__isset {
  _GraphQueryAggregatorService_assoc_time_range_args__isset() : src(false), atype(false), tLow(false), tHigh(false), limit(false) {}
  bool src;
  bool atype;
  bool tLow;
  bool tHigh;
  bool limit;
} _GraphQueryAggregatorService_assoc_time_range_args__isset;

class GraphQueryAggregatorService_assoc_time_range_args {
 public:

  GraphQueryAggregatorService_assoc_time_range_args() : src(0), atype(0), tLow(0), tHigh(0), limit(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_args() throw() {}

  int64_t src;
  int64_t atype;
  int64_t tLow;
  int64_t tHigh;
  int32_t limit;

  _GraphQueryAggregatorService_assoc_time_range_args__isset __isset;

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  void __set_tLow(const int64_t val) {
    tLow = val;
  }

  void __set_tHigh(const int64_t val) {
    tHigh = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_time_range_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_pargs() throw() {}

  const int64_t* src;
  const int64_t* atype;
  const int64_t* tLow;
  const int64_t* tHigh;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_result__isset {
  _GraphQueryAggregatorService_assoc_time_range_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_time_range_result__isset;

class GraphQueryAggregatorService_assoc_time_range_result {
 public:

  GraphQueryAggregatorService_assoc_time_range_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_result() throw() {}

  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_time_range_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_presult__isset {
  _GraphQueryAggregatorService_assoc_time_range_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_time_range_presult__isset;

class GraphQueryAggregatorService_assoc_time_range_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_presult() throw() {}

  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_time_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_batched_args__isset {
  _GraphQueryAggregatorService_assoc_time_range_batched_args__isset() : src(false), atype(false), tLow(false), tHigh(false), limit(false) {}
  bool src;
  bool atype;
  bool tLow;
  bool tHigh;
  bool limit;
} _GraphQueryAggregatorService_assoc_time_range_batched_args__isset;

class GraphQueryAggregatorService_assoc_time_range_batched_args {
 public:

  GraphQueryAggregatorService_assoc_time_range_batched_args() {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_batched_args() throw() {}

  std::vector<int64_t>  src;
  std::vector<int64_t>  atype;
  std::vector<int64_t>  tLow;
  std::vector<int64_t>  tHigh;
  std::vector<int32_t>  limit;

  _GraphQueryAggregatorService_assoc_time_range_batched_args__isset __isset;

  void __set_src(const std::vector<int64_t> & val) {
    src = val;
  }

  void __set_atype(const std::vector<int64_t> & val) {
    atype = val;
  }

  void __set_tLow(const std::vector<int64_t> & val) {
    tLow = val;
  }

  void __set_tHigh(const std::vector<int64_t> & val) {
    tHigh = val;
  }

  void __set_limit(const std::vector<int32_t> & val) {
    limit = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_batched_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_batched_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_batched_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_time_range_batched_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_batched_pargs() throw() {}

  const std::vector<int64_t> * src;
  const std::vector<int64_t> * atype;
  const std::vector<int64_t> * tLow;
  const std::vector<int64_t> * tHigh;
  const std::vector<int32_t> * limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_batched_result__isset {
  _GraphQueryAggregatorService_assoc_time_range_batched_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_time_range_batched_result__isset;

class GraphQueryAggregatorService_assoc_time_range_batched_result {
 public:

  GraphQueryAggregatorService_assoc_time_range_batched_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_batched_result() throw() {}

  std::vector<std::vector<ThriftAssoc> >  success;

  _GraphQueryAggregatorService_assoc_time_range_batched_result__isset __isset;

  void __set_success(const std::vector<std::vector<ThriftAssoc> > & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_batched_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_batched_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_batched_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_batched_presult__isset {
  _GraphQueryAggregatorService_assoc_time_range_batched_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_time_range_batched_presult__isset;

class GraphQueryAggregatorService_assoc_time_range_batched_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_batched_presult() throw() {}

  std::vector<std::vector<ThriftAssoc> > * success;

  _GraphQueryAggregatorService_assoc_time_range_batched_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_local_args__isset {
  _GraphQueryAggregatorService_assoc_time_range_local_args__isset() : shardId(false), src(false), atype(false), tLow(false), tHigh(false), limit(false) {}
  bool shardId;
  bool src;
  bool atype;
  bool tLow;
  bool tHigh;
  bool limit;
} _GraphQueryAggregatorService_assoc_time_range_local_args__isset;

class GraphQueryAggregatorService_assoc_time_range_local_args {
 public:

  GraphQueryAggregatorService_assoc_time_range_local_args() : shardId(0), src(0), atype(0), tLow(0), tHigh(0), limit(0) {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_local_args() throw() {}

  int32_t shardId;
  int64_t src;
  int64_t atype;
  int64_t tLow;
  int64_t tHigh;
  int32_t limit;

  _GraphQueryAggregatorService_assoc_time_range_local_args__isset __isset;

  void __set_shardId(const int32_t val) {
    shardId = val;
  }

  void __set_src(const int64_t val) {
    src = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  void __set_tLow(const int64_t val) {
    tLow = val;
  }

  void __set_tHigh(const int64_t val) {
    tHigh = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_local_args & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphQueryAggregatorService_assoc_time_range_local_pargs {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_local_pargs() throw() {}

  const int32_t* shardId;
  const int64_t* src;
  const int64_t* atype;
  const int64_t* tLow;
  const int64_t* tHigh;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_local_result__isset {
  _GraphQueryAggregatorService_assoc_time_range_local_result__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_time_range_local_result__isset;

class GraphQueryAggregatorService_assoc_time_range_local_result {
 public:

  GraphQueryAggregatorService_assoc_time_range_local_result() {
  }

  virtual ~GraphQueryAggregatorService_assoc_time_range_local_result() throw() {}

  std::vector<ThriftAssoc>  success;

  _GraphQueryAggregatorService_assoc_time_range_local_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val) {
    success = val;
  }

  bool operator == (const GraphQueryAggregatorService_assoc_time_range_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryAggregatorService_assoc_time_range_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryAggregatorService_assoc_time_range_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphQueryAggregatorService_assoc_time_range_local_presult__isset {
  _GraphQueryAggregatorService_assoc_time_range_local_presult__isset() : success(false) {}
  bool success;
} _GraphQueryAggregatorService_assoc_time_range_local_presult__isset;

class GraphQueryAggregatorService_assoc_time_range_local_presult {
 public:


  virtual ~GraphQueryAggregatorService_assoc_time_range_local_presult() throw() {}

  std::vector<ThriftAssoc> * success;

  _GraphQueryAggregatorService_assoc_time_range_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GraphQueryAggregatorServiceClient : virtual public GraphQueryAggregatorServiceIf {
 public:
  GraphQueryAggregatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GraphQueryAggregatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t init();
  void send_init();
  int32_t recv_init();
  int32_t init_local_shards();
  void send_init_local_shards();
  int32_t recv_init_local_shards();
  int32_t connect_to_aggregators();
  void send_connect_to_aggregators();
  int32_t recv_connect_to_aggregators();
  void shutdown();
  void send_shutdown();
  void recv_shutdown();
  void disconnect_from_local_shards();
  void send_disconnect_from_local_shards();
  void recv_disconnect_from_local_shards();
  void disconnect_from_aggregators();
  void send_disconnect_from_aggregators();
  void recv_disconnect_from_aggregators();
  void get_attribute_local(std::string& _return, const int64_t nodeId, const int32_t attrId);
  void send_get_attribute_local(const int64_t nodeId, const int32_t attrId);
  void recv_get_attribute_local(std::string& _return);
  void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId);
  void send_get_neighbors(const int64_t nodeId);
  void recv_get_neighbors(std::vector<int64_t> & _return);
  void get_neighbors_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId);
  void send_get_neighbors_local(const int32_t shardId, const int64_t nodeId);
  void recv_get_neighbors_local(std::vector<int64_t> & _return);
  void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype);
  void send_get_neighbors_atype(const int64_t nodeId, const int64_t atype);
  void recv_get_neighbors_atype(std::vector<int64_t> & _return);
  void get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void send_get_neighbors_atype_local(const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void recv_get_neighbors_atype_local(std::vector<int64_t> & _return);
  void get_neighbors_attr(std::vector<int64_t> & _return, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void send_get_neighbors_attr(const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void recv_get_neighbors_attr(std::vector<int64_t> & _return);
  void get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void send_get_neighbors_attr_local(const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey);
  void recv_get_neighbors_attr_local(std::vector<int64_t> & _return);
  void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey);
  void send_get_nodes(const int32_t attrId, const std::string& attrKey);
  void recv_get_nodes(std::set<int64_t> & _return);
  void get_nodes_local(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey);
  void send_get_nodes_local(const int32_t attrId, const std::string& attrKey);
  void recv_get_nodes_local(std::set<int64_t> & _return);
  void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void send_get_nodes2(const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void recv_get_nodes2(std::set<int64_t> & _return);
  void get_nodes2_local(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void send_get_nodes2_local(const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void recv_get_nodes2_local(std::set<int64_t> & _return);
  void filter_nodes_local(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  void send_filter_nodes_local(const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  void recv_filter_nodes_local(std::vector<int64_t> & _return);
  void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype);
  void send_get_edge_attrs(const int64_t nodeId, const int64_t atype);
  void recv_get_edge_attrs(std::vector<std::string> & _return);
  void get_edge_attrs_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void send_get_edge_attrs_local(const int32_t shardId, const int64_t nodeId, const int64_t atype);
  void recv_get_edge_attrs_local(std::vector<std::string> & _return);
  void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void send_assoc_range(const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void recv_assoc_range(std::vector<ThriftAssoc> & _return);
  void assoc_range_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int32_t> & off, const std::vector<int32_t> & len);
  void send_assoc_range_batched(const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int32_t> & off, const std::vector<int32_t> & len);
  void recv_assoc_range_batched(std::vector<std::vector<ThriftAssoc> > & _return);
  void assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void send_assoc_range_local(const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void recv_assoc_range_local(std::vector<ThriftAssoc> & _return);
  int64_t assoc_count(const int64_t src, const int64_t atype);
  void send_assoc_count(const int64_t src, const int64_t atype);
  int64_t recv_assoc_count();
  void assoc_count_batched(std::vector<int64_t> & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype);
  void send_assoc_count_batched(const std::vector<int64_t> & src, const std::vector<int64_t> & atype);
  void recv_assoc_count_batched(std::vector<int64_t> & _return);
  int64_t assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype);
  void send_assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype);
  int64_t recv_assoc_count_local();
  void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void send_assoc_get(const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void recv_assoc_get(std::vector<ThriftAssoc> & _return);
  void assoc_get_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<std::set<int64_t> > & dstIdSet, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh);
  void send_assoc_get_batched(const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<std::set<int64_t> > & dstIdSet, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh);
  void recv_assoc_get_batched(std::vector<std::vector<ThriftAssoc> > & _return);
  void assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void send_assoc_get_local(const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void recv_assoc_get_local(std::vector<ThriftAssoc> & _return);
  void obj_get(std::vector<std::string> & _return, const int64_t nodeId);
  void send_obj_get(const int64_t nodeId);
  void recv_obj_get(std::vector<std::string> & _return);
  void obj_get_batched(std::vector<std::vector<std::string> > & _return, const std::vector<int64_t> & nodeId);
  void send_obj_get_batched(const std::vector<int64_t> & nodeId);
  void recv_obj_get_batched(std::vector<std::vector<std::string> > & _return);
  void obj_get_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId);
  void send_obj_get_local(const int32_t shardId, const int64_t nodeId);
  void recv_obj_get_local(std::vector<std::string> & _return);
  void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void send_assoc_time_range(const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void recv_assoc_time_range(std::vector<ThriftAssoc> & _return);
  void assoc_time_range_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh, const std::vector<int32_t> & limit);
  void send_assoc_time_range_batched(const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh, const std::vector<int32_t> & limit);
  void recv_assoc_time_range_batched(std::vector<std::vector<ThriftAssoc> > & _return);
  void assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void send_assoc_time_range_local(const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void recv_assoc_time_range_local(std::vector<ThriftAssoc> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GraphQueryAggregatorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GraphQueryAggregatorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GraphQueryAggregatorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_init_local_shards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_connect_to_aggregators(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect_from_local_shards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect_from_aggregators(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_attribute_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_atype(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_atype_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_attr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_attr_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes2_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filter_nodes_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_edge_attrs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_edge_attrs_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_range_batched(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_range_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_count_batched(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_count_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_get_batched(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_get_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obj_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obj_get_batched(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obj_get_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_time_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_time_range_batched(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_time_range_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GraphQueryAggregatorServiceProcessor(boost::shared_ptr<GraphQueryAggregatorServiceIf> iface) :
    iface_(iface) {
    processMap_["init"] = &GraphQueryAggregatorServiceProcessor::process_init;
    processMap_["init_local_shards"] = &GraphQueryAggregatorServiceProcessor::process_init_local_shards;
    processMap_["connect_to_aggregators"] = &GraphQueryAggregatorServiceProcessor::process_connect_to_aggregators;
    processMap_["shutdown"] = &GraphQueryAggregatorServiceProcessor::process_shutdown;
    processMap_["disconnect_from_local_shards"] = &GraphQueryAggregatorServiceProcessor::process_disconnect_from_local_shards;
    processMap_["disconnect_from_aggregators"] = &GraphQueryAggregatorServiceProcessor::process_disconnect_from_aggregators;
    processMap_["get_attribute_local"] = &GraphQueryAggregatorServiceProcessor::process_get_attribute_local;
    processMap_["get_neighbors"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors;
    processMap_["get_neighbors_local"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_local;
    processMap_["get_neighbors_atype"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_atype;
    processMap_["get_neighbors_atype_local"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_atype_local;
    processMap_["get_neighbors_attr"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_attr;
    processMap_["get_neighbors_attr_local"] = &GraphQueryAggregatorServiceProcessor::process_get_neighbors_attr_local;
    processMap_["get_nodes"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes;
    processMap_["get_nodes_local"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes_local;
    processMap_["get_nodes2"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes2;
    processMap_["get_nodes2_local"] = &GraphQueryAggregatorServiceProcessor::process_get_nodes2_local;
    processMap_["filter_nodes_local"] = &GraphQueryAggregatorServiceProcessor::process_filter_nodes_local;
    processMap_["get_edge_attrs"] = &GraphQueryAggregatorServiceProcessor::process_get_edge_attrs;
    processMap_["get_edge_attrs_local"] = &GraphQueryAggregatorServiceProcessor::process_get_edge_attrs_local;
    processMap_["assoc_range"] = &GraphQueryAggregatorServiceProcessor::process_assoc_range;
    processMap_["assoc_range_batched"] = &GraphQueryAggregatorServiceProcessor::process_assoc_range_batched;
    processMap_["assoc_range_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_range_local;
    processMap_["assoc_count"] = &GraphQueryAggregatorServiceProcessor::process_assoc_count;
    processMap_["assoc_count_batched"] = &GraphQueryAggregatorServiceProcessor::process_assoc_count_batched;
    processMap_["assoc_count_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_count_local;
    processMap_["assoc_get"] = &GraphQueryAggregatorServiceProcessor::process_assoc_get;
    processMap_["assoc_get_batched"] = &GraphQueryAggregatorServiceProcessor::process_assoc_get_batched;
    processMap_["assoc_get_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_get_local;
    processMap_["obj_get"] = &GraphQueryAggregatorServiceProcessor::process_obj_get;
    processMap_["obj_get_batched"] = &GraphQueryAggregatorServiceProcessor::process_obj_get_batched;
    processMap_["obj_get_local"] = &GraphQueryAggregatorServiceProcessor::process_obj_get_local;
    processMap_["assoc_time_range"] = &GraphQueryAggregatorServiceProcessor::process_assoc_time_range;
    processMap_["assoc_time_range_batched"] = &GraphQueryAggregatorServiceProcessor::process_assoc_time_range_batched;
    processMap_["assoc_time_range_local"] = &GraphQueryAggregatorServiceProcessor::process_assoc_time_range_local;
  }

  virtual ~GraphQueryAggregatorServiceProcessor() {}
};

class GraphQueryAggregatorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GraphQueryAggregatorServiceProcessorFactory(const ::boost::shared_ptr< GraphQueryAggregatorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GraphQueryAggregatorServiceIfFactory > handlerFactory_;
};

class GraphQueryAggregatorServiceMultiface : virtual public GraphQueryAggregatorServiceIf {
 public:
  GraphQueryAggregatorServiceMultiface(std::vector<boost::shared_ptr<GraphQueryAggregatorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GraphQueryAggregatorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GraphQueryAggregatorServiceIf> > ifaces_;
  GraphQueryAggregatorServiceMultiface() {}
  void add(boost::shared_ptr<GraphQueryAggregatorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t init() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init();
    }
    return ifaces_[i]->init();
  }

  int32_t init_local_shards() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init_local_shards();
    }
    return ifaces_[i]->init_local_shards();
  }

  int32_t connect_to_aggregators() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect_to_aggregators();
    }
    return ifaces_[i]->connect_to_aggregators();
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

  void disconnect_from_local_shards() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect_from_local_shards();
    }
    ifaces_[i]->disconnect_from_local_shards();
  }

  void disconnect_from_aggregators() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect_from_aggregators();
    }
    ifaces_[i]->disconnect_from_aggregators();
  }

  void get_attribute_local(std::string& _return, const int64_t nodeId, const int32_t attrId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_attribute_local(_return, nodeId, attrId);
    }
    ifaces_[i]->get_attribute_local(_return, nodeId, attrId);
    return;
  }

  void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors(_return, nodeId);
    }
    ifaces_[i]->get_neighbors(_return, nodeId);
    return;
  }

  void get_neighbors_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_local(_return, shardId, nodeId);
    }
    ifaces_[i]->get_neighbors_local(_return, shardId, nodeId);
    return;
  }

  void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_atype(_return, nodeId, atype);
    }
    ifaces_[i]->get_neighbors_atype(_return, nodeId, atype);
    return;
  }

  void get_neighbors_atype_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_atype_local(_return, shardId, nodeId, atype);
    }
    ifaces_[i]->get_neighbors_atype_local(_return, shardId, nodeId, atype);
    return;
  }

  void get_neighbors_attr(std::vector<int64_t> & _return, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_attr(_return, nodeId, attrId, attrKey);
    }
    ifaces_[i]->get_neighbors_attr(_return, nodeId, attrId, attrKey);
    return;
  }

  void get_neighbors_attr_local(std::vector<int64_t> & _return, const int32_t shardId, const int64_t nodeId, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_attr_local(_return, shardId, nodeId, attrId, attrKey);
    }
    ifaces_[i]->get_neighbors_attr_local(_return, shardId, nodeId, attrId, attrKey);
    return;
  }

  void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes(_return, attrId, attrKey);
    }
    ifaces_[i]->get_nodes(_return, attrId, attrKey);
    return;
  }

  void get_nodes_local(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes_local(_return, attrId, attrKey);
    }
    ifaces_[i]->get_nodes_local(_return, attrId, attrKey);
    return;
  }

  void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes2(_return, attrId1, attrKey1, attrId2, attrKey2);
    }
    ifaces_[i]->get_nodes2(_return, attrId1, attrKey1, attrId2, attrKey2);
    return;
  }

  void get_nodes2_local(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes2_local(_return, attrId1, attrKey1, attrId2, attrKey2);
    }
    ifaces_[i]->get_nodes2_local(_return, attrId1, attrKey1, attrId2, attrKey2);
    return;
  }

  void filter_nodes_local(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filter_nodes_local(_return, nodeIds, attrId, attrKey);
    }
    ifaces_[i]->filter_nodes_local(_return, nodeIds, attrId, attrKey);
    return;
  }

  void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_edge_attrs(_return, nodeId, atype);
    }
    ifaces_[i]->get_edge_attrs(_return, nodeId, atype);
    return;
  }

  void get_edge_attrs_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_edge_attrs_local(_return, shardId, nodeId, atype);
    }
    ifaces_[i]->get_edge_attrs_local(_return, shardId, nodeId, atype);
    return;
  }

  void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_range(_return, src, atype, off, len);
    }
    ifaces_[i]->assoc_range(_return, src, atype, off, len);
    return;
  }

  void assoc_range_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int32_t> & off, const std::vector<int32_t> & len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_range_batched(_return, src, atype, off, len);
    }
    ifaces_[i]->assoc_range_batched(_return, src, atype, off, len);
    return;
  }

  void assoc_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_range_local(_return, shardId, src, atype, off, len);
    }
    ifaces_[i]->assoc_range_local(_return, shardId, src, atype, off, len);
    return;
  }

  int64_t assoc_count(const int64_t src, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_count(src, atype);
    }
    return ifaces_[i]->assoc_count(src, atype);
  }

  void assoc_count_batched(std::vector<int64_t> & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_count_batched(_return, src, atype);
    }
    ifaces_[i]->assoc_count_batched(_return, src, atype);
    return;
  }

  int64_t assoc_count_local(const int32_t shardId, const int64_t src, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_count_local(shardId, src, atype);
    }
    return ifaces_[i]->assoc_count_local(shardId, src, atype);
  }

  void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_get(_return, src, atype, dstIdSet, tLow, tHigh);
    }
    ifaces_[i]->assoc_get(_return, src, atype, dstIdSet, tLow, tHigh);
    return;
  }

  void assoc_get_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<std::set<int64_t> > & dstIdSet, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_get_batched(_return, src, atype, dstIdSet, tLow, tHigh);
    }
    ifaces_[i]->assoc_get_batched(_return, src, atype, dstIdSet, tLow, tHigh);
    return;
  }

  void assoc_get_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_get_local(_return, shardId, src, atype, dstIdSet, tLow, tHigh);
    }
    ifaces_[i]->assoc_get_local(_return, shardId, src, atype, dstIdSet, tLow, tHigh);
    return;
  }

  void obj_get(std::vector<std::string> & _return, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obj_get(_return, nodeId);
    }
    ifaces_[i]->obj_get(_return, nodeId);
    return;
  }

  void obj_get_batched(std::vector<std::vector<std::string> > & _return, const std::vector<int64_t> & nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obj_get_batched(_return, nodeId);
    }
    ifaces_[i]->obj_get_batched(_return, nodeId);
    return;
  }

  void obj_get_local(std::vector<std::string> & _return, const int32_t shardId, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obj_get_local(_return, shardId, nodeId);
    }
    ifaces_[i]->obj_get_local(_return, shardId, nodeId);
    return;
  }

  void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_time_range(_return, src, atype, tLow, tHigh, limit);
    }
    ifaces_[i]->assoc_time_range(_return, src, atype, tLow, tHigh, limit);
    return;
  }

  void assoc_time_range_batched(std::vector<std::vector<ThriftAssoc> > & _return, const std::vector<int64_t> & src, const std::vector<int64_t> & atype, const std::vector<int64_t> & tLow, const std::vector<int64_t> & tHigh, const std::vector<int32_t> & limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_time_range_batched(_return, src, atype, tLow, tHigh, limit);
    }
    ifaces_[i]->assoc_time_range_batched(_return, src, atype, tLow, tHigh, limit);
    return;
  }

  void assoc_time_range_local(std::vector<ThriftAssoc> & _return, const int32_t shardId, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_time_range_local(_return, shardId, src, atype, tLow, tHigh, limit);
    }
    ifaces_[i]->assoc_time_range_local(_return, shardId, src, atype, tLow, tHigh, limit);
    return;
  }

};



#endif
