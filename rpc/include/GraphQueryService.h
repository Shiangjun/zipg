/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GraphQueryService_H
#define GraphQueryService_H

#include <thrift/TDispatchProcessor.h>
#include "succinct_graph_types.h"



class GraphQueryServiceIf {
 public:
  virtual ~GraphQueryServiceIf() {}
  virtual int32_t init() = 0;
  virtual void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId) = 0;
  virtual void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype) = 0;
  virtual void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) = 0;
  virtual void get_attribute_local(std::string& _return, const int64_t nodeId, const int32_t attrId) = 0;
  virtual void filter_nodes(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey) = 0;
  virtual void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype) = 0;
  virtual void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) = 0;
  virtual int64_t assoc_count(const int64_t src, const int64_t atype) = 0;
  virtual void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) = 0;
  virtual void obj_get(std::vector<std::string> & _return, const int64_t nodeId) = 0;
  virtual void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) = 0;
  virtual void get_edge_updates(std::map<int32_t, std::vector<ThriftSrcAtype> > & _return) = 0;
  virtual int32_t assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr) = 0;
};

class GraphQueryServiceIfFactory {
 public:
  typedef GraphQueryServiceIf Handler;

  virtual ~GraphQueryServiceIfFactory() {}

  virtual GraphQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GraphQueryServiceIf* /* handler */) = 0;
};

class GraphQueryServiceIfSingletonFactory : virtual public GraphQueryServiceIfFactory {
 public:
  GraphQueryServiceIfSingletonFactory(const boost::shared_ptr<GraphQueryServiceIf>& iface) : iface_(iface) {}
  virtual ~GraphQueryServiceIfSingletonFactory() {}

  virtual GraphQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GraphQueryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<GraphQueryServiceIf> iface_;
};

class GraphQueryServiceNull : virtual public GraphQueryServiceIf {
 public:
  virtual ~GraphQueryServiceNull() {}
  int32_t init() {
    int32_t _return = 0;
    return _return;
  }
  void get_neighbors(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */) {
    return;
  }
  void get_neighbors_atype(std::vector<int64_t> & /* _return */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void get_nodes(std::set<int64_t> & /* _return */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_nodes2(std::set<int64_t> & /* _return */, const int32_t /* attrId1 */, const std::string& /* attrKey1 */, const int32_t /* attrId2 */, const std::string& /* attrKey2 */) {
    return;
  }
  void get_attribute_local(std::string& /* _return */, const int64_t /* nodeId */, const int32_t /* attrId */) {
    return;
  }
  void filter_nodes(std::vector<int64_t> & /* _return */, const std::vector<int64_t> & /* nodeIds */, const int32_t /* attrId */, const std::string& /* attrKey */) {
    return;
  }
  void get_edge_attrs(std::vector<std::string> & /* _return */, const int64_t /* nodeId */, const int64_t /* atype */) {
    return;
  }
  void assoc_range(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const int32_t /* off */, const int32_t /* len */) {
    return;
  }
  int64_t assoc_count(const int64_t /* src */, const int64_t /* atype */) {
    int64_t _return = 0;
    return _return;
  }
  void assoc_get(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const std::set<int64_t> & /* dstIdSet */, const int64_t /* tLow */, const int64_t /* tHigh */) {
    return;
  }
  void obj_get(std::vector<std::string> & /* _return */, const int64_t /* nodeId */) {
    return;
  }
  void assoc_time_range(std::vector<ThriftAssoc> & /* _return */, const int64_t /* src */, const int64_t /* atype */, const int64_t /* tLow */, const int64_t /* tHigh */, const int32_t /* limit */) {
    return;
  }
  void get_edge_updates(std::map<int32_t, std::vector<ThriftSrcAtype> > & /* _return */) {
    return;
  }
  int32_t assoc_add(const int64_t /* src */, const int64_t /* atype */, const int64_t /* dst */, const int64_t /* time */, const std::string& /* attr */) {
    int32_t _return = 0;
    return _return;
  }
};


class GraphQueryService_init_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  GraphQueryService_init_args(const GraphQueryService_init_args&);
  GraphQueryService_init_args& operator=(const GraphQueryService_init_args&);
  GraphQueryService_init_args() {
  }

  virtual ~GraphQueryService_init_args() throw();

  bool operator == (const GraphQueryService_init_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryService_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_init_args& obj);
};


class GraphQueryService_init_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~GraphQueryService_init_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_init_pargs& obj);
};

typedef struct _GraphQueryService_init_result__isset {
  _GraphQueryService_init_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_init_result__isset;

class GraphQueryService_init_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  GraphQueryService_init_result(const GraphQueryService_init_result&);
  GraphQueryService_init_result& operator=(const GraphQueryService_init_result&);
  GraphQueryService_init_result() : success(0) {
  }

  virtual ~GraphQueryService_init_result() throw();
  int32_t success;

  _GraphQueryService_init_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GraphQueryService_init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_init_result& obj);
};

typedef struct _GraphQueryService_init_presult__isset {
  _GraphQueryService_init_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_init_presult__isset;

class GraphQueryService_init_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~GraphQueryService_init_presult() throw();
  int32_t* success;

  _GraphQueryService_init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_init_presult& obj);
};

typedef struct _GraphQueryService_get_neighbors_args__isset {
  _GraphQueryService_get_neighbors_args__isset() : nodeId(false) {}
  bool nodeId :1;
} _GraphQueryService_get_neighbors_args__isset;

class GraphQueryService_get_neighbors_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  GraphQueryService_get_neighbors_args(const GraphQueryService_get_neighbors_args&);
  GraphQueryService_get_neighbors_args& operator=(const GraphQueryService_get_neighbors_args&);
  GraphQueryService_get_neighbors_args() : nodeId(0) {
  }

  virtual ~GraphQueryService_get_neighbors_args() throw();
  int64_t nodeId;

  _GraphQueryService_get_neighbors_args__isset __isset;

  void __set_nodeId(const int64_t val);

  bool operator == (const GraphQueryService_get_neighbors_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_neighbors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_neighbors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_args& obj);
};


class GraphQueryService_get_neighbors_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~GraphQueryService_get_neighbors_pargs() throw();
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_pargs& obj);
};

typedef struct _GraphQueryService_get_neighbors_result__isset {
  _GraphQueryService_get_neighbors_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_neighbors_result__isset;

class GraphQueryService_get_neighbors_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  GraphQueryService_get_neighbors_result(const GraphQueryService_get_neighbors_result&);
  GraphQueryService_get_neighbors_result& operator=(const GraphQueryService_get_neighbors_result&);
  GraphQueryService_get_neighbors_result() {
  }

  virtual ~GraphQueryService_get_neighbors_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryService_get_neighbors_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryService_get_neighbors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_neighbors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_neighbors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_result& obj);
};

typedef struct _GraphQueryService_get_neighbors_presult__isset {
  _GraphQueryService_get_neighbors_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_neighbors_presult__isset;

class GraphQueryService_get_neighbors_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~GraphQueryService_get_neighbors_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryService_get_neighbors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_presult& obj);
};

typedef struct _GraphQueryService_get_neighbors_atype_args__isset {
  _GraphQueryService_get_neighbors_atype_args__isset() : nodeId(false), atype(false) {}
  bool nodeId :1;
  bool atype :1;
} _GraphQueryService_get_neighbors_atype_args__isset;

class GraphQueryService_get_neighbors_atype_args {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  GraphQueryService_get_neighbors_atype_args(const GraphQueryService_get_neighbors_atype_args&);
  GraphQueryService_get_neighbors_atype_args& operator=(const GraphQueryService_get_neighbors_atype_args&);
  GraphQueryService_get_neighbors_atype_args() : nodeId(0), atype(0) {
  }

  virtual ~GraphQueryService_get_neighbors_atype_args() throw();
  int64_t nodeId;
  int64_t atype;

  _GraphQueryService_get_neighbors_atype_args__isset __isset;

  void __set_nodeId(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryService_get_neighbors_atype_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_neighbors_atype_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_neighbors_atype_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_atype_args& obj);
};


class GraphQueryService_get_neighbors_atype_pargs {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};


  virtual ~GraphQueryService_get_neighbors_atype_pargs() throw();
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_atype_pargs& obj);
};

typedef struct _GraphQueryService_get_neighbors_atype_result__isset {
  _GraphQueryService_get_neighbors_atype_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_neighbors_atype_result__isset;

class GraphQueryService_get_neighbors_atype_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  GraphQueryService_get_neighbors_atype_result(const GraphQueryService_get_neighbors_atype_result&);
  GraphQueryService_get_neighbors_atype_result& operator=(const GraphQueryService_get_neighbors_atype_result&);
  GraphQueryService_get_neighbors_atype_result() {
  }

  virtual ~GraphQueryService_get_neighbors_atype_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryService_get_neighbors_atype_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryService_get_neighbors_atype_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_neighbors_atype_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_neighbors_atype_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_atype_result& obj);
};

typedef struct _GraphQueryService_get_neighbors_atype_presult__isset {
  _GraphQueryService_get_neighbors_atype_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_neighbors_atype_presult__isset;

class GraphQueryService_get_neighbors_atype_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~GraphQueryService_get_neighbors_atype_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryService_get_neighbors_atype_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_neighbors_atype_presult& obj);
};

typedef struct _GraphQueryService_get_nodes_args__isset {
  _GraphQueryService_get_nodes_args__isset() : attrId(false), attrKey(false) {}
  bool attrId :1;
  bool attrKey :1;
} _GraphQueryService_get_nodes_args__isset;

class GraphQueryService_get_nodes_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  GraphQueryService_get_nodes_args(const GraphQueryService_get_nodes_args&);
  GraphQueryService_get_nodes_args& operator=(const GraphQueryService_get_nodes_args&);
  GraphQueryService_get_nodes_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryService_get_nodes_args() throw();
  int32_t attrId;
  std::string attrKey;

  _GraphQueryService_get_nodes_args__isset __isset;

  void __set_attrId(const int32_t val);

  void __set_attrKey(const std::string& val);

  bool operator == (const GraphQueryService_get_nodes_args & rhs) const
  {
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_nodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_nodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes_args& obj);
};


class GraphQueryService_get_nodes_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~GraphQueryService_get_nodes_pargs() throw();
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes_pargs& obj);
};

typedef struct _GraphQueryService_get_nodes_result__isset {
  _GraphQueryService_get_nodes_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_nodes_result__isset;

class GraphQueryService_get_nodes_result {
 public:

  static const char* ascii_fingerprint; // = "AB4A0BE08AB4EC59421602D1B071A520";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x4A,0x0B,0xE0,0x8A,0xB4,0xEC,0x59,0x42,0x16,0x02,0xD1,0xB0,0x71,0xA5,0x20};

  GraphQueryService_get_nodes_result(const GraphQueryService_get_nodes_result&);
  GraphQueryService_get_nodes_result& operator=(const GraphQueryService_get_nodes_result&);
  GraphQueryService_get_nodes_result() {
  }

  virtual ~GraphQueryService_get_nodes_result() throw();
  std::set<int64_t>  success;

  _GraphQueryService_get_nodes_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const GraphQueryService_get_nodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_nodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_nodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes_result& obj);
};

typedef struct _GraphQueryService_get_nodes_presult__isset {
  _GraphQueryService_get_nodes_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_nodes_presult__isset;

class GraphQueryService_get_nodes_presult {
 public:

  static const char* ascii_fingerprint; // = "AB4A0BE08AB4EC59421602D1B071A520";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x4A,0x0B,0xE0,0x8A,0xB4,0xEC,0x59,0x42,0x16,0x02,0xD1,0xB0,0x71,0xA5,0x20};


  virtual ~GraphQueryService_get_nodes_presult() throw();
  std::set<int64_t> * success;

  _GraphQueryService_get_nodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes_presult& obj);
};

typedef struct _GraphQueryService_get_nodes2_args__isset {
  _GraphQueryService_get_nodes2_args__isset() : attrId1(false), attrKey1(false), attrId2(false), attrKey2(false) {}
  bool attrId1 :1;
  bool attrKey1 :1;
  bool attrId2 :1;
  bool attrKey2 :1;
} _GraphQueryService_get_nodes2_args__isset;

class GraphQueryService_get_nodes2_args {
 public:

  static const char* ascii_fingerprint; // = "912E4C843D022ABA65CF14B2F7FD9EA8";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x2E,0x4C,0x84,0x3D,0x02,0x2A,0xBA,0x65,0xCF,0x14,0xB2,0xF7,0xFD,0x9E,0xA8};

  GraphQueryService_get_nodes2_args(const GraphQueryService_get_nodes2_args&);
  GraphQueryService_get_nodes2_args& operator=(const GraphQueryService_get_nodes2_args&);
  GraphQueryService_get_nodes2_args() : attrId1(0), attrKey1(), attrId2(0), attrKey2() {
  }

  virtual ~GraphQueryService_get_nodes2_args() throw();
  int32_t attrId1;
  std::string attrKey1;
  int32_t attrId2;
  std::string attrKey2;

  _GraphQueryService_get_nodes2_args__isset __isset;

  void __set_attrId1(const int32_t val);

  void __set_attrKey1(const std::string& val);

  void __set_attrId2(const int32_t val);

  void __set_attrKey2(const std::string& val);

  bool operator == (const GraphQueryService_get_nodes2_args & rhs) const
  {
    if (!(attrId1 == rhs.attrId1))
      return false;
    if (!(attrKey1 == rhs.attrKey1))
      return false;
    if (!(attrId2 == rhs.attrId2))
      return false;
    if (!(attrKey2 == rhs.attrKey2))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_nodes2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_nodes2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes2_args& obj);
};


class GraphQueryService_get_nodes2_pargs {
 public:

  static const char* ascii_fingerprint; // = "912E4C843D022ABA65CF14B2F7FD9EA8";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x2E,0x4C,0x84,0x3D,0x02,0x2A,0xBA,0x65,0xCF,0x14,0xB2,0xF7,0xFD,0x9E,0xA8};


  virtual ~GraphQueryService_get_nodes2_pargs() throw();
  const int32_t* attrId1;
  const std::string* attrKey1;
  const int32_t* attrId2;
  const std::string* attrKey2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes2_pargs& obj);
};

typedef struct _GraphQueryService_get_nodes2_result__isset {
  _GraphQueryService_get_nodes2_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_nodes2_result__isset;

class GraphQueryService_get_nodes2_result {
 public:

  static const char* ascii_fingerprint; // = "AB4A0BE08AB4EC59421602D1B071A520";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x4A,0x0B,0xE0,0x8A,0xB4,0xEC,0x59,0x42,0x16,0x02,0xD1,0xB0,0x71,0xA5,0x20};

  GraphQueryService_get_nodes2_result(const GraphQueryService_get_nodes2_result&);
  GraphQueryService_get_nodes2_result& operator=(const GraphQueryService_get_nodes2_result&);
  GraphQueryService_get_nodes2_result() {
  }

  virtual ~GraphQueryService_get_nodes2_result() throw();
  std::set<int64_t>  success;

  _GraphQueryService_get_nodes2_result__isset __isset;

  void __set_success(const std::set<int64_t> & val);

  bool operator == (const GraphQueryService_get_nodes2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_nodes2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_nodes2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes2_result& obj);
};

typedef struct _GraphQueryService_get_nodes2_presult__isset {
  _GraphQueryService_get_nodes2_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_nodes2_presult__isset;

class GraphQueryService_get_nodes2_presult {
 public:

  static const char* ascii_fingerprint; // = "AB4A0BE08AB4EC59421602D1B071A520";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x4A,0x0B,0xE0,0x8A,0xB4,0xEC,0x59,0x42,0x16,0x02,0xD1,0xB0,0x71,0xA5,0x20};


  virtual ~GraphQueryService_get_nodes2_presult() throw();
  std::set<int64_t> * success;

  _GraphQueryService_get_nodes2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_nodes2_presult& obj);
};

typedef struct _GraphQueryService_get_attribute_local_args__isset {
  _GraphQueryService_get_attribute_local_args__isset() : nodeId(false), attrId(false) {}
  bool nodeId :1;
  bool attrId :1;
} _GraphQueryService_get_attribute_local_args__isset;

class GraphQueryService_get_attribute_local_args {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  GraphQueryService_get_attribute_local_args(const GraphQueryService_get_attribute_local_args&);
  GraphQueryService_get_attribute_local_args& operator=(const GraphQueryService_get_attribute_local_args&);
  GraphQueryService_get_attribute_local_args() : nodeId(0), attrId(0) {
  }

  virtual ~GraphQueryService_get_attribute_local_args() throw();
  int64_t nodeId;
  int32_t attrId;

  _GraphQueryService_get_attribute_local_args__isset __isset;

  void __set_nodeId(const int64_t val);

  void __set_attrId(const int32_t val);

  bool operator == (const GraphQueryService_get_attribute_local_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_attribute_local_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_attribute_local_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_attribute_local_args& obj);
};


class GraphQueryService_get_attribute_local_pargs {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};


  virtual ~GraphQueryService_get_attribute_local_pargs() throw();
  const int64_t* nodeId;
  const int32_t* attrId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_attribute_local_pargs& obj);
};

typedef struct _GraphQueryService_get_attribute_local_result__isset {
  _GraphQueryService_get_attribute_local_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_attribute_local_result__isset;

class GraphQueryService_get_attribute_local_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  GraphQueryService_get_attribute_local_result(const GraphQueryService_get_attribute_local_result&);
  GraphQueryService_get_attribute_local_result& operator=(const GraphQueryService_get_attribute_local_result&);
  GraphQueryService_get_attribute_local_result() : success() {
  }

  virtual ~GraphQueryService_get_attribute_local_result() throw();
  std::string success;

  _GraphQueryService_get_attribute_local_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GraphQueryService_get_attribute_local_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_attribute_local_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_attribute_local_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_attribute_local_result& obj);
};

typedef struct _GraphQueryService_get_attribute_local_presult__isset {
  _GraphQueryService_get_attribute_local_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_attribute_local_presult__isset;

class GraphQueryService_get_attribute_local_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~GraphQueryService_get_attribute_local_presult() throw();
  std::string* success;

  _GraphQueryService_get_attribute_local_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_attribute_local_presult& obj);
};

typedef struct _GraphQueryService_filter_nodes_args__isset {
  _GraphQueryService_filter_nodes_args__isset() : nodeIds(false), attrId(false), attrKey(false) {}
  bool nodeIds :1;
  bool attrId :1;
  bool attrKey :1;
} _GraphQueryService_filter_nodes_args__isset;

class GraphQueryService_filter_nodes_args {
 public:

  static const char* ascii_fingerprint; // = "780BF287BF9867DE8F03260D7C614F5A";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x0B,0xF2,0x87,0xBF,0x98,0x67,0xDE,0x8F,0x03,0x26,0x0D,0x7C,0x61,0x4F,0x5A};

  GraphQueryService_filter_nodes_args(const GraphQueryService_filter_nodes_args&);
  GraphQueryService_filter_nodes_args& operator=(const GraphQueryService_filter_nodes_args&);
  GraphQueryService_filter_nodes_args() : attrId(0), attrKey() {
  }

  virtual ~GraphQueryService_filter_nodes_args() throw();
  std::vector<int64_t>  nodeIds;
  int32_t attrId;
  std::string attrKey;

  _GraphQueryService_filter_nodes_args__isset __isset;

  void __set_nodeIds(const std::vector<int64_t> & val);

  void __set_attrId(const int32_t val);

  void __set_attrKey(const std::string& val);

  bool operator == (const GraphQueryService_filter_nodes_args & rhs) const
  {
    if (!(nodeIds == rhs.nodeIds))
      return false;
    if (!(attrId == rhs.attrId))
      return false;
    if (!(attrKey == rhs.attrKey))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_filter_nodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_filter_nodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_filter_nodes_args& obj);
};


class GraphQueryService_filter_nodes_pargs {
 public:

  static const char* ascii_fingerprint; // = "780BF287BF9867DE8F03260D7C614F5A";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x0B,0xF2,0x87,0xBF,0x98,0x67,0xDE,0x8F,0x03,0x26,0x0D,0x7C,0x61,0x4F,0x5A};


  virtual ~GraphQueryService_filter_nodes_pargs() throw();
  const std::vector<int64_t> * nodeIds;
  const int32_t* attrId;
  const std::string* attrKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_filter_nodes_pargs& obj);
};

typedef struct _GraphQueryService_filter_nodes_result__isset {
  _GraphQueryService_filter_nodes_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_filter_nodes_result__isset;

class GraphQueryService_filter_nodes_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  GraphQueryService_filter_nodes_result(const GraphQueryService_filter_nodes_result&);
  GraphQueryService_filter_nodes_result& operator=(const GraphQueryService_filter_nodes_result&);
  GraphQueryService_filter_nodes_result() {
  }

  virtual ~GraphQueryService_filter_nodes_result() throw();
  std::vector<int64_t>  success;

  _GraphQueryService_filter_nodes_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const GraphQueryService_filter_nodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_filter_nodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_filter_nodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_filter_nodes_result& obj);
};

typedef struct _GraphQueryService_filter_nodes_presult__isset {
  _GraphQueryService_filter_nodes_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_filter_nodes_presult__isset;

class GraphQueryService_filter_nodes_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~GraphQueryService_filter_nodes_presult() throw();
  std::vector<int64_t> * success;

  _GraphQueryService_filter_nodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_filter_nodes_presult& obj);
};

typedef struct _GraphQueryService_get_edge_attrs_args__isset {
  _GraphQueryService_get_edge_attrs_args__isset() : nodeId(false), atype(false) {}
  bool nodeId :1;
  bool atype :1;
} _GraphQueryService_get_edge_attrs_args__isset;

class GraphQueryService_get_edge_attrs_args {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  GraphQueryService_get_edge_attrs_args(const GraphQueryService_get_edge_attrs_args&);
  GraphQueryService_get_edge_attrs_args& operator=(const GraphQueryService_get_edge_attrs_args&);
  GraphQueryService_get_edge_attrs_args() : nodeId(0), atype(0) {
  }

  virtual ~GraphQueryService_get_edge_attrs_args() throw();
  int64_t nodeId;
  int64_t atype;

  _GraphQueryService_get_edge_attrs_args__isset __isset;

  void __set_nodeId(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryService_get_edge_attrs_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_edge_attrs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_edge_attrs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_attrs_args& obj);
};


class GraphQueryService_get_edge_attrs_pargs {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};


  virtual ~GraphQueryService_get_edge_attrs_pargs() throw();
  const int64_t* nodeId;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_attrs_pargs& obj);
};

typedef struct _GraphQueryService_get_edge_attrs_result__isset {
  _GraphQueryService_get_edge_attrs_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_edge_attrs_result__isset;

class GraphQueryService_get_edge_attrs_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  GraphQueryService_get_edge_attrs_result(const GraphQueryService_get_edge_attrs_result&);
  GraphQueryService_get_edge_attrs_result& operator=(const GraphQueryService_get_edge_attrs_result&);
  GraphQueryService_get_edge_attrs_result() {
  }

  virtual ~GraphQueryService_get_edge_attrs_result() throw();
  std::vector<std::string>  success;

  _GraphQueryService_get_edge_attrs_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const GraphQueryService_get_edge_attrs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_edge_attrs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_edge_attrs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_attrs_result& obj);
};

typedef struct _GraphQueryService_get_edge_attrs_presult__isset {
  _GraphQueryService_get_edge_attrs_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_edge_attrs_presult__isset;

class GraphQueryService_get_edge_attrs_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~GraphQueryService_get_edge_attrs_presult() throw();
  std::vector<std::string> * success;

  _GraphQueryService_get_edge_attrs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_attrs_presult& obj);
};

typedef struct _GraphQueryService_assoc_range_args__isset {
  _GraphQueryService_assoc_range_args__isset() : src(false), atype(false), off(false), len(false) {}
  bool src :1;
  bool atype :1;
  bool off :1;
  bool len :1;
} _GraphQueryService_assoc_range_args__isset;

class GraphQueryService_assoc_range_args {
 public:

  static const char* ascii_fingerprint; // = "A10608A5ACC0B1AFB80522F482BC57A9";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x06,0x08,0xA5,0xAC,0xC0,0xB1,0xAF,0xB8,0x05,0x22,0xF4,0x82,0xBC,0x57,0xA9};

  GraphQueryService_assoc_range_args(const GraphQueryService_assoc_range_args&);
  GraphQueryService_assoc_range_args& operator=(const GraphQueryService_assoc_range_args&);
  GraphQueryService_assoc_range_args() : src(0), atype(0), off(0), len(0) {
  }

  virtual ~GraphQueryService_assoc_range_args() throw();
  int64_t src;
  int64_t atype;
  int32_t off;
  int32_t len;

  _GraphQueryService_assoc_range_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_off(const int32_t val);

  void __set_len(const int32_t val);

  bool operator == (const GraphQueryService_assoc_range_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_range_args& obj);
};


class GraphQueryService_assoc_range_pargs {
 public:

  static const char* ascii_fingerprint; // = "A10608A5ACC0B1AFB80522F482BC57A9";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x06,0x08,0xA5,0xAC,0xC0,0xB1,0xAF,0xB8,0x05,0x22,0xF4,0x82,0xBC,0x57,0xA9};


  virtual ~GraphQueryService_assoc_range_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const int32_t* off;
  const int32_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_range_pargs& obj);
};

typedef struct _GraphQueryService_assoc_range_result__isset {
  _GraphQueryService_assoc_range_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_range_result__isset;

class GraphQueryService_assoc_range_result {
 public:

  static const char* ascii_fingerprint; // = "F49D40863557E8DC6BE84E1723E98778";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x9D,0x40,0x86,0x35,0x57,0xE8,0xDC,0x6B,0xE8,0x4E,0x17,0x23,0xE9,0x87,0x78};

  GraphQueryService_assoc_range_result(const GraphQueryService_assoc_range_result&);
  GraphQueryService_assoc_range_result& operator=(const GraphQueryService_assoc_range_result&);
  GraphQueryService_assoc_range_result() {
  }

  virtual ~GraphQueryService_assoc_range_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryService_assoc_range_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryService_assoc_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_range_result& obj);
};

typedef struct _GraphQueryService_assoc_range_presult__isset {
  _GraphQueryService_assoc_range_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_range_presult__isset;

class GraphQueryService_assoc_range_presult {
 public:

  static const char* ascii_fingerprint; // = "F49D40863557E8DC6BE84E1723E98778";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x9D,0x40,0x86,0x35,0x57,0xE8,0xDC,0x6B,0xE8,0x4E,0x17,0x23,0xE9,0x87,0x78};


  virtual ~GraphQueryService_assoc_range_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryService_assoc_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_range_presult& obj);
};

typedef struct _GraphQueryService_assoc_count_args__isset {
  _GraphQueryService_assoc_count_args__isset() : src(false), atype(false) {}
  bool src :1;
  bool atype :1;
} _GraphQueryService_assoc_count_args__isset;

class GraphQueryService_assoc_count_args {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  GraphQueryService_assoc_count_args(const GraphQueryService_assoc_count_args&);
  GraphQueryService_assoc_count_args& operator=(const GraphQueryService_assoc_count_args&);
  GraphQueryService_assoc_count_args() : src(0), atype(0) {
  }

  virtual ~GraphQueryService_assoc_count_args() throw();
  int64_t src;
  int64_t atype;

  _GraphQueryService_assoc_count_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const GraphQueryService_assoc_count_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_count_args& obj);
};


class GraphQueryService_assoc_count_pargs {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};


  virtual ~GraphQueryService_assoc_count_pargs() throw();
  const int64_t* src;
  const int64_t* atype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_count_pargs& obj);
};

typedef struct _GraphQueryService_assoc_count_result__isset {
  _GraphQueryService_assoc_count_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_count_result__isset;

class GraphQueryService_assoc_count_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  GraphQueryService_assoc_count_result(const GraphQueryService_assoc_count_result&);
  GraphQueryService_assoc_count_result& operator=(const GraphQueryService_assoc_count_result&);
  GraphQueryService_assoc_count_result() : success(0) {
  }

  virtual ~GraphQueryService_assoc_count_result() throw();
  int64_t success;

  _GraphQueryService_assoc_count_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphQueryService_assoc_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_count_result& obj);
};

typedef struct _GraphQueryService_assoc_count_presult__isset {
  _GraphQueryService_assoc_count_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_count_presult__isset;

class GraphQueryService_assoc_count_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~GraphQueryService_assoc_count_presult() throw();
  int64_t* success;

  _GraphQueryService_assoc_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_count_presult& obj);
};

typedef struct _GraphQueryService_assoc_get_args__isset {
  _GraphQueryService_assoc_get_args__isset() : src(false), atype(false), dstIdSet(false), tLow(false), tHigh(false) {}
  bool src :1;
  bool atype :1;
  bool dstIdSet :1;
  bool tLow :1;
  bool tHigh :1;
} _GraphQueryService_assoc_get_args__isset;

class GraphQueryService_assoc_get_args {
 public:

  static const char* ascii_fingerprint; // = "C368616714BE03FEDF14CACADB81C19F";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x68,0x61,0x67,0x14,0xBE,0x03,0xFE,0xDF,0x14,0xCA,0xCA,0xDB,0x81,0xC1,0x9F};

  GraphQueryService_assoc_get_args(const GraphQueryService_assoc_get_args&);
  GraphQueryService_assoc_get_args& operator=(const GraphQueryService_assoc_get_args&);
  GraphQueryService_assoc_get_args() : src(0), atype(0), tLow(0), tHigh(0) {
  }

  virtual ~GraphQueryService_assoc_get_args() throw();
  int64_t src;
  int64_t atype;
  std::set<int64_t>  dstIdSet;
  int64_t tLow;
  int64_t tHigh;

  _GraphQueryService_assoc_get_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_dstIdSet(const std::set<int64_t> & val);

  void __set_tLow(const int64_t val);

  void __set_tHigh(const int64_t val);

  bool operator == (const GraphQueryService_assoc_get_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dstIdSet == rhs.dstIdSet))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_get_args& obj);
};


class GraphQueryService_assoc_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "C368616714BE03FEDF14CACADB81C19F";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x68,0x61,0x67,0x14,0xBE,0x03,0xFE,0xDF,0x14,0xCA,0xCA,0xDB,0x81,0xC1,0x9F};


  virtual ~GraphQueryService_assoc_get_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const std::set<int64_t> * dstIdSet;
  const int64_t* tLow;
  const int64_t* tHigh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_get_pargs& obj);
};

typedef struct _GraphQueryService_assoc_get_result__isset {
  _GraphQueryService_assoc_get_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_get_result__isset;

class GraphQueryService_assoc_get_result {
 public:

  static const char* ascii_fingerprint; // = "F49D40863557E8DC6BE84E1723E98778";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x9D,0x40,0x86,0x35,0x57,0xE8,0xDC,0x6B,0xE8,0x4E,0x17,0x23,0xE9,0x87,0x78};

  GraphQueryService_assoc_get_result(const GraphQueryService_assoc_get_result&);
  GraphQueryService_assoc_get_result& operator=(const GraphQueryService_assoc_get_result&);
  GraphQueryService_assoc_get_result() {
  }

  virtual ~GraphQueryService_assoc_get_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryService_assoc_get_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryService_assoc_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_get_result& obj);
};

typedef struct _GraphQueryService_assoc_get_presult__isset {
  _GraphQueryService_assoc_get_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_get_presult__isset;

class GraphQueryService_assoc_get_presult {
 public:

  static const char* ascii_fingerprint; // = "F49D40863557E8DC6BE84E1723E98778";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x9D,0x40,0x86,0x35,0x57,0xE8,0xDC,0x6B,0xE8,0x4E,0x17,0x23,0xE9,0x87,0x78};


  virtual ~GraphQueryService_assoc_get_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryService_assoc_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_get_presult& obj);
};

typedef struct _GraphQueryService_obj_get_args__isset {
  _GraphQueryService_obj_get_args__isset() : nodeId(false) {}
  bool nodeId :1;
} _GraphQueryService_obj_get_args__isset;

class GraphQueryService_obj_get_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  GraphQueryService_obj_get_args(const GraphQueryService_obj_get_args&);
  GraphQueryService_obj_get_args& operator=(const GraphQueryService_obj_get_args&);
  GraphQueryService_obj_get_args() : nodeId(0) {
  }

  virtual ~GraphQueryService_obj_get_args() throw();
  int64_t nodeId;

  _GraphQueryService_obj_get_args__isset __isset;

  void __set_nodeId(const int64_t val);

  bool operator == (const GraphQueryService_obj_get_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_obj_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_obj_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_obj_get_args& obj);
};


class GraphQueryService_obj_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~GraphQueryService_obj_get_pargs() throw();
  const int64_t* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_obj_get_pargs& obj);
};

typedef struct _GraphQueryService_obj_get_result__isset {
  _GraphQueryService_obj_get_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_obj_get_result__isset;

class GraphQueryService_obj_get_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  GraphQueryService_obj_get_result(const GraphQueryService_obj_get_result&);
  GraphQueryService_obj_get_result& operator=(const GraphQueryService_obj_get_result&);
  GraphQueryService_obj_get_result() {
  }

  virtual ~GraphQueryService_obj_get_result() throw();
  std::vector<std::string>  success;

  _GraphQueryService_obj_get_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const GraphQueryService_obj_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_obj_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_obj_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_obj_get_result& obj);
};

typedef struct _GraphQueryService_obj_get_presult__isset {
  _GraphQueryService_obj_get_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_obj_get_presult__isset;

class GraphQueryService_obj_get_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~GraphQueryService_obj_get_presult() throw();
  std::vector<std::string> * success;

  _GraphQueryService_obj_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_obj_get_presult& obj);
};

typedef struct _GraphQueryService_assoc_time_range_args__isset {
  _GraphQueryService_assoc_time_range_args__isset() : src(false), atype(false), tLow(false), tHigh(false), limit(false) {}
  bool src :1;
  bool atype :1;
  bool tLow :1;
  bool tHigh :1;
  bool limit :1;
} _GraphQueryService_assoc_time_range_args__isset;

class GraphQueryService_assoc_time_range_args {
 public:

  static const char* ascii_fingerprint; // = "DFCBF4BFE74F9EF1C52E7B1D190B1B9C";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xCB,0xF4,0xBF,0xE7,0x4F,0x9E,0xF1,0xC5,0x2E,0x7B,0x1D,0x19,0x0B,0x1B,0x9C};

  GraphQueryService_assoc_time_range_args(const GraphQueryService_assoc_time_range_args&);
  GraphQueryService_assoc_time_range_args& operator=(const GraphQueryService_assoc_time_range_args&);
  GraphQueryService_assoc_time_range_args() : src(0), atype(0), tLow(0), tHigh(0), limit(0) {
  }

  virtual ~GraphQueryService_assoc_time_range_args() throw();
  int64_t src;
  int64_t atype;
  int64_t tLow;
  int64_t tHigh;
  int32_t limit;

  _GraphQueryService_assoc_time_range_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_tLow(const int64_t val);

  void __set_tHigh(const int64_t val);

  void __set_limit(const int32_t val);

  bool operator == (const GraphQueryService_assoc_time_range_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(tLow == rhs.tLow))
      return false;
    if (!(tHigh == rhs.tHigh))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_time_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_time_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_time_range_args& obj);
};


class GraphQueryService_assoc_time_range_pargs {
 public:

  static const char* ascii_fingerprint; // = "DFCBF4BFE74F9EF1C52E7B1D190B1B9C";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xCB,0xF4,0xBF,0xE7,0x4F,0x9E,0xF1,0xC5,0x2E,0x7B,0x1D,0x19,0x0B,0x1B,0x9C};


  virtual ~GraphQueryService_assoc_time_range_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const int64_t* tLow;
  const int64_t* tHigh;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_time_range_pargs& obj);
};

typedef struct _GraphQueryService_assoc_time_range_result__isset {
  _GraphQueryService_assoc_time_range_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_time_range_result__isset;

class GraphQueryService_assoc_time_range_result {
 public:

  static const char* ascii_fingerprint; // = "F49D40863557E8DC6BE84E1723E98778";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x9D,0x40,0x86,0x35,0x57,0xE8,0xDC,0x6B,0xE8,0x4E,0x17,0x23,0xE9,0x87,0x78};

  GraphQueryService_assoc_time_range_result(const GraphQueryService_assoc_time_range_result&);
  GraphQueryService_assoc_time_range_result& operator=(const GraphQueryService_assoc_time_range_result&);
  GraphQueryService_assoc_time_range_result() {
  }

  virtual ~GraphQueryService_assoc_time_range_result() throw();
  std::vector<ThriftAssoc>  success;

  _GraphQueryService_assoc_time_range_result__isset __isset;

  void __set_success(const std::vector<ThriftAssoc> & val);

  bool operator == (const GraphQueryService_assoc_time_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_time_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_time_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_time_range_result& obj);
};

typedef struct _GraphQueryService_assoc_time_range_presult__isset {
  _GraphQueryService_assoc_time_range_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_time_range_presult__isset;

class GraphQueryService_assoc_time_range_presult {
 public:

  static const char* ascii_fingerprint; // = "F49D40863557E8DC6BE84E1723E98778";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x9D,0x40,0x86,0x35,0x57,0xE8,0xDC,0x6B,0xE8,0x4E,0x17,0x23,0xE9,0x87,0x78};


  virtual ~GraphQueryService_assoc_time_range_presult() throw();
  std::vector<ThriftAssoc> * success;

  _GraphQueryService_assoc_time_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_time_range_presult& obj);
};


class GraphQueryService_get_edge_updates_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  GraphQueryService_get_edge_updates_args(const GraphQueryService_get_edge_updates_args&);
  GraphQueryService_get_edge_updates_args& operator=(const GraphQueryService_get_edge_updates_args&);
  GraphQueryService_get_edge_updates_args() {
  }

  virtual ~GraphQueryService_get_edge_updates_args() throw();

  bool operator == (const GraphQueryService_get_edge_updates_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GraphQueryService_get_edge_updates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_edge_updates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_updates_args& obj);
};


class GraphQueryService_get_edge_updates_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~GraphQueryService_get_edge_updates_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_updates_pargs& obj);
};

typedef struct _GraphQueryService_get_edge_updates_result__isset {
  _GraphQueryService_get_edge_updates_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_edge_updates_result__isset;

class GraphQueryService_get_edge_updates_result {
 public:

  static const char* ascii_fingerprint; // = "63D46F61AFEA0875EDFD87F045519608";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0xD4,0x6F,0x61,0xAF,0xEA,0x08,0x75,0xED,0xFD,0x87,0xF0,0x45,0x51,0x96,0x08};

  GraphQueryService_get_edge_updates_result(const GraphQueryService_get_edge_updates_result&);
  GraphQueryService_get_edge_updates_result& operator=(const GraphQueryService_get_edge_updates_result&);
  GraphQueryService_get_edge_updates_result() {
  }

  virtual ~GraphQueryService_get_edge_updates_result() throw();
  std::map<int32_t, std::vector<ThriftSrcAtype> >  success;

  _GraphQueryService_get_edge_updates_result__isset __isset;

  void __set_success(const std::map<int32_t, std::vector<ThriftSrcAtype> > & val);

  bool operator == (const GraphQueryService_get_edge_updates_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_get_edge_updates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_get_edge_updates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_updates_result& obj);
};

typedef struct _GraphQueryService_get_edge_updates_presult__isset {
  _GraphQueryService_get_edge_updates_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_get_edge_updates_presult__isset;

class GraphQueryService_get_edge_updates_presult {
 public:

  static const char* ascii_fingerprint; // = "63D46F61AFEA0875EDFD87F045519608";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0xD4,0x6F,0x61,0xAF,0xEA,0x08,0x75,0xED,0xFD,0x87,0xF0,0x45,0x51,0x96,0x08};


  virtual ~GraphQueryService_get_edge_updates_presult() throw();
  std::map<int32_t, std::vector<ThriftSrcAtype> > * success;

  _GraphQueryService_get_edge_updates_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_get_edge_updates_presult& obj);
};

typedef struct _GraphQueryService_assoc_add_args__isset {
  _GraphQueryService_assoc_add_args__isset() : src(false), atype(false), dst(false), time(false), attr(false) {}
  bool src :1;
  bool atype :1;
  bool dst :1;
  bool time :1;
  bool attr :1;
} _GraphQueryService_assoc_add_args__isset;

class GraphQueryService_assoc_add_args {
 public:

  static const char* ascii_fingerprint; // = "3CB6A5EF5FFCBCD18AE2151BFD483B57";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xB6,0xA5,0xEF,0x5F,0xFC,0xBC,0xD1,0x8A,0xE2,0x15,0x1B,0xFD,0x48,0x3B,0x57};

  GraphQueryService_assoc_add_args(const GraphQueryService_assoc_add_args&);
  GraphQueryService_assoc_add_args& operator=(const GraphQueryService_assoc_add_args&);
  GraphQueryService_assoc_add_args() : src(0), atype(0), dst(0), time(0), attr() {
  }

  virtual ~GraphQueryService_assoc_add_args() throw();
  int64_t src;
  int64_t atype;
  int64_t dst;
  int64_t time;
  std::string attr;

  _GraphQueryService_assoc_add_args__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_dst(const int64_t val);

  void __set_time(const int64_t val);

  void __set_attr(const std::string& val);

  bool operator == (const GraphQueryService_assoc_add_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(dst == rhs.dst))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_add_args& obj);
};


class GraphQueryService_assoc_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "3CB6A5EF5FFCBCD18AE2151BFD483B57";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xB6,0xA5,0xEF,0x5F,0xFC,0xBC,0xD1,0x8A,0xE2,0x15,0x1B,0xFD,0x48,0x3B,0x57};


  virtual ~GraphQueryService_assoc_add_pargs() throw();
  const int64_t* src;
  const int64_t* atype;
  const int64_t* dst;
  const int64_t* time;
  const std::string* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_add_pargs& obj);
};

typedef struct _GraphQueryService_assoc_add_result__isset {
  _GraphQueryService_assoc_add_result__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_add_result__isset;

class GraphQueryService_assoc_add_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  GraphQueryService_assoc_add_result(const GraphQueryService_assoc_add_result&);
  GraphQueryService_assoc_add_result& operator=(const GraphQueryService_assoc_add_result&);
  GraphQueryService_assoc_add_result() : success(0) {
  }

  virtual ~GraphQueryService_assoc_add_result() throw();
  int32_t success;

  _GraphQueryService_assoc_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GraphQueryService_assoc_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphQueryService_assoc_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphQueryService_assoc_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_add_result& obj);
};

typedef struct _GraphQueryService_assoc_add_presult__isset {
  _GraphQueryService_assoc_add_presult__isset() : success(false) {}
  bool success :1;
} _GraphQueryService_assoc_add_presult__isset;

class GraphQueryService_assoc_add_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~GraphQueryService_assoc_add_presult() throw();
  int32_t* success;

  _GraphQueryService_assoc_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const GraphQueryService_assoc_add_presult& obj);
};

class GraphQueryServiceClient : virtual public GraphQueryServiceIf {
 public:
  GraphQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t init();
  void send_init();
  int32_t recv_init();
  void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId);
  void send_get_neighbors(const int64_t nodeId);
  void recv_get_neighbors(std::vector<int64_t> & _return);
  void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype);
  void send_get_neighbors_atype(const int64_t nodeId, const int64_t atype);
  void recv_get_neighbors_atype(std::vector<int64_t> & _return);
  void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey);
  void send_get_nodes(const int32_t attrId, const std::string& attrKey);
  void recv_get_nodes(std::set<int64_t> & _return);
  void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void send_get_nodes2(const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2);
  void recv_get_nodes2(std::set<int64_t> & _return);
  void get_attribute_local(std::string& _return, const int64_t nodeId, const int32_t attrId);
  void send_get_attribute_local(const int64_t nodeId, const int32_t attrId);
  void recv_get_attribute_local(std::string& _return);
  void filter_nodes(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  void send_filter_nodes(const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey);
  void recv_filter_nodes(std::vector<int64_t> & _return);
  void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype);
  void send_get_edge_attrs(const int64_t nodeId, const int64_t atype);
  void recv_get_edge_attrs(std::vector<std::string> & _return);
  void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void send_assoc_range(const int64_t src, const int64_t atype, const int32_t off, const int32_t len);
  void recv_assoc_range(std::vector<ThriftAssoc> & _return);
  int64_t assoc_count(const int64_t src, const int64_t atype);
  void send_assoc_count(const int64_t src, const int64_t atype);
  int64_t recv_assoc_count();
  void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void send_assoc_get(const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh);
  void recv_assoc_get(std::vector<ThriftAssoc> & _return);
  void obj_get(std::vector<std::string> & _return, const int64_t nodeId);
  void send_obj_get(const int64_t nodeId);
  void recv_obj_get(std::vector<std::string> & _return);
  void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void send_assoc_time_range(const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit);
  void recv_assoc_time_range(std::vector<ThriftAssoc> & _return);
  void get_edge_updates(std::map<int32_t, std::vector<ThriftSrcAtype> > & _return);
  void send_get_edge_updates();
  void recv_get_edge_updates(std::map<int32_t, std::vector<ThriftSrcAtype> > & _return);
  int32_t assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr);
  void send_assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr);
  int32_t recv_assoc_add();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GraphQueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GraphQueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GraphQueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_neighbors_atype(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nodes2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_attribute_local(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filter_nodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_edge_attrs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_obj_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_time_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_edge_updates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assoc_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GraphQueryServiceProcessor(boost::shared_ptr<GraphQueryServiceIf> iface) :
    iface_(iface) {
    processMap_["init"] = &GraphQueryServiceProcessor::process_init;
    processMap_["get_neighbors"] = &GraphQueryServiceProcessor::process_get_neighbors;
    processMap_["get_neighbors_atype"] = &GraphQueryServiceProcessor::process_get_neighbors_atype;
    processMap_["get_nodes"] = &GraphQueryServiceProcessor::process_get_nodes;
    processMap_["get_nodes2"] = &GraphQueryServiceProcessor::process_get_nodes2;
    processMap_["get_attribute_local"] = &GraphQueryServiceProcessor::process_get_attribute_local;
    processMap_["filter_nodes"] = &GraphQueryServiceProcessor::process_filter_nodes;
    processMap_["get_edge_attrs"] = &GraphQueryServiceProcessor::process_get_edge_attrs;
    processMap_["assoc_range"] = &GraphQueryServiceProcessor::process_assoc_range;
    processMap_["assoc_count"] = &GraphQueryServiceProcessor::process_assoc_count;
    processMap_["assoc_get"] = &GraphQueryServiceProcessor::process_assoc_get;
    processMap_["obj_get"] = &GraphQueryServiceProcessor::process_obj_get;
    processMap_["assoc_time_range"] = &GraphQueryServiceProcessor::process_assoc_time_range;
    processMap_["get_edge_updates"] = &GraphQueryServiceProcessor::process_get_edge_updates;
    processMap_["assoc_add"] = &GraphQueryServiceProcessor::process_assoc_add;
  }

  virtual ~GraphQueryServiceProcessor() {}
};

class GraphQueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GraphQueryServiceProcessorFactory(const ::boost::shared_ptr< GraphQueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GraphQueryServiceIfFactory > handlerFactory_;
};

class GraphQueryServiceMultiface : virtual public GraphQueryServiceIf {
 public:
  GraphQueryServiceMultiface(std::vector<boost::shared_ptr<GraphQueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GraphQueryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GraphQueryServiceIf> > ifaces_;
  GraphQueryServiceMultiface() {}
  void add(boost::shared_ptr<GraphQueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t init() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init();
    }
    return ifaces_[i]->init();
  }

  void get_neighbors(std::vector<int64_t> & _return, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors(_return, nodeId);
    }
    ifaces_[i]->get_neighbors(_return, nodeId);
    return;
  }

  void get_neighbors_atype(std::vector<int64_t> & _return, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_neighbors_atype(_return, nodeId, atype);
    }
    ifaces_[i]->get_neighbors_atype(_return, nodeId, atype);
    return;
  }

  void get_nodes(std::set<int64_t> & _return, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes(_return, attrId, attrKey);
    }
    ifaces_[i]->get_nodes(_return, attrId, attrKey);
    return;
  }

  void get_nodes2(std::set<int64_t> & _return, const int32_t attrId1, const std::string& attrKey1, const int32_t attrId2, const std::string& attrKey2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nodes2(_return, attrId1, attrKey1, attrId2, attrKey2);
    }
    ifaces_[i]->get_nodes2(_return, attrId1, attrKey1, attrId2, attrKey2);
    return;
  }

  void get_attribute_local(std::string& _return, const int64_t nodeId, const int32_t attrId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_attribute_local(_return, nodeId, attrId);
    }
    ifaces_[i]->get_attribute_local(_return, nodeId, attrId);
    return;
  }

  void filter_nodes(std::vector<int64_t> & _return, const std::vector<int64_t> & nodeIds, const int32_t attrId, const std::string& attrKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filter_nodes(_return, nodeIds, attrId, attrKey);
    }
    ifaces_[i]->filter_nodes(_return, nodeIds, attrId, attrKey);
    return;
  }

  void get_edge_attrs(std::vector<std::string> & _return, const int64_t nodeId, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_edge_attrs(_return, nodeId, atype);
    }
    ifaces_[i]->get_edge_attrs(_return, nodeId, atype);
    return;
  }

  void assoc_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int32_t off, const int32_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_range(_return, src, atype, off, len);
    }
    ifaces_[i]->assoc_range(_return, src, atype, off, len);
    return;
  }

  int64_t assoc_count(const int64_t src, const int64_t atype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_count(src, atype);
    }
    return ifaces_[i]->assoc_count(src, atype);
  }

  void assoc_get(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const std::set<int64_t> & dstIdSet, const int64_t tLow, const int64_t tHigh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_get(_return, src, atype, dstIdSet, tLow, tHigh);
    }
    ifaces_[i]->assoc_get(_return, src, atype, dstIdSet, tLow, tHigh);
    return;
  }

  void obj_get(std::vector<std::string> & _return, const int64_t nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->obj_get(_return, nodeId);
    }
    ifaces_[i]->obj_get(_return, nodeId);
    return;
  }

  void assoc_time_range(std::vector<ThriftAssoc> & _return, const int64_t src, const int64_t atype, const int64_t tLow, const int64_t tHigh, const int32_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_time_range(_return, src, atype, tLow, tHigh, limit);
    }
    ifaces_[i]->assoc_time_range(_return, src, atype, tLow, tHigh, limit);
    return;
  }

  void get_edge_updates(std::map<int32_t, std::vector<ThriftSrcAtype> > & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_edge_updates(_return);
    }
    ifaces_[i]->get_edge_updates(_return);
    return;
  }

  int32_t assoc_add(const int64_t src, const int64_t atype, const int64_t dst, const int64_t time, const std::string& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assoc_add(src, atype, dst, time, attr);
    }
    return ifaces_[i]->assoc_add(src, atype, dst, time, attr);
  }

};



#endif
