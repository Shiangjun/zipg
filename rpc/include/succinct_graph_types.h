/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef succinct_graph_TYPES_H
#define succinct_graph_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class ThriftAssoc;

class ThriftEdgeUpdatePtr;

class ThriftSrcAtype;

typedef struct _ThriftAssoc__isset {
  _ThriftAssoc__isset() : srcId(false), dstId(false), atype(false), timestamp(false), attr(false) {}
  bool srcId :1;
  bool dstId :1;
  bool atype :1;
  bool timestamp :1;
  bool attr :1;
} _ThriftAssoc__isset;

class ThriftAssoc : public virtual ::apache::thrift::TBase {
 public:

  ThriftAssoc(const ThriftAssoc&);
  ThriftAssoc& operator=(const ThriftAssoc&);
  ThriftAssoc() : srcId(0), dstId(0), atype(0), timestamp(0), attr() {
  }

  virtual ~ThriftAssoc() throw();
  int64_t srcId;
  int64_t dstId;
  int64_t atype;
  int64_t timestamp;
  std::string attr;

  _ThriftAssoc__isset __isset;

  void __set_srcId(const int64_t val);

  void __set_dstId(const int64_t val);

  void __set_atype(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_attr(const std::string& val);

  bool operator == (const ThriftAssoc & rhs) const
  {
    if (!(srcId == rhs.srcId))
      return false;
    if (!(dstId == rhs.dstId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const ThriftAssoc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftAssoc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftAssoc &a, ThriftAssoc &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftAssoc& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ThriftEdgeUpdatePtr__isset {
  _ThriftEdgeUpdatePtr__isset() : shardId(false), offset(false) {}
  bool shardId :1;
  bool offset :1;
} _ThriftEdgeUpdatePtr__isset;

class ThriftEdgeUpdatePtr : public virtual ::apache::thrift::TBase {
 public:

  ThriftEdgeUpdatePtr(const ThriftEdgeUpdatePtr&);
  ThriftEdgeUpdatePtr& operator=(const ThriftEdgeUpdatePtr&);
  ThriftEdgeUpdatePtr() : shardId(0), offset(0) {
  }

  virtual ~ThriftEdgeUpdatePtr() throw();
  int64_t shardId;
  int64_t offset;

  _ThriftEdgeUpdatePtr__isset __isset;

  void __set_shardId(const int64_t val);

  void __set_offset(const int64_t val);

  bool operator == (const ThriftEdgeUpdatePtr & rhs) const
  {
    if (!(shardId == rhs.shardId))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const ThriftEdgeUpdatePtr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftEdgeUpdatePtr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftEdgeUpdatePtr &a, ThriftEdgeUpdatePtr &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftEdgeUpdatePtr& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ThriftSrcAtype__isset {
  _ThriftSrcAtype__isset() : src(false), atype(false) {}
  bool src :1;
  bool atype :1;
} _ThriftSrcAtype__isset;

class ThriftSrcAtype : public virtual ::apache::thrift::TBase {
 public:

  ThriftSrcAtype(const ThriftSrcAtype&);
  ThriftSrcAtype& operator=(const ThriftSrcAtype&);
  ThriftSrcAtype() : src(0), atype(0) {
  }

  virtual ~ThriftSrcAtype() throw();
  int64_t src;
  int64_t atype;

  _ThriftSrcAtype__isset __isset;

  void __set_src(const int64_t val);

  void __set_atype(const int64_t val);

  bool operator == (const ThriftSrcAtype & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(atype == rhs.atype))
      return false;
    return true;
  }
  bool operator != (const ThriftSrcAtype &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSrcAtype & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftSrcAtype &a, ThriftSrcAtype &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftSrcAtype& obj)
{
  obj.printTo(out);
  return out;
}



#endif
