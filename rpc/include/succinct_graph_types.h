/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef succinct_graph_TYPES_H
#define succinct_graph_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _ThriftAssoc__isset {
  _ThriftAssoc__isset() : srcId(false), dstId(false), atype(false), timestamp(false), attr(false) {}
  bool srcId;
  bool dstId;
  bool atype;
  bool timestamp;
  bool attr;
} _ThriftAssoc__isset;

class ThriftAssoc {
 public:

  static const char* ascii_fingerprint; // = "3CB6A5EF5FFCBCD18AE2151BFD483B57";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xB6,0xA5,0xEF,0x5F,0xFC,0xBC,0xD1,0x8A,0xE2,0x15,0x1B,0xFD,0x48,0x3B,0x57};

  ThriftAssoc() : srcId(0), dstId(0), atype(0), timestamp(0), attr() {
  }

  virtual ~ThriftAssoc() throw() {}

  int64_t srcId;
  int64_t dstId;
  int64_t atype;
  int64_t timestamp;
  std::string attr;

  _ThriftAssoc__isset __isset;

  void __set_srcId(const int64_t val) {
    srcId = val;
  }

  void __set_dstId(const int64_t val) {
    dstId = val;
  }

  void __set_atype(const int64_t val) {
    atype = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  void __set_attr(const std::string& val) {
    attr = val;
  }

  bool operator == (const ThriftAssoc & rhs) const
  {
    if (!(srcId == rhs.srcId))
      return false;
    if (!(dstId == rhs.dstId))
      return false;
    if (!(atype == rhs.atype))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const ThriftAssoc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftAssoc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ThriftAssoc &a, ThriftAssoc &b);



#endif
