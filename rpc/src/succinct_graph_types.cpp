/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "succinct_graph_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ThriftAssoc::~ThriftAssoc() throw() {
}


void ThriftAssoc::__set_srcId(const int64_t val) {
  this->srcId = val;
}

void ThriftAssoc::__set_dstId(const int64_t val) {
  this->dstId = val;
}

void ThriftAssoc::__set_atype(const int64_t val) {
  this->atype = val;
}

void ThriftAssoc::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void ThriftAssoc::__set_attr(const std::string& val) {
  this->attr = val;
}

const char* ThriftAssoc::ascii_fingerprint = "3CB6A5EF5FFCBCD18AE2151BFD483B57";
const uint8_t ThriftAssoc::binary_fingerprint[16] = {0x3C,0xB6,0xA5,0xEF,0x5F,0xFC,0xBC,0xD1,0x8A,0xE2,0x15,0x1B,0xFD,0x48,0x3B,0x57};

uint32_t ThriftAssoc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->srcId);
          this->__isset.srcId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dstId);
          this->__isset.dstId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->atype);
          this->__isset.atype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attr);
          this->__isset.attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftAssoc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ThriftAssoc");

  xfer += oprot->writeFieldBegin("srcId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->srcId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dstId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->dstId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("atype", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->atype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->attr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ThriftAssoc &a, ThriftAssoc &b) {
  using ::std::swap;
  swap(a.srcId, b.srcId);
  swap(a.dstId, b.dstId);
  swap(a.atype, b.atype);
  swap(a.timestamp, b.timestamp);
  swap(a.attr, b.attr);
  swap(a.__isset, b.__isset);
}

ThriftAssoc::ThriftAssoc(const ThriftAssoc& other0) {
  srcId = other0.srcId;
  dstId = other0.dstId;
  atype = other0.atype;
  timestamp = other0.timestamp;
  attr = other0.attr;
  __isset = other0.__isset;
}
ThriftAssoc& ThriftAssoc::operator=(const ThriftAssoc& other1) {
  srcId = other1.srcId;
  dstId = other1.dstId;
  atype = other1.atype;
  timestamp = other1.timestamp;
  attr = other1.attr;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ThriftAssoc& obj) {
  using apache::thrift::to_string;
  out << "ThriftAssoc(";
  out << "srcId=" << to_string(obj.srcId);
  out << ", " << "dstId=" << to_string(obj.dstId);
  out << ", " << "atype=" << to_string(obj.atype);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "attr=" << to_string(obj.attr);
  out << ")";
  return out;
}


ThriftEdgeUpdatePtr::~ThriftEdgeUpdatePtr() throw() {
}


void ThriftEdgeUpdatePtr::__set_shardId(const int64_t val) {
  this->shardId = val;
}

void ThriftEdgeUpdatePtr::__set_offset(const int64_t val) {
  this->offset = val;
}

const char* ThriftEdgeUpdatePtr::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t ThriftEdgeUpdatePtr::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t ThriftEdgeUpdatePtr::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->shardId);
          this->__isset.shardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftEdgeUpdatePtr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ThriftEdgeUpdatePtr");

  xfer += oprot->writeFieldBegin("shardId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->shardId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ThriftEdgeUpdatePtr &a, ThriftEdgeUpdatePtr &b) {
  using ::std::swap;
  swap(a.shardId, b.shardId);
  swap(a.offset, b.offset);
  swap(a.__isset, b.__isset);
}

ThriftEdgeUpdatePtr::ThriftEdgeUpdatePtr(const ThriftEdgeUpdatePtr& other2) {
  shardId = other2.shardId;
  offset = other2.offset;
  __isset = other2.__isset;
}
ThriftEdgeUpdatePtr& ThriftEdgeUpdatePtr::operator=(const ThriftEdgeUpdatePtr& other3) {
  shardId = other3.shardId;
  offset = other3.offset;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ThriftEdgeUpdatePtr& obj) {
  using apache::thrift::to_string;
  out << "ThriftEdgeUpdatePtr(";
  out << "shardId=" << to_string(obj.shardId);
  out << ", " << "offset=" << to_string(obj.offset);
  out << ")";
  return out;
}


ThriftSrcAtype::~ThriftSrcAtype() throw() {
}


void ThriftSrcAtype::__set_src(const int64_t val) {
  this->src = val;
}

void ThriftSrcAtype::__set_atype(const int64_t val) {
  this->atype = val;
}

const char* ThriftSrcAtype::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t ThriftSrcAtype::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t ThriftSrcAtype::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->src);
          this->__isset.src = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->atype);
          this->__isset.atype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftSrcAtype::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ThriftSrcAtype");

  xfer += oprot->writeFieldBegin("src", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->src);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("atype", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->atype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ThriftSrcAtype &a, ThriftSrcAtype &b) {
  using ::std::swap;
  swap(a.src, b.src);
  swap(a.atype, b.atype);
  swap(a.__isset, b.__isset);
}

ThriftSrcAtype::ThriftSrcAtype(const ThriftSrcAtype& other4) {
  src = other4.src;
  atype = other4.atype;
  __isset = other4.__isset;
}
ThriftSrcAtype& ThriftSrcAtype::operator=(const ThriftSrcAtype& other5) {
  src = other5.src;
  atype = other5.atype;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ThriftSrcAtype& obj) {
  using apache::thrift::to_string;
  out << "ThriftSrcAtype(";
  out << "src=" << to_string(obj.src);
  out << ", " << "atype=" << to_string(obj.atype);
  out << ")";
  return out;
}


