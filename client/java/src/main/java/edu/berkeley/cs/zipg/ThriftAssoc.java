/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.zipg;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-30")
public class ThriftAssoc implements org.apache.thrift.TBase<ThriftAssoc, ThriftAssoc._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftAssoc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftAssoc");

  private static final org.apache.thrift.protocol.TField SRC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dstId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("attr", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftAssocStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftAssocTupleSchemeFactory());
  }

  public long srcId; // required
  public long dstId; // required
  public long atype; // required
  public long timestamp; // required
  public String attr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC_ID((short)1, "srcId"),
    DST_ID((short)2, "dstId"),
    ATYPE((short)3, "atype"),
    TIMESTAMP((short)4, "timestamp"),
    ATTR((short)5, "attr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_ID
          return SRC_ID;
        case 2: // DST_ID
          return DST_ID;
        case 3: // ATYPE
          return ATYPE;
        case 4: // TIMESTAMP
          return TIMESTAMP;
        case 5: // ATTR
          return ATTR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SRCID_ISSET_ID = 0;
  private static final int __DSTID_ISSET_ID = 1;
  private static final int __ATYPE_ISSET_ID = 2;
  private static final int __TIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_ID, new org.apache.thrift.meta_data.FieldMetaData("srcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DST_ID, new org.apache.thrift.meta_data.FieldMetaData("dstId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATTR, new org.apache.thrift.meta_data.FieldMetaData("attr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftAssoc.class, metaDataMap);
  }

  public ThriftAssoc() {
  }

  public ThriftAssoc(
    long srcId,
    long dstId,
    long atype,
    long timestamp,
    String attr)
  {
    this();
    this.srcId = srcId;
    setSrcIdIsSet(true);
    this.dstId = dstId;
    setDstIdIsSet(true);
    this.atype = atype;
    setAtypeIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.attr = attr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftAssoc(ThriftAssoc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.srcId = other.srcId;
    this.dstId = other.dstId;
    this.atype = other.atype;
    this.timestamp = other.timestamp;
    if (other.isSetAttr()) {
      this.attr = other.attr;
    }
  }

  public ThriftAssoc deepCopy() {
    return new ThriftAssoc(this);
  }

  @Override
  public void clear() {
    setSrcIdIsSet(false);
    this.srcId = 0;
    setDstIdIsSet(false);
    this.dstId = 0;
    setAtypeIsSet(false);
    this.atype = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.attr = null;
  }

  public long getSrcId() {
    return this.srcId;
  }

  public ThriftAssoc setSrcId(long srcId) {
    this.srcId = srcId;
    setSrcIdIsSet(true);
    return this;
  }

  public void unsetSrcId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCID_ISSET_ID);
  }

  /** Returns true if field srcId is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcId() {
    return EncodingUtils.testBit(__isset_bitfield, __SRCID_ISSET_ID);
  }

  public void setSrcIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCID_ISSET_ID, value);
  }

  public long getDstId() {
    return this.dstId;
  }

  public ThriftAssoc setDstId(long dstId) {
    this.dstId = dstId;
    setDstIdIsSet(true);
    return this;
  }

  public void unsetDstId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSTID_ISSET_ID);
  }

  /** Returns true if field dstId is set (has been assigned a value) and false otherwise */
  public boolean isSetDstId() {
    return EncodingUtils.testBit(__isset_bitfield, __DSTID_ISSET_ID);
  }

  public void setDstIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSTID_ISSET_ID, value);
  }

  public long getAtype() {
    return this.atype;
  }

  public ThriftAssoc setAtype(long atype) {
    this.atype = atype;
    setAtypeIsSet(true);
    return this;
  }

  public void unsetAtype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
  }

  /** Returns true if field atype is set (has been assigned a value) and false otherwise */
  public boolean isSetAtype() {
    return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
  }

  public void setAtypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public ThriftAssoc setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getAttr() {
    return this.attr;
  }

  public ThriftAssoc setAttr(String attr) {
    this.attr = attr;
    return this;
  }

  public void unsetAttr() {
    this.attr = null;
  }

  /** Returns true if field attr is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr() {
    return this.attr != null;
  }

  public void setAttrIsSet(boolean value) {
    if (!value) {
      this.attr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_ID:
      if (value == null) {
        unsetSrcId();
      } else {
        setSrcId((Long)value);
      }
      break;

    case DST_ID:
      if (value == null) {
        unsetDstId();
      } else {
        setDstId((Long)value);
      }
      break;

    case ATYPE:
      if (value == null) {
        unsetAtype();
      } else {
        setAtype((Long)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case ATTR:
      if (value == null) {
        unsetAttr();
      } else {
        setAttr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_ID:
      return getSrcId();

    case DST_ID:
      return getDstId();

    case ATYPE:
      return getAtype();

    case TIMESTAMP:
      return getTimestamp();

    case ATTR:
      return getAttr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_ID:
      return isSetSrcId();
    case DST_ID:
      return isSetDstId();
    case ATYPE:
      return isSetAtype();
    case TIMESTAMP:
      return isSetTimestamp();
    case ATTR:
      return isSetAttr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftAssoc)
      return this.equals((ThriftAssoc)that);
    return false;
  }

  public boolean equals(ThriftAssoc that) {
    if (that == null)
      return false;

    boolean this_present_srcId = true;
    boolean that_present_srcId = true;
    if (this_present_srcId || that_present_srcId) {
      if (!(this_present_srcId && that_present_srcId))
        return false;
      if (this.srcId != that.srcId)
        return false;
    }

    boolean this_present_dstId = true;
    boolean that_present_dstId = true;
    if (this_present_dstId || that_present_dstId) {
      if (!(this_present_dstId && that_present_dstId))
        return false;
      if (this.dstId != that.dstId)
        return false;
    }

    boolean this_present_atype = true;
    boolean that_present_atype = true;
    if (this_present_atype || that_present_atype) {
      if (!(this_present_atype && that_present_atype))
        return false;
      if (this.atype != that.atype)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_attr = true && this.isSetAttr();
    boolean that_present_attr = true && that.isSetAttr();
    if (this_present_attr || that_present_attr) {
      if (!(this_present_attr && that_present_attr))
        return false;
      if (!this.attr.equals(that.attr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_srcId = true;
    list.add(present_srcId);
    if (present_srcId)
      list.add(srcId);

    boolean present_dstId = true;
    list.add(present_dstId);
    if (present_dstId)
      list.add(dstId);

    boolean present_atype = true;
    list.add(present_atype);
    if (present_atype)
      list.add(atype);

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_attr = true && (isSetAttr());
    list.add(present_attr);
    if (present_attr)
      list.add(attr);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftAssoc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSrcId()).compareTo(other.isSetSrcId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcId, other.srcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstId()).compareTo(other.isSetDstId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstId, other.dstId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr()).compareTo(other.isSetAttr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr, other.attr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftAssoc(");
    boolean first = true;

    sb.append("srcId:");
    sb.append(this.srcId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstId:");
    sb.append(this.dstId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("atype:");
    sb.append(this.atype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr:");
    if (this.attr == null) {
      sb.append("null");
    } else {
      sb.append(this.attr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftAssocStandardSchemeFactory implements SchemeFactory {
    public ThriftAssocStandardScheme getScheme() {
      return new ThriftAssocStandardScheme();
    }
  }

  private static class ThriftAssocStandardScheme extends StandardScheme<ThriftAssoc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftAssoc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.srcId = iprot.readI64();
              struct.setSrcIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dstId = iprot.readI64();
              struct.setDstIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.atype = iprot.readI64();
              struct.setAtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ATTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attr = iprot.readString();
              struct.setAttrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftAssoc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SRC_ID_FIELD_DESC);
      oprot.writeI64(struct.srcId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DST_ID_FIELD_DESC);
      oprot.writeI64(struct.dstId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATYPE_FIELD_DESC);
      oprot.writeI64(struct.atype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.attr != null) {
        oprot.writeFieldBegin(ATTR_FIELD_DESC);
        oprot.writeString(struct.attr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftAssocTupleSchemeFactory implements SchemeFactory {
    public ThriftAssocTupleScheme getScheme() {
      return new ThriftAssocTupleScheme();
    }
  }

  private static class ThriftAssocTupleScheme extends TupleScheme<ThriftAssoc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftAssoc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSrcId()) {
        optionals.set(0);
      }
      if (struct.isSetDstId()) {
        optionals.set(1);
      }
      if (struct.isSetAtype()) {
        optionals.set(2);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetAttr()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSrcId()) {
        oprot.writeI64(struct.srcId);
      }
      if (struct.isSetDstId()) {
        oprot.writeI64(struct.dstId);
      }
      if (struct.isSetAtype()) {
        oprot.writeI64(struct.atype);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetAttr()) {
        oprot.writeString(struct.attr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftAssoc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.srcId = iprot.readI64();
        struct.setSrcIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dstId = iprot.readI64();
        struct.setDstIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.atype = iprot.readI64();
        struct.setAtypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.attr = iprot.readString();
        struct.setAttrIsSet(true);
      }
    }
  }

}

