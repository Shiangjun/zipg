/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.zipg;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-30")
public class GraphQueryAggregatorService {

  public interface Iface {

    public int init() throws org.apache.thrift.TException;

    public int connect_to_aggregators() throws org.apache.thrift.TException;

    public void disconnect_from_aggregators() throws org.apache.thrift.TException;

    public void shutdown() throws org.apache.thrift.TException;

    public void record_edge_updates(int next_shard, int local_shard, List<ThriftSrcAtype> updates) throws org.apache.thrift.TException;

    public void record_node_append(int next_shard, int local_shard, long obj) throws org.apache.thrift.TException;

    public String get_attribute(long nodeId, int attrId) throws org.apache.thrift.TException;

    public String get_attribute_local(long shardId, long nodeId, int attrId) throws org.apache.thrift.TException;

    public List<Long> get_neighbors(long nodeId) throws org.apache.thrift.TException;

    public List<Long> get_neighbors_local(int shardId, long nodeId) throws org.apache.thrift.TException;

    public List<Long> get_neighbors_atype(long nodeId, long atype) throws org.apache.thrift.TException;

    public List<Long> get_neighbors_atype_local(int shardId, long nodeId, long atype) throws org.apache.thrift.TException;

    public List<Long> get_neighbors_attr(long nodeId, int attrId, String attrKey) throws org.apache.thrift.TException;

    public List<Long> get_neighbors_attr_local(int shardId, long nodeId, int attrId, String attrKey) throws org.apache.thrift.TException;

    public Set<Long> get_nodes(int attrId, String attrKey) throws org.apache.thrift.TException;

    public Set<Long> get_nodes_local(int attrId, String attrKey) throws org.apache.thrift.TException;

    public Set<Long> get_nodes2(int attrId1, String attrKey1, int attrId2, String attrKey2) throws org.apache.thrift.TException;

    public Set<Long> get_nodes2_local(int attrId1, String attrKey1, int attrId2, String attrKey2) throws org.apache.thrift.TException;

    public List<Long> filter_nodes_local(List<Long> nodeIds, int attrId, String attrKey) throws org.apache.thrift.TException;

    public List<String> get_edge_attrs(long nodeId, long atype) throws org.apache.thrift.TException;

    public List<String> get_edge_attrs_local(int shardId, long nodeId, long atype) throws org.apache.thrift.TException;

    public List<ThriftAssoc> assoc_range(long src, long atype, int off, int len) throws org.apache.thrift.TException;

    public List<ThriftAssoc> assoc_range_local(int shardId, long src, long atype, int off, int len) throws org.apache.thrift.TException;

    public long assoc_count(long src, long atype) throws org.apache.thrift.TException;

    public long assoc_count_local(int shardId, long src, long atype) throws org.apache.thrift.TException;

    public List<ThriftAssoc> assoc_get(long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh) throws org.apache.thrift.TException;

    public List<ThriftAssoc> assoc_get_local(int shardId, long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh) throws org.apache.thrift.TException;

    public long obj_add(List<String> attrs) throws org.apache.thrift.TException;

    public List<String> obj_get(long nodeId) throws org.apache.thrift.TException;

    public List<String> obj_get_local(int shardId, long nodeId) throws org.apache.thrift.TException;

    public List<ThriftAssoc> assoc_time_range(long src, long atype, long tLow, long tHigh, int limit) throws org.apache.thrift.TException;

    public List<ThriftAssoc> assoc_time_range_local(int shardId, long src, long atype, long tLow, long tHigh, int limit) throws org.apache.thrift.TException;

    public int assoc_add(long src, long atype, long dst, long time, String attr) throws org.apache.thrift.TException;

    public String getNode(long id) throws org.apache.thrift.TException;

    public String getNodeLocal(long shard_id, long id) throws org.apache.thrift.TException;

    public long addNode(long id, String data) throws org.apache.thrift.TException;

    public boolean deleteNode(long id) throws org.apache.thrift.TException;

    public boolean deleteNodeLocal(long shard_id, long id) throws org.apache.thrift.TException;

    public boolean updateNode(long id, String data) throws org.apache.thrift.TException;

    public ThriftAssoc getLink(long id1, long link_type, long id2) throws org.apache.thrift.TException;

    public ThriftAssoc getLinkLocal(long shard_id, long id1, long link_type, long id2) throws org.apache.thrift.TException;

    public boolean addLink(ThriftAssoc link) throws org.apache.thrift.TException;

    public boolean deleteLink(long id1, long link_type, long id2) throws org.apache.thrift.TException;

    public boolean deleteLinkLocal(long shard_id, long id1, long link_type, long id2) throws org.apache.thrift.TException;

    public boolean updateLink(ThriftAssoc link) throws org.apache.thrift.TException;

    public List<ThriftAssoc> getLinkList(long id1, long link_type) throws org.apache.thrift.TException;

    public List<ThriftAssoc> getLinkListLocal(long shard_id, long id1, long link_type) throws org.apache.thrift.TException;

    public List<ThriftAssoc> getFilteredLinkList(long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit) throws org.apache.thrift.TException;

    public List<ThriftAssoc> getFilteredLinkListLocal(long shard_id, long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void init(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void connect_to_aggregators(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disconnect_from_aggregators(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void record_edge_updates(int next_shard, int local_shard, List<ThriftSrcAtype> updates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void record_node_append(int next_shard, int local_shard, long obj, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_attribute(long nodeId, int attrId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_attribute_local(long shardId, long nodeId, int attrId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_neighbors(long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_neighbors_local(int shardId, long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_neighbors_atype(long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_neighbors_atype_local(int shardId, long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_neighbors_attr(long nodeId, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_neighbors_attr_local(int shardId, long nodeId, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_nodes(int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_nodes_local(int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_nodes2(int attrId1, String attrKey1, int attrId2, String attrKey2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_nodes2_local(int attrId1, String attrKey1, int attrId2, String attrKey2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void filter_nodes_local(List<Long> nodeIds, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_edge_attrs(long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_edge_attrs_local(int shardId, long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_range(long src, long atype, int off, int len, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_range_local(int shardId, long src, long atype, int off, int len, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_count(long src, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_count_local(int shardId, long src, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_get(long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_get_local(int shardId, long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obj_add(List<String> attrs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obj_get(long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obj_get_local(int shardId, long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_time_range(long src, long atype, long tLow, long tHigh, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_time_range_local(int shardId, long src, long atype, long tLow, long tHigh, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assoc_add(long src, long atype, long dst, long time, String attr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNode(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNodeLocal(long shard_id, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addNode(long id, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteNode(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteNodeLocal(long shard_id, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateNode(long id, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLink(long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLinkLocal(long shard_id, long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addLink(ThriftAssoc link, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLink(long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLinkLocal(long shard_id, long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLink(ThriftAssoc link, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLinkList(long id1, long link_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLinkListLocal(long shard_id, long id1, long link_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFilteredLinkList(long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFilteredLinkListLocal(long shard_id, long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int init() throws org.apache.thrift.TException
    {
      send_init();
      return recv_init();
    }

    public void send_init() throws org.apache.thrift.TException
    {
      init_args args = new init_args();
      sendBase("init", args);
    }

    public int recv_init() throws org.apache.thrift.TException
    {
      init_result result = new init_result();
      receiveBase(result, "init");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "init failed: unknown result");
    }

    public int connect_to_aggregators() throws org.apache.thrift.TException
    {
      send_connect_to_aggregators();
      return recv_connect_to_aggregators();
    }

    public void send_connect_to_aggregators() throws org.apache.thrift.TException
    {
      connect_to_aggregators_args args = new connect_to_aggregators_args();
      sendBase("connect_to_aggregators", args);
    }

    public int recv_connect_to_aggregators() throws org.apache.thrift.TException
    {
      connect_to_aggregators_result result = new connect_to_aggregators_result();
      receiveBase(result, "connect_to_aggregators");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connect_to_aggregators failed: unknown result");
    }

    public void disconnect_from_aggregators() throws org.apache.thrift.TException
    {
      send_disconnect_from_aggregators();
      recv_disconnect_from_aggregators();
    }

    public void send_disconnect_from_aggregators() throws org.apache.thrift.TException
    {
      disconnect_from_aggregators_args args = new disconnect_from_aggregators_args();
      sendBase("disconnect_from_aggregators", args);
    }

    public void recv_disconnect_from_aggregators() throws org.apache.thrift.TException
    {
      disconnect_from_aggregators_result result = new disconnect_from_aggregators_result();
      receiveBase(result, "disconnect_from_aggregators");
      return;
    }

    public void shutdown() throws org.apache.thrift.TException
    {
      send_shutdown();
      recv_shutdown();
    }

    public void send_shutdown() throws org.apache.thrift.TException
    {
      shutdown_args args = new shutdown_args();
      sendBase("shutdown", args);
    }

    public void recv_shutdown() throws org.apache.thrift.TException
    {
      shutdown_result result = new shutdown_result();
      receiveBase(result, "shutdown");
      return;
    }

    public void record_edge_updates(int next_shard, int local_shard, List<ThriftSrcAtype> updates) throws org.apache.thrift.TException
    {
      send_record_edge_updates(next_shard, local_shard, updates);
      recv_record_edge_updates();
    }

    public void send_record_edge_updates(int next_shard, int local_shard, List<ThriftSrcAtype> updates) throws org.apache.thrift.TException
    {
      record_edge_updates_args args = new record_edge_updates_args();
      args.setNext_shard(next_shard);
      args.setLocal_shard(local_shard);
      args.setUpdates(updates);
      sendBase("record_edge_updates", args);
    }

    public void recv_record_edge_updates() throws org.apache.thrift.TException
    {
      record_edge_updates_result result = new record_edge_updates_result();
      receiveBase(result, "record_edge_updates");
      return;
    }

    public void record_node_append(int next_shard, int local_shard, long obj) throws org.apache.thrift.TException
    {
      send_record_node_append(next_shard, local_shard, obj);
      recv_record_node_append();
    }

    public void send_record_node_append(int next_shard, int local_shard, long obj) throws org.apache.thrift.TException
    {
      record_node_append_args args = new record_node_append_args();
      args.setNext_shard(next_shard);
      args.setLocal_shard(local_shard);
      args.setObj(obj);
      sendBase("record_node_append", args);
    }

    public void recv_record_node_append() throws org.apache.thrift.TException
    {
      record_node_append_result result = new record_node_append_result();
      receiveBase(result, "record_node_append");
      return;
    }

    public String get_attribute(long nodeId, int attrId) throws org.apache.thrift.TException
    {
      send_get_attribute(nodeId, attrId);
      return recv_get_attribute();
    }

    public void send_get_attribute(long nodeId, int attrId) throws org.apache.thrift.TException
    {
      get_attribute_args args = new get_attribute_args();
      args.setNodeId(nodeId);
      args.setAttrId(attrId);
      sendBase("get_attribute", args);
    }

    public String recv_get_attribute() throws org.apache.thrift.TException
    {
      get_attribute_result result = new get_attribute_result();
      receiveBase(result, "get_attribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_attribute failed: unknown result");
    }

    public String get_attribute_local(long shardId, long nodeId, int attrId) throws org.apache.thrift.TException
    {
      send_get_attribute_local(shardId, nodeId, attrId);
      return recv_get_attribute_local();
    }

    public void send_get_attribute_local(long shardId, long nodeId, int attrId) throws org.apache.thrift.TException
    {
      get_attribute_local_args args = new get_attribute_local_args();
      args.setShardId(shardId);
      args.setNodeId(nodeId);
      args.setAttrId(attrId);
      sendBase("get_attribute_local", args);
    }

    public String recv_get_attribute_local() throws org.apache.thrift.TException
    {
      get_attribute_local_result result = new get_attribute_local_result();
      receiveBase(result, "get_attribute_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_attribute_local failed: unknown result");
    }

    public List<Long> get_neighbors(long nodeId) throws org.apache.thrift.TException
    {
      send_get_neighbors(nodeId);
      return recv_get_neighbors();
    }

    public void send_get_neighbors(long nodeId) throws org.apache.thrift.TException
    {
      get_neighbors_args args = new get_neighbors_args();
      args.setNodeId(nodeId);
      sendBase("get_neighbors", args);
    }

    public List<Long> recv_get_neighbors() throws org.apache.thrift.TException
    {
      get_neighbors_result result = new get_neighbors_result();
      receiveBase(result, "get_neighbors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_neighbors failed: unknown result");
    }

    public List<Long> get_neighbors_local(int shardId, long nodeId) throws org.apache.thrift.TException
    {
      send_get_neighbors_local(shardId, nodeId);
      return recv_get_neighbors_local();
    }

    public void send_get_neighbors_local(int shardId, long nodeId) throws org.apache.thrift.TException
    {
      get_neighbors_local_args args = new get_neighbors_local_args();
      args.setShardId(shardId);
      args.setNodeId(nodeId);
      sendBase("get_neighbors_local", args);
    }

    public List<Long> recv_get_neighbors_local() throws org.apache.thrift.TException
    {
      get_neighbors_local_result result = new get_neighbors_local_result();
      receiveBase(result, "get_neighbors_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_neighbors_local failed: unknown result");
    }

    public List<Long> get_neighbors_atype(long nodeId, long atype) throws org.apache.thrift.TException
    {
      send_get_neighbors_atype(nodeId, atype);
      return recv_get_neighbors_atype();
    }

    public void send_get_neighbors_atype(long nodeId, long atype) throws org.apache.thrift.TException
    {
      get_neighbors_atype_args args = new get_neighbors_atype_args();
      args.setNodeId(nodeId);
      args.setAtype(atype);
      sendBase("get_neighbors_atype", args);
    }

    public List<Long> recv_get_neighbors_atype() throws org.apache.thrift.TException
    {
      get_neighbors_atype_result result = new get_neighbors_atype_result();
      receiveBase(result, "get_neighbors_atype");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_neighbors_atype failed: unknown result");
    }

    public List<Long> get_neighbors_atype_local(int shardId, long nodeId, long atype) throws org.apache.thrift.TException
    {
      send_get_neighbors_atype_local(shardId, nodeId, atype);
      return recv_get_neighbors_atype_local();
    }

    public void send_get_neighbors_atype_local(int shardId, long nodeId, long atype) throws org.apache.thrift.TException
    {
      get_neighbors_atype_local_args args = new get_neighbors_atype_local_args();
      args.setShardId(shardId);
      args.setNodeId(nodeId);
      args.setAtype(atype);
      sendBase("get_neighbors_atype_local", args);
    }

    public List<Long> recv_get_neighbors_atype_local() throws org.apache.thrift.TException
    {
      get_neighbors_atype_local_result result = new get_neighbors_atype_local_result();
      receiveBase(result, "get_neighbors_atype_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_neighbors_atype_local failed: unknown result");
    }

    public List<Long> get_neighbors_attr(long nodeId, int attrId, String attrKey) throws org.apache.thrift.TException
    {
      send_get_neighbors_attr(nodeId, attrId, attrKey);
      return recv_get_neighbors_attr();
    }

    public void send_get_neighbors_attr(long nodeId, int attrId, String attrKey) throws org.apache.thrift.TException
    {
      get_neighbors_attr_args args = new get_neighbors_attr_args();
      args.setNodeId(nodeId);
      args.setAttrId(attrId);
      args.setAttrKey(attrKey);
      sendBase("get_neighbors_attr", args);
    }

    public List<Long> recv_get_neighbors_attr() throws org.apache.thrift.TException
    {
      get_neighbors_attr_result result = new get_neighbors_attr_result();
      receiveBase(result, "get_neighbors_attr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_neighbors_attr failed: unknown result");
    }

    public List<Long> get_neighbors_attr_local(int shardId, long nodeId, int attrId, String attrKey) throws org.apache.thrift.TException
    {
      send_get_neighbors_attr_local(shardId, nodeId, attrId, attrKey);
      return recv_get_neighbors_attr_local();
    }

    public void send_get_neighbors_attr_local(int shardId, long nodeId, int attrId, String attrKey) throws org.apache.thrift.TException
    {
      get_neighbors_attr_local_args args = new get_neighbors_attr_local_args();
      args.setShardId(shardId);
      args.setNodeId(nodeId);
      args.setAttrId(attrId);
      args.setAttrKey(attrKey);
      sendBase("get_neighbors_attr_local", args);
    }

    public List<Long> recv_get_neighbors_attr_local() throws org.apache.thrift.TException
    {
      get_neighbors_attr_local_result result = new get_neighbors_attr_local_result();
      receiveBase(result, "get_neighbors_attr_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_neighbors_attr_local failed: unknown result");
    }

    public Set<Long> get_nodes(int attrId, String attrKey) throws org.apache.thrift.TException
    {
      send_get_nodes(attrId, attrKey);
      return recv_get_nodes();
    }

    public void send_get_nodes(int attrId, String attrKey) throws org.apache.thrift.TException
    {
      get_nodes_args args = new get_nodes_args();
      args.setAttrId(attrId);
      args.setAttrKey(attrKey);
      sendBase("get_nodes", args);
    }

    public Set<Long> recv_get_nodes() throws org.apache.thrift.TException
    {
      get_nodes_result result = new get_nodes_result();
      receiveBase(result, "get_nodes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_nodes failed: unknown result");
    }

    public Set<Long> get_nodes_local(int attrId, String attrKey) throws org.apache.thrift.TException
    {
      send_get_nodes_local(attrId, attrKey);
      return recv_get_nodes_local();
    }

    public void send_get_nodes_local(int attrId, String attrKey) throws org.apache.thrift.TException
    {
      get_nodes_local_args args = new get_nodes_local_args();
      args.setAttrId(attrId);
      args.setAttrKey(attrKey);
      sendBase("get_nodes_local", args);
    }

    public Set<Long> recv_get_nodes_local() throws org.apache.thrift.TException
    {
      get_nodes_local_result result = new get_nodes_local_result();
      receiveBase(result, "get_nodes_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_nodes_local failed: unknown result");
    }

    public Set<Long> get_nodes2(int attrId1, String attrKey1, int attrId2, String attrKey2) throws org.apache.thrift.TException
    {
      send_get_nodes2(attrId1, attrKey1, attrId2, attrKey2);
      return recv_get_nodes2();
    }

    public void send_get_nodes2(int attrId1, String attrKey1, int attrId2, String attrKey2) throws org.apache.thrift.TException
    {
      get_nodes2_args args = new get_nodes2_args();
      args.setAttrId1(attrId1);
      args.setAttrKey1(attrKey1);
      args.setAttrId2(attrId2);
      args.setAttrKey2(attrKey2);
      sendBase("get_nodes2", args);
    }

    public Set<Long> recv_get_nodes2() throws org.apache.thrift.TException
    {
      get_nodes2_result result = new get_nodes2_result();
      receiveBase(result, "get_nodes2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_nodes2 failed: unknown result");
    }

    public Set<Long> get_nodes2_local(int attrId1, String attrKey1, int attrId2, String attrKey2) throws org.apache.thrift.TException
    {
      send_get_nodes2_local(attrId1, attrKey1, attrId2, attrKey2);
      return recv_get_nodes2_local();
    }

    public void send_get_nodes2_local(int attrId1, String attrKey1, int attrId2, String attrKey2) throws org.apache.thrift.TException
    {
      get_nodes2_local_args args = new get_nodes2_local_args();
      args.setAttrId1(attrId1);
      args.setAttrKey1(attrKey1);
      args.setAttrId2(attrId2);
      args.setAttrKey2(attrKey2);
      sendBase("get_nodes2_local", args);
    }

    public Set<Long> recv_get_nodes2_local() throws org.apache.thrift.TException
    {
      get_nodes2_local_result result = new get_nodes2_local_result();
      receiveBase(result, "get_nodes2_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_nodes2_local failed: unknown result");
    }

    public List<Long> filter_nodes_local(List<Long> nodeIds, int attrId, String attrKey) throws org.apache.thrift.TException
    {
      send_filter_nodes_local(nodeIds, attrId, attrKey);
      return recv_filter_nodes_local();
    }

    public void send_filter_nodes_local(List<Long> nodeIds, int attrId, String attrKey) throws org.apache.thrift.TException
    {
      filter_nodes_local_args args = new filter_nodes_local_args();
      args.setNodeIds(nodeIds);
      args.setAttrId(attrId);
      args.setAttrKey(attrKey);
      sendBase("filter_nodes_local", args);
    }

    public List<Long> recv_filter_nodes_local() throws org.apache.thrift.TException
    {
      filter_nodes_local_result result = new filter_nodes_local_result();
      receiveBase(result, "filter_nodes_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "filter_nodes_local failed: unknown result");
    }

    public List<String> get_edge_attrs(long nodeId, long atype) throws org.apache.thrift.TException
    {
      send_get_edge_attrs(nodeId, atype);
      return recv_get_edge_attrs();
    }

    public void send_get_edge_attrs(long nodeId, long atype) throws org.apache.thrift.TException
    {
      get_edge_attrs_args args = new get_edge_attrs_args();
      args.setNodeId(nodeId);
      args.setAtype(atype);
      sendBase("get_edge_attrs", args);
    }

    public List<String> recv_get_edge_attrs() throws org.apache.thrift.TException
    {
      get_edge_attrs_result result = new get_edge_attrs_result();
      receiveBase(result, "get_edge_attrs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_edge_attrs failed: unknown result");
    }

    public List<String> get_edge_attrs_local(int shardId, long nodeId, long atype) throws org.apache.thrift.TException
    {
      send_get_edge_attrs_local(shardId, nodeId, atype);
      return recv_get_edge_attrs_local();
    }

    public void send_get_edge_attrs_local(int shardId, long nodeId, long atype) throws org.apache.thrift.TException
    {
      get_edge_attrs_local_args args = new get_edge_attrs_local_args();
      args.setShardId(shardId);
      args.setNodeId(nodeId);
      args.setAtype(atype);
      sendBase("get_edge_attrs_local", args);
    }

    public List<String> recv_get_edge_attrs_local() throws org.apache.thrift.TException
    {
      get_edge_attrs_local_result result = new get_edge_attrs_local_result();
      receiveBase(result, "get_edge_attrs_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_edge_attrs_local failed: unknown result");
    }

    public List<ThriftAssoc> assoc_range(long src, long atype, int off, int len) throws org.apache.thrift.TException
    {
      send_assoc_range(src, atype, off, len);
      return recv_assoc_range();
    }

    public void send_assoc_range(long src, long atype, int off, int len) throws org.apache.thrift.TException
    {
      assoc_range_args args = new assoc_range_args();
      args.setSrc(src);
      args.setAtype(atype);
      args.setOff(off);
      args.setLen(len);
      sendBase("assoc_range", args);
    }

    public List<ThriftAssoc> recv_assoc_range() throws org.apache.thrift.TException
    {
      assoc_range_result result = new assoc_range_result();
      receiveBase(result, "assoc_range");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_range failed: unknown result");
    }

    public List<ThriftAssoc> assoc_range_local(int shardId, long src, long atype, int off, int len) throws org.apache.thrift.TException
    {
      send_assoc_range_local(shardId, src, atype, off, len);
      return recv_assoc_range_local();
    }

    public void send_assoc_range_local(int shardId, long src, long atype, int off, int len) throws org.apache.thrift.TException
    {
      assoc_range_local_args args = new assoc_range_local_args();
      args.setShardId(shardId);
      args.setSrc(src);
      args.setAtype(atype);
      args.setOff(off);
      args.setLen(len);
      sendBase("assoc_range_local", args);
    }

    public List<ThriftAssoc> recv_assoc_range_local() throws org.apache.thrift.TException
    {
      assoc_range_local_result result = new assoc_range_local_result();
      receiveBase(result, "assoc_range_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_range_local failed: unknown result");
    }

    public long assoc_count(long src, long atype) throws org.apache.thrift.TException
    {
      send_assoc_count(src, atype);
      return recv_assoc_count();
    }

    public void send_assoc_count(long src, long atype) throws org.apache.thrift.TException
    {
      assoc_count_args args = new assoc_count_args();
      args.setSrc(src);
      args.setAtype(atype);
      sendBase("assoc_count", args);
    }

    public long recv_assoc_count() throws org.apache.thrift.TException
    {
      assoc_count_result result = new assoc_count_result();
      receiveBase(result, "assoc_count");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_count failed: unknown result");
    }

    public long assoc_count_local(int shardId, long src, long atype) throws org.apache.thrift.TException
    {
      send_assoc_count_local(shardId, src, atype);
      return recv_assoc_count_local();
    }

    public void send_assoc_count_local(int shardId, long src, long atype) throws org.apache.thrift.TException
    {
      assoc_count_local_args args = new assoc_count_local_args();
      args.setShardId(shardId);
      args.setSrc(src);
      args.setAtype(atype);
      sendBase("assoc_count_local", args);
    }

    public long recv_assoc_count_local() throws org.apache.thrift.TException
    {
      assoc_count_local_result result = new assoc_count_local_result();
      receiveBase(result, "assoc_count_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_count_local failed: unknown result");
    }

    public List<ThriftAssoc> assoc_get(long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh) throws org.apache.thrift.TException
    {
      send_assoc_get(src, atype, dstIdSet, tLow, tHigh);
      return recv_assoc_get();
    }

    public void send_assoc_get(long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh) throws org.apache.thrift.TException
    {
      assoc_get_args args = new assoc_get_args();
      args.setSrc(src);
      args.setAtype(atype);
      args.setDstIdSet(dstIdSet);
      args.setTLow(tLow);
      args.setTHigh(tHigh);
      sendBase("assoc_get", args);
    }

    public List<ThriftAssoc> recv_assoc_get() throws org.apache.thrift.TException
    {
      assoc_get_result result = new assoc_get_result();
      receiveBase(result, "assoc_get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_get failed: unknown result");
    }

    public List<ThriftAssoc> assoc_get_local(int shardId, long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh) throws org.apache.thrift.TException
    {
      send_assoc_get_local(shardId, src, atype, dstIdSet, tLow, tHigh);
      return recv_assoc_get_local();
    }

    public void send_assoc_get_local(int shardId, long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh) throws org.apache.thrift.TException
    {
      assoc_get_local_args args = new assoc_get_local_args();
      args.setShardId(shardId);
      args.setSrc(src);
      args.setAtype(atype);
      args.setDstIdSet(dstIdSet);
      args.setTLow(tLow);
      args.setTHigh(tHigh);
      sendBase("assoc_get_local", args);
    }

    public List<ThriftAssoc> recv_assoc_get_local() throws org.apache.thrift.TException
    {
      assoc_get_local_result result = new assoc_get_local_result();
      receiveBase(result, "assoc_get_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_get_local failed: unknown result");
    }

    public long obj_add(List<String> attrs) throws org.apache.thrift.TException
    {
      send_obj_add(attrs);
      return recv_obj_add();
    }

    public void send_obj_add(List<String> attrs) throws org.apache.thrift.TException
    {
      obj_add_args args = new obj_add_args();
      args.setAttrs(attrs);
      sendBase("obj_add", args);
    }

    public long recv_obj_add() throws org.apache.thrift.TException
    {
      obj_add_result result = new obj_add_result();
      receiveBase(result, "obj_add");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obj_add failed: unknown result");
    }

    public List<String> obj_get(long nodeId) throws org.apache.thrift.TException
    {
      send_obj_get(nodeId);
      return recv_obj_get();
    }

    public void send_obj_get(long nodeId) throws org.apache.thrift.TException
    {
      obj_get_args args = new obj_get_args();
      args.setNodeId(nodeId);
      sendBase("obj_get", args);
    }

    public List<String> recv_obj_get() throws org.apache.thrift.TException
    {
      obj_get_result result = new obj_get_result();
      receiveBase(result, "obj_get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obj_get failed: unknown result");
    }

    public List<String> obj_get_local(int shardId, long nodeId) throws org.apache.thrift.TException
    {
      send_obj_get_local(shardId, nodeId);
      return recv_obj_get_local();
    }

    public void send_obj_get_local(int shardId, long nodeId) throws org.apache.thrift.TException
    {
      obj_get_local_args args = new obj_get_local_args();
      args.setShardId(shardId);
      args.setNodeId(nodeId);
      sendBase("obj_get_local", args);
    }

    public List<String> recv_obj_get_local() throws org.apache.thrift.TException
    {
      obj_get_local_result result = new obj_get_local_result();
      receiveBase(result, "obj_get_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obj_get_local failed: unknown result");
    }

    public List<ThriftAssoc> assoc_time_range(long src, long atype, long tLow, long tHigh, int limit) throws org.apache.thrift.TException
    {
      send_assoc_time_range(src, atype, tLow, tHigh, limit);
      return recv_assoc_time_range();
    }

    public void send_assoc_time_range(long src, long atype, long tLow, long tHigh, int limit) throws org.apache.thrift.TException
    {
      assoc_time_range_args args = new assoc_time_range_args();
      args.setSrc(src);
      args.setAtype(atype);
      args.setTLow(tLow);
      args.setTHigh(tHigh);
      args.setLimit(limit);
      sendBase("assoc_time_range", args);
    }

    public List<ThriftAssoc> recv_assoc_time_range() throws org.apache.thrift.TException
    {
      assoc_time_range_result result = new assoc_time_range_result();
      receiveBase(result, "assoc_time_range");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_time_range failed: unknown result");
    }

    public List<ThriftAssoc> assoc_time_range_local(int shardId, long src, long atype, long tLow, long tHigh, int limit) throws org.apache.thrift.TException
    {
      send_assoc_time_range_local(shardId, src, atype, tLow, tHigh, limit);
      return recv_assoc_time_range_local();
    }

    public void send_assoc_time_range_local(int shardId, long src, long atype, long tLow, long tHigh, int limit) throws org.apache.thrift.TException
    {
      assoc_time_range_local_args args = new assoc_time_range_local_args();
      args.setShardId(shardId);
      args.setSrc(src);
      args.setAtype(atype);
      args.setTLow(tLow);
      args.setTHigh(tHigh);
      args.setLimit(limit);
      sendBase("assoc_time_range_local", args);
    }

    public List<ThriftAssoc> recv_assoc_time_range_local() throws org.apache.thrift.TException
    {
      assoc_time_range_local_result result = new assoc_time_range_local_result();
      receiveBase(result, "assoc_time_range_local");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_time_range_local failed: unknown result");
    }

    public int assoc_add(long src, long atype, long dst, long time, String attr) throws org.apache.thrift.TException
    {
      send_assoc_add(src, atype, dst, time, attr);
      return recv_assoc_add();
    }

    public void send_assoc_add(long src, long atype, long dst, long time, String attr) throws org.apache.thrift.TException
    {
      assoc_add_args args = new assoc_add_args();
      args.setSrc(src);
      args.setAtype(atype);
      args.setDst(dst);
      args.setTime(time);
      args.setAttr(attr);
      sendBase("assoc_add", args);
    }

    public int recv_assoc_add() throws org.apache.thrift.TException
    {
      assoc_add_result result = new assoc_add_result();
      receiveBase(result, "assoc_add");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assoc_add failed: unknown result");
    }

    public String getNode(long id) throws org.apache.thrift.TException
    {
      send_getNode(id);
      return recv_getNode();
    }

    public void send_getNode(long id) throws org.apache.thrift.TException
    {
      getNode_args args = new getNode_args();
      args.setId(id);
      sendBase("getNode", args);
    }

    public String recv_getNode() throws org.apache.thrift.TException
    {
      getNode_result result = new getNode_result();
      receiveBase(result, "getNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNode failed: unknown result");
    }

    public String getNodeLocal(long shard_id, long id) throws org.apache.thrift.TException
    {
      send_getNodeLocal(shard_id, id);
      return recv_getNodeLocal();
    }

    public void send_getNodeLocal(long shard_id, long id) throws org.apache.thrift.TException
    {
      getNodeLocal_args args = new getNodeLocal_args();
      args.setShard_id(shard_id);
      args.setId(id);
      sendBase("getNodeLocal", args);
    }

    public String recv_getNodeLocal() throws org.apache.thrift.TException
    {
      getNodeLocal_result result = new getNodeLocal_result();
      receiveBase(result, "getNodeLocal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNodeLocal failed: unknown result");
    }

    public long addNode(long id, String data) throws org.apache.thrift.TException
    {
      send_addNode(id, data);
      return recv_addNode();
    }

    public void send_addNode(long id, String data) throws org.apache.thrift.TException
    {
      addNode_args args = new addNode_args();
      args.setId(id);
      args.setData(data);
      sendBase("addNode", args);
    }

    public long recv_addNode() throws org.apache.thrift.TException
    {
      addNode_result result = new addNode_result();
      receiveBase(result, "addNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addNode failed: unknown result");
    }

    public boolean deleteNode(long id) throws org.apache.thrift.TException
    {
      send_deleteNode(id);
      return recv_deleteNode();
    }

    public void send_deleteNode(long id) throws org.apache.thrift.TException
    {
      deleteNode_args args = new deleteNode_args();
      args.setId(id);
      sendBase("deleteNode", args);
    }

    public boolean recv_deleteNode() throws org.apache.thrift.TException
    {
      deleteNode_result result = new deleteNode_result();
      receiveBase(result, "deleteNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteNode failed: unknown result");
    }

    public boolean deleteNodeLocal(long shard_id, long id) throws org.apache.thrift.TException
    {
      send_deleteNodeLocal(shard_id, id);
      return recv_deleteNodeLocal();
    }

    public void send_deleteNodeLocal(long shard_id, long id) throws org.apache.thrift.TException
    {
      deleteNodeLocal_args args = new deleteNodeLocal_args();
      args.setShard_id(shard_id);
      args.setId(id);
      sendBase("deleteNodeLocal", args);
    }

    public boolean recv_deleteNodeLocal() throws org.apache.thrift.TException
    {
      deleteNodeLocal_result result = new deleteNodeLocal_result();
      receiveBase(result, "deleteNodeLocal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteNodeLocal failed: unknown result");
    }

    public boolean updateNode(long id, String data) throws org.apache.thrift.TException
    {
      send_updateNode(id, data);
      return recv_updateNode();
    }

    public void send_updateNode(long id, String data) throws org.apache.thrift.TException
    {
      updateNode_args args = new updateNode_args();
      args.setId(id);
      args.setData(data);
      sendBase("updateNode", args);
    }

    public boolean recv_updateNode() throws org.apache.thrift.TException
    {
      updateNode_result result = new updateNode_result();
      receiveBase(result, "updateNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateNode failed: unknown result");
    }

    public ThriftAssoc getLink(long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      send_getLink(id1, link_type, id2);
      return recv_getLink();
    }

    public void send_getLink(long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      getLink_args args = new getLink_args();
      args.setId1(id1);
      args.setLink_type(link_type);
      args.setId2(id2);
      sendBase("getLink", args);
    }

    public ThriftAssoc recv_getLink() throws org.apache.thrift.TException
    {
      getLink_result result = new getLink_result();
      receiveBase(result, "getLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLink failed: unknown result");
    }

    public ThriftAssoc getLinkLocal(long shard_id, long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      send_getLinkLocal(shard_id, id1, link_type, id2);
      return recv_getLinkLocal();
    }

    public void send_getLinkLocal(long shard_id, long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      getLinkLocal_args args = new getLinkLocal_args();
      args.setShard_id(shard_id);
      args.setId1(id1);
      args.setLink_type(link_type);
      args.setId2(id2);
      sendBase("getLinkLocal", args);
    }

    public ThriftAssoc recv_getLinkLocal() throws org.apache.thrift.TException
    {
      getLinkLocal_result result = new getLinkLocal_result();
      receiveBase(result, "getLinkLocal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLinkLocal failed: unknown result");
    }

    public boolean addLink(ThriftAssoc link) throws org.apache.thrift.TException
    {
      send_addLink(link);
      return recv_addLink();
    }

    public void send_addLink(ThriftAssoc link) throws org.apache.thrift.TException
    {
      addLink_args args = new addLink_args();
      args.setLink(link);
      sendBase("addLink", args);
    }

    public boolean recv_addLink() throws org.apache.thrift.TException
    {
      addLink_result result = new addLink_result();
      receiveBase(result, "addLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLink failed: unknown result");
    }

    public boolean deleteLink(long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      send_deleteLink(id1, link_type, id2);
      return recv_deleteLink();
    }

    public void send_deleteLink(long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      deleteLink_args args = new deleteLink_args();
      args.setId1(id1);
      args.setLink_type(link_type);
      args.setId2(id2);
      sendBase("deleteLink", args);
    }

    public boolean recv_deleteLink() throws org.apache.thrift.TException
    {
      deleteLink_result result = new deleteLink_result();
      receiveBase(result, "deleteLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLink failed: unknown result");
    }

    public boolean deleteLinkLocal(long shard_id, long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      send_deleteLinkLocal(shard_id, id1, link_type, id2);
      return recv_deleteLinkLocal();
    }

    public void send_deleteLinkLocal(long shard_id, long id1, long link_type, long id2) throws org.apache.thrift.TException
    {
      deleteLinkLocal_args args = new deleteLinkLocal_args();
      args.setShard_id(shard_id);
      args.setId1(id1);
      args.setLink_type(link_type);
      args.setId2(id2);
      sendBase("deleteLinkLocal", args);
    }

    public boolean recv_deleteLinkLocal() throws org.apache.thrift.TException
    {
      deleteLinkLocal_result result = new deleteLinkLocal_result();
      receiveBase(result, "deleteLinkLocal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLinkLocal failed: unknown result");
    }

    public boolean updateLink(ThriftAssoc link) throws org.apache.thrift.TException
    {
      send_updateLink(link);
      return recv_updateLink();
    }

    public void send_updateLink(ThriftAssoc link) throws org.apache.thrift.TException
    {
      updateLink_args args = new updateLink_args();
      args.setLink(link);
      sendBase("updateLink", args);
    }

    public boolean recv_updateLink() throws org.apache.thrift.TException
    {
      updateLink_result result = new updateLink_result();
      receiveBase(result, "updateLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLink failed: unknown result");
    }

    public List<ThriftAssoc> getLinkList(long id1, long link_type) throws org.apache.thrift.TException
    {
      send_getLinkList(id1, link_type);
      return recv_getLinkList();
    }

    public void send_getLinkList(long id1, long link_type) throws org.apache.thrift.TException
    {
      getLinkList_args args = new getLinkList_args();
      args.setId1(id1);
      args.setLink_type(link_type);
      sendBase("getLinkList", args);
    }

    public List<ThriftAssoc> recv_getLinkList() throws org.apache.thrift.TException
    {
      getLinkList_result result = new getLinkList_result();
      receiveBase(result, "getLinkList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLinkList failed: unknown result");
    }

    public List<ThriftAssoc> getLinkListLocal(long shard_id, long id1, long link_type) throws org.apache.thrift.TException
    {
      send_getLinkListLocal(shard_id, id1, link_type);
      return recv_getLinkListLocal();
    }

    public void send_getLinkListLocal(long shard_id, long id1, long link_type) throws org.apache.thrift.TException
    {
      getLinkListLocal_args args = new getLinkListLocal_args();
      args.setShard_id(shard_id);
      args.setId1(id1);
      args.setLink_type(link_type);
      sendBase("getLinkListLocal", args);
    }

    public List<ThriftAssoc> recv_getLinkListLocal() throws org.apache.thrift.TException
    {
      getLinkListLocal_result result = new getLinkListLocal_result();
      receiveBase(result, "getLinkListLocal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLinkListLocal failed: unknown result");
    }

    public List<ThriftAssoc> getFilteredLinkList(long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit) throws org.apache.thrift.TException
    {
      send_getFilteredLinkList(id1, link_type, min_timestamp, max_timestamp, offset, limit);
      return recv_getFilteredLinkList();
    }

    public void send_getFilteredLinkList(long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit) throws org.apache.thrift.TException
    {
      getFilteredLinkList_args args = new getFilteredLinkList_args();
      args.setId1(id1);
      args.setLink_type(link_type);
      args.setMin_timestamp(min_timestamp);
      args.setMax_timestamp(max_timestamp);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("getFilteredLinkList", args);
    }

    public List<ThriftAssoc> recv_getFilteredLinkList() throws org.apache.thrift.TException
    {
      getFilteredLinkList_result result = new getFilteredLinkList_result();
      receiveBase(result, "getFilteredLinkList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFilteredLinkList failed: unknown result");
    }

    public List<ThriftAssoc> getFilteredLinkListLocal(long shard_id, long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit) throws org.apache.thrift.TException
    {
      send_getFilteredLinkListLocal(shard_id, id1, link_type, min_timestamp, max_timestamp, offset, limit);
      return recv_getFilteredLinkListLocal();
    }

    public void send_getFilteredLinkListLocal(long shard_id, long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit) throws org.apache.thrift.TException
    {
      getFilteredLinkListLocal_args args = new getFilteredLinkListLocal_args();
      args.setShard_id(shard_id);
      args.setId1(id1);
      args.setLink_type(link_type);
      args.setMin_timestamp(min_timestamp);
      args.setMax_timestamp(max_timestamp);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("getFilteredLinkListLocal", args);
    }

    public List<ThriftAssoc> recv_getFilteredLinkListLocal() throws org.apache.thrift.TException
    {
      getFilteredLinkListLocal_result result = new getFilteredLinkListLocal_result();
      receiveBase(result, "getFilteredLinkListLocal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFilteredLinkListLocal failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void init(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      init_call method_call = new init_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class init_call extends org.apache.thrift.async.TAsyncMethodCall {
      public init_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("init", org.apache.thrift.protocol.TMessageType.CALL, 0));
        init_args args = new init_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_init();
      }
    }

    public void connect_to_aggregators(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connect_to_aggregators_call method_call = new connect_to_aggregators_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connect_to_aggregators_call extends org.apache.thrift.async.TAsyncMethodCall {
      public connect_to_aggregators_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connect_to_aggregators", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connect_to_aggregators_args args = new connect_to_aggregators_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connect_to_aggregators();
      }
    }

    public void disconnect_from_aggregators(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disconnect_from_aggregators_call method_call = new disconnect_from_aggregators_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disconnect_from_aggregators_call extends org.apache.thrift.async.TAsyncMethodCall {
      public disconnect_from_aggregators_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disconnect_from_aggregators", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disconnect_from_aggregators_args args = new disconnect_from_aggregators_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_disconnect_from_aggregators();
      }
    }

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdown_call method_call = new shutdown_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdown_call extends org.apache.thrift.async.TAsyncMethodCall {
      public shutdown_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdown_args args = new shutdown_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shutdown();
      }
    }

    public void record_edge_updates(int next_shard, int local_shard, List<ThriftSrcAtype> updates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      record_edge_updates_call method_call = new record_edge_updates_call(next_shard, local_shard, updates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class record_edge_updates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int next_shard;
      private int local_shard;
      private List<ThriftSrcAtype> updates;
      public record_edge_updates_call(int next_shard, int local_shard, List<ThriftSrcAtype> updates, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.next_shard = next_shard;
        this.local_shard = local_shard;
        this.updates = updates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("record_edge_updates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        record_edge_updates_args args = new record_edge_updates_args();
        args.setNext_shard(next_shard);
        args.setLocal_shard(local_shard);
        args.setUpdates(updates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_record_edge_updates();
      }
    }

    public void record_node_append(int next_shard, int local_shard, long obj, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      record_node_append_call method_call = new record_node_append_call(next_shard, local_shard, obj, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class record_node_append_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int next_shard;
      private int local_shard;
      private long obj;
      public record_node_append_call(int next_shard, int local_shard, long obj, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.next_shard = next_shard;
        this.local_shard = local_shard;
        this.obj = obj;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("record_node_append", org.apache.thrift.protocol.TMessageType.CALL, 0));
        record_node_append_args args = new record_node_append_args();
        args.setNext_shard(next_shard);
        args.setLocal_shard(local_shard);
        args.setObj(obj);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_record_node_append();
      }
    }

    public void get_attribute(long nodeId, int attrId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_attribute_call method_call = new get_attribute_call(nodeId, attrId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_attribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nodeId;
      private int attrId;
      public get_attribute_call(long nodeId, int attrId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.attrId = attrId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_attribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_attribute_args args = new get_attribute_args();
        args.setNodeId(nodeId);
        args.setAttrId(attrId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_attribute();
      }
    }

    public void get_attribute_local(long shardId, long nodeId, int attrId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_attribute_local_call method_call = new get_attribute_local_call(shardId, nodeId, attrId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_attribute_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shardId;
      private long nodeId;
      private int attrId;
      public get_attribute_local_call(long shardId, long nodeId, int attrId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.nodeId = nodeId;
        this.attrId = attrId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_attribute_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_attribute_local_args args = new get_attribute_local_args();
        args.setShardId(shardId);
        args.setNodeId(nodeId);
        args.setAttrId(attrId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_attribute_local();
      }
    }

    public void get_neighbors(long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_neighbors_call method_call = new get_neighbors_call(nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_neighbors_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nodeId;
      public get_neighbors_call(long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_neighbors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_neighbors_args args = new get_neighbors_args();
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_neighbors();
      }
    }

    public void get_neighbors_local(int shardId, long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_neighbors_local_call method_call = new get_neighbors_local_call(shardId, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_neighbors_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long nodeId;
      public get_neighbors_local_call(int shardId, long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_neighbors_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_neighbors_local_args args = new get_neighbors_local_args();
        args.setShardId(shardId);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_neighbors_local();
      }
    }

    public void get_neighbors_atype(long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_neighbors_atype_call method_call = new get_neighbors_atype_call(nodeId, atype, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_neighbors_atype_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nodeId;
      private long atype;
      public get_neighbors_atype_call(long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.atype = atype;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_neighbors_atype", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_neighbors_atype_args args = new get_neighbors_atype_args();
        args.setNodeId(nodeId);
        args.setAtype(atype);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_neighbors_atype();
      }
    }

    public void get_neighbors_atype_local(int shardId, long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_neighbors_atype_local_call method_call = new get_neighbors_atype_local_call(shardId, nodeId, atype, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_neighbors_atype_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long nodeId;
      private long atype;
      public get_neighbors_atype_local_call(int shardId, long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.nodeId = nodeId;
        this.atype = atype;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_neighbors_atype_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_neighbors_atype_local_args args = new get_neighbors_atype_local_args();
        args.setShardId(shardId);
        args.setNodeId(nodeId);
        args.setAtype(atype);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_neighbors_atype_local();
      }
    }

    public void get_neighbors_attr(long nodeId, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_neighbors_attr_call method_call = new get_neighbors_attr_call(nodeId, attrId, attrKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_neighbors_attr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nodeId;
      private int attrId;
      private String attrKey;
      public get_neighbors_attr_call(long nodeId, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.attrId = attrId;
        this.attrKey = attrKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_neighbors_attr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_neighbors_attr_args args = new get_neighbors_attr_args();
        args.setNodeId(nodeId);
        args.setAttrId(attrId);
        args.setAttrKey(attrKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_neighbors_attr();
      }
    }

    public void get_neighbors_attr_local(int shardId, long nodeId, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_neighbors_attr_local_call method_call = new get_neighbors_attr_local_call(shardId, nodeId, attrId, attrKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_neighbors_attr_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long nodeId;
      private int attrId;
      private String attrKey;
      public get_neighbors_attr_local_call(int shardId, long nodeId, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.nodeId = nodeId;
        this.attrId = attrId;
        this.attrKey = attrKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_neighbors_attr_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_neighbors_attr_local_args args = new get_neighbors_attr_local_args();
        args.setShardId(shardId);
        args.setNodeId(nodeId);
        args.setAttrId(attrId);
        args.setAttrKey(attrKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_neighbors_attr_local();
      }
    }

    public void get_nodes(int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_nodes_call method_call = new get_nodes_call(attrId, attrKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_nodes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int attrId;
      private String attrKey;
      public get_nodes_call(int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attrId = attrId;
        this.attrKey = attrKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_nodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_nodes_args args = new get_nodes_args();
        args.setAttrId(attrId);
        args.setAttrKey(attrKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_nodes();
      }
    }

    public void get_nodes_local(int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_nodes_local_call method_call = new get_nodes_local_call(attrId, attrKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_nodes_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int attrId;
      private String attrKey;
      public get_nodes_local_call(int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attrId = attrId;
        this.attrKey = attrKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_nodes_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_nodes_local_args args = new get_nodes_local_args();
        args.setAttrId(attrId);
        args.setAttrKey(attrKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_nodes_local();
      }
    }

    public void get_nodes2(int attrId1, String attrKey1, int attrId2, String attrKey2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_nodes2_call method_call = new get_nodes2_call(attrId1, attrKey1, attrId2, attrKey2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_nodes2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int attrId1;
      private String attrKey1;
      private int attrId2;
      private String attrKey2;
      public get_nodes2_call(int attrId1, String attrKey1, int attrId2, String attrKey2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attrId1 = attrId1;
        this.attrKey1 = attrKey1;
        this.attrId2 = attrId2;
        this.attrKey2 = attrKey2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_nodes2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_nodes2_args args = new get_nodes2_args();
        args.setAttrId1(attrId1);
        args.setAttrKey1(attrKey1);
        args.setAttrId2(attrId2);
        args.setAttrKey2(attrKey2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_nodes2();
      }
    }

    public void get_nodes2_local(int attrId1, String attrKey1, int attrId2, String attrKey2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_nodes2_local_call method_call = new get_nodes2_local_call(attrId1, attrKey1, attrId2, attrKey2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_nodes2_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int attrId1;
      private String attrKey1;
      private int attrId2;
      private String attrKey2;
      public get_nodes2_local_call(int attrId1, String attrKey1, int attrId2, String attrKey2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attrId1 = attrId1;
        this.attrKey1 = attrKey1;
        this.attrId2 = attrId2;
        this.attrKey2 = attrKey2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_nodes2_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_nodes2_local_args args = new get_nodes2_local_args();
        args.setAttrId1(attrId1);
        args.setAttrKey1(attrKey1);
        args.setAttrId2(attrId2);
        args.setAttrKey2(attrKey2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_nodes2_local();
      }
    }

    public void filter_nodes_local(List<Long> nodeIds, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      filter_nodes_local_call method_call = new filter_nodes_local_call(nodeIds, attrId, attrKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class filter_nodes_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> nodeIds;
      private int attrId;
      private String attrKey;
      public filter_nodes_local_call(List<Long> nodeIds, int attrId, String attrKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeIds = nodeIds;
        this.attrId = attrId;
        this.attrKey = attrKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("filter_nodes_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        filter_nodes_local_args args = new filter_nodes_local_args();
        args.setNodeIds(nodeIds);
        args.setAttrId(attrId);
        args.setAttrKey(attrKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_filter_nodes_local();
      }
    }

    public void get_edge_attrs(long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_edge_attrs_call method_call = new get_edge_attrs_call(nodeId, atype, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_edge_attrs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nodeId;
      private long atype;
      public get_edge_attrs_call(long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.atype = atype;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_edge_attrs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_edge_attrs_args args = new get_edge_attrs_args();
        args.setNodeId(nodeId);
        args.setAtype(atype);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_edge_attrs();
      }
    }

    public void get_edge_attrs_local(int shardId, long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_edge_attrs_local_call method_call = new get_edge_attrs_local_call(shardId, nodeId, atype, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_edge_attrs_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long nodeId;
      private long atype;
      public get_edge_attrs_local_call(int shardId, long nodeId, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.nodeId = nodeId;
        this.atype = atype;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_edge_attrs_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_edge_attrs_local_args args = new get_edge_attrs_local_args();
        args.setShardId(shardId);
        args.setNodeId(nodeId);
        args.setAtype(atype);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_edge_attrs_local();
      }
    }

    public void assoc_range(long src, long atype, int off, int len, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_range_call method_call = new assoc_range_call(src, atype, off, len, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_range_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long src;
      private long atype;
      private int off;
      private int len;
      public assoc_range_call(long src, long atype, int off, int len, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.atype = atype;
        this.off = off;
        this.len = len;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_range", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_range_args args = new assoc_range_args();
        args.setSrc(src);
        args.setAtype(atype);
        args.setOff(off);
        args.setLen(len);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_range();
      }
    }

    public void assoc_range_local(int shardId, long src, long atype, int off, int len, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_range_local_call method_call = new assoc_range_local_call(shardId, src, atype, off, len, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_range_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long src;
      private long atype;
      private int off;
      private int len;
      public assoc_range_local_call(int shardId, long src, long atype, int off, int len, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.src = src;
        this.atype = atype;
        this.off = off;
        this.len = len;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_range_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_range_local_args args = new assoc_range_local_args();
        args.setShardId(shardId);
        args.setSrc(src);
        args.setAtype(atype);
        args.setOff(off);
        args.setLen(len);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_range_local();
      }
    }

    public void assoc_count(long src, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_count_call method_call = new assoc_count_call(src, atype, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_count_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long src;
      private long atype;
      public assoc_count_call(long src, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.atype = atype;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_count", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_count_args args = new assoc_count_args();
        args.setSrc(src);
        args.setAtype(atype);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_count();
      }
    }

    public void assoc_count_local(int shardId, long src, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_count_local_call method_call = new assoc_count_local_call(shardId, src, atype, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_count_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long src;
      private long atype;
      public assoc_count_local_call(int shardId, long src, long atype, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.src = src;
        this.atype = atype;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_count_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_count_local_args args = new assoc_count_local_args();
        args.setShardId(shardId);
        args.setSrc(src);
        args.setAtype(atype);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_count_local();
      }
    }

    public void assoc_get(long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_get_call method_call = new assoc_get_call(src, atype, dstIdSet, tLow, tHigh, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long src;
      private long atype;
      private Set<Long> dstIdSet;
      private long tLow;
      private long tHigh;
      public assoc_get_call(long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.atype = atype;
        this.dstIdSet = dstIdSet;
        this.tLow = tLow;
        this.tHigh = tHigh;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_get_args args = new assoc_get_args();
        args.setSrc(src);
        args.setAtype(atype);
        args.setDstIdSet(dstIdSet);
        args.setTLow(tLow);
        args.setTHigh(tHigh);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_get();
      }
    }

    public void assoc_get_local(int shardId, long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_get_local_call method_call = new assoc_get_local_call(shardId, src, atype, dstIdSet, tLow, tHigh, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_get_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long src;
      private long atype;
      private Set<Long> dstIdSet;
      private long tLow;
      private long tHigh;
      public assoc_get_local_call(int shardId, long src, long atype, Set<Long> dstIdSet, long tLow, long tHigh, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.src = src;
        this.atype = atype;
        this.dstIdSet = dstIdSet;
        this.tLow = tLow;
        this.tHigh = tHigh;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_get_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_get_local_args args = new assoc_get_local_args();
        args.setShardId(shardId);
        args.setSrc(src);
        args.setAtype(atype);
        args.setDstIdSet(dstIdSet);
        args.setTLow(tLow);
        args.setTHigh(tHigh);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_get_local();
      }
    }

    public void obj_add(List<String> attrs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obj_add_call method_call = new obj_add_call(attrs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obj_add_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> attrs;
      public obj_add_call(List<String> attrs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attrs = attrs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obj_add", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obj_add_args args = new obj_add_args();
        args.setAttrs(attrs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obj_add();
      }
    }

    public void obj_get(long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obj_get_call method_call = new obj_get_call(nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obj_get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nodeId;
      public obj_get_call(long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obj_get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obj_get_args args = new obj_get_args();
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obj_get();
      }
    }

    public void obj_get_local(int shardId, long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obj_get_local_call method_call = new obj_get_local_call(shardId, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obj_get_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long nodeId;
      public obj_get_local_call(int shardId, long nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obj_get_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obj_get_local_args args = new obj_get_local_args();
        args.setShardId(shardId);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obj_get_local();
      }
    }

    public void assoc_time_range(long src, long atype, long tLow, long tHigh, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_time_range_call method_call = new assoc_time_range_call(src, atype, tLow, tHigh, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_time_range_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long src;
      private long atype;
      private long tLow;
      private long tHigh;
      private int limit;
      public assoc_time_range_call(long src, long atype, long tLow, long tHigh, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.atype = atype;
        this.tLow = tLow;
        this.tHigh = tHigh;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_time_range", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_time_range_args args = new assoc_time_range_args();
        args.setSrc(src);
        args.setAtype(atype);
        args.setTLow(tLow);
        args.setTHigh(tHigh);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_time_range();
      }
    }

    public void assoc_time_range_local(int shardId, long src, long atype, long tLow, long tHigh, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_time_range_local_call method_call = new assoc_time_range_local_call(shardId, src, atype, tLow, tHigh, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_time_range_local_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shardId;
      private long src;
      private long atype;
      private long tLow;
      private long tHigh;
      private int limit;
      public assoc_time_range_local_call(int shardId, long src, long atype, long tLow, long tHigh, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shardId = shardId;
        this.src = src;
        this.atype = atype;
        this.tLow = tLow;
        this.tHigh = tHigh;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_time_range_local", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_time_range_local_args args = new assoc_time_range_local_args();
        args.setShardId(shardId);
        args.setSrc(src);
        args.setAtype(atype);
        args.setTLow(tLow);
        args.setTHigh(tHigh);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_time_range_local();
      }
    }

    public void assoc_add(long src, long atype, long dst, long time, String attr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assoc_add_call method_call = new assoc_add_call(src, atype, dst, time, attr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assoc_add_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long src;
      private long atype;
      private long dst;
      private long time;
      private String attr;
      public assoc_add_call(long src, long atype, long dst, long time, String attr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.atype = atype;
        this.dst = dst;
        this.time = time;
        this.attr = attr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assoc_add", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assoc_add_args args = new assoc_add_args();
        args.setSrc(src);
        args.setAtype(atype);
        args.setDst(dst);
        args.setTime(time);
        args.setAttr(attr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assoc_add();
      }
    }

    public void getNode(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNode_call method_call = new getNode_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public getNode_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNode_args args = new getNode_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNode();
      }
    }

    public void getNodeLocal(long shard_id, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNodeLocal_call method_call = new getNodeLocal_call(shard_id, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNodeLocal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shard_id;
      private long id;
      public getNodeLocal_call(long shard_id, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shard_id = shard_id;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNodeLocal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNodeLocal_args args = new getNodeLocal_args();
        args.setShard_id(shard_id);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNodeLocal();
      }
    }

    public void addNode(long id, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNode_call method_call = new addNode_call(id, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private String data;
      public addNode_call(long id, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNode_args args = new addNode_args();
        args.setId(id);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addNode();
      }
    }

    public void deleteNode(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteNode_call method_call = new deleteNode_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteNode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public deleteNode_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteNode_args args = new deleteNode_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteNode();
      }
    }

    public void deleteNodeLocal(long shard_id, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteNodeLocal_call method_call = new deleteNodeLocal_call(shard_id, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteNodeLocal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shard_id;
      private long id;
      public deleteNodeLocal_call(long shard_id, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shard_id = shard_id;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteNodeLocal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteNodeLocal_args args = new deleteNodeLocal_args();
        args.setShard_id(shard_id);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteNodeLocal();
      }
    }

    public void updateNode(long id, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNode_call method_call = new updateNode_call(id, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private String data;
      public updateNode_call(long id, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNode_args args = new updateNode_args();
        args.setId(id);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateNode();
      }
    }

    public void getLink(long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLink_call method_call = new getLink_call(id1, link_type, id2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id1;
      private long link_type;
      private long id2;
      public getLink_call(long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id1 = id1;
        this.link_type = link_type;
        this.id2 = id2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLink_args args = new getLink_args();
        args.setId1(id1);
        args.setLink_type(link_type);
        args.setId2(id2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftAssoc getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLink();
      }
    }

    public void getLinkLocal(long shard_id, long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLinkLocal_call method_call = new getLinkLocal_call(shard_id, id1, link_type, id2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLinkLocal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shard_id;
      private long id1;
      private long link_type;
      private long id2;
      public getLinkLocal_call(long shard_id, long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shard_id = shard_id;
        this.id1 = id1;
        this.link_type = link_type;
        this.id2 = id2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLinkLocal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLinkLocal_args args = new getLinkLocal_args();
        args.setShard_id(shard_id);
        args.setId1(id1);
        args.setLink_type(link_type);
        args.setId2(id2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftAssoc getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLinkLocal();
      }
    }

    public void addLink(ThriftAssoc link, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLink_call method_call = new addLink_call(link, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftAssoc link;
      public addLink_call(ThriftAssoc link, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.link = link;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLink_args args = new addLink_args();
        args.setLink(link);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLink();
      }
    }

    public void deleteLink(long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLink_call method_call = new deleteLink_call(id1, link_type, id2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id1;
      private long link_type;
      private long id2;
      public deleteLink_call(long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id1 = id1;
        this.link_type = link_type;
        this.id2 = id2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLink_args args = new deleteLink_args();
        args.setId1(id1);
        args.setLink_type(link_type);
        args.setId2(id2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLink();
      }
    }

    public void deleteLinkLocal(long shard_id, long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLinkLocal_call method_call = new deleteLinkLocal_call(shard_id, id1, link_type, id2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLinkLocal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shard_id;
      private long id1;
      private long link_type;
      private long id2;
      public deleteLinkLocal_call(long shard_id, long id1, long link_type, long id2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shard_id = shard_id;
        this.id1 = id1;
        this.link_type = link_type;
        this.id2 = id2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLinkLocal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLinkLocal_args args = new deleteLinkLocal_args();
        args.setShard_id(shard_id);
        args.setId1(id1);
        args.setLink_type(link_type);
        args.setId2(id2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLinkLocal();
      }
    }

    public void updateLink(ThriftAssoc link, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLink_call method_call = new updateLink_call(link, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftAssoc link;
      public updateLink_call(ThriftAssoc link, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.link = link;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLink_args args = new updateLink_args();
        args.setLink(link);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLink();
      }
    }

    public void getLinkList(long id1, long link_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLinkList_call method_call = new getLinkList_call(id1, link_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLinkList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id1;
      private long link_type;
      public getLinkList_call(long id1, long link_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id1 = id1;
        this.link_type = link_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLinkList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLinkList_args args = new getLinkList_args();
        args.setId1(id1);
        args.setLink_type(link_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLinkList();
      }
    }

    public void getLinkListLocal(long shard_id, long id1, long link_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLinkListLocal_call method_call = new getLinkListLocal_call(shard_id, id1, link_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLinkListLocal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shard_id;
      private long id1;
      private long link_type;
      public getLinkListLocal_call(long shard_id, long id1, long link_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shard_id = shard_id;
        this.id1 = id1;
        this.link_type = link_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLinkListLocal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLinkListLocal_args args = new getLinkListLocal_args();
        args.setShard_id(shard_id);
        args.setId1(id1);
        args.setLink_type(link_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLinkListLocal();
      }
    }

    public void getFilteredLinkList(long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFilteredLinkList_call method_call = new getFilteredLinkList_call(id1, link_type, min_timestamp, max_timestamp, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFilteredLinkList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id1;
      private long link_type;
      private long min_timestamp;
      private long max_timestamp;
      private long offset;
      private long limit;
      public getFilteredLinkList_call(long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id1 = id1;
        this.link_type = link_type;
        this.min_timestamp = min_timestamp;
        this.max_timestamp = max_timestamp;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredLinkList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFilteredLinkList_args args = new getFilteredLinkList_args();
        args.setId1(id1);
        args.setLink_type(link_type);
        args.setMin_timestamp(min_timestamp);
        args.setMax_timestamp(max_timestamp);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFilteredLinkList();
      }
    }

    public void getFilteredLinkListLocal(long shard_id, long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFilteredLinkListLocal_call method_call = new getFilteredLinkListLocal_call(shard_id, id1, link_type, min_timestamp, max_timestamp, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFilteredLinkListLocal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shard_id;
      private long id1;
      private long link_type;
      private long min_timestamp;
      private long max_timestamp;
      private long offset;
      private long limit;
      public getFilteredLinkListLocal_call(long shard_id, long id1, long link_type, long min_timestamp, long max_timestamp, long offset, long limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shard_id = shard_id;
        this.id1 = id1;
        this.link_type = link_type;
        this.min_timestamp = min_timestamp;
        this.max_timestamp = max_timestamp;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredLinkListLocal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFilteredLinkListLocal_args args = new getFilteredLinkListLocal_args();
        args.setShard_id(shard_id);
        args.setId1(id1);
        args.setLink_type(link_type);
        args.setMin_timestamp(min_timestamp);
        args.setMax_timestamp(max_timestamp);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftAssoc> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFilteredLinkListLocal();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("init", new init());
      processMap.put("connect_to_aggregators", new connect_to_aggregators());
      processMap.put("disconnect_from_aggregators", new disconnect_from_aggregators());
      processMap.put("shutdown", new shutdown());
      processMap.put("record_edge_updates", new record_edge_updates());
      processMap.put("record_node_append", new record_node_append());
      processMap.put("get_attribute", new get_attribute());
      processMap.put("get_attribute_local", new get_attribute_local());
      processMap.put("get_neighbors", new get_neighbors());
      processMap.put("get_neighbors_local", new get_neighbors_local());
      processMap.put("get_neighbors_atype", new get_neighbors_atype());
      processMap.put("get_neighbors_atype_local", new get_neighbors_atype_local());
      processMap.put("get_neighbors_attr", new get_neighbors_attr());
      processMap.put("get_neighbors_attr_local", new get_neighbors_attr_local());
      processMap.put("get_nodes", new get_nodes());
      processMap.put("get_nodes_local", new get_nodes_local());
      processMap.put("get_nodes2", new get_nodes2());
      processMap.put("get_nodes2_local", new get_nodes2_local());
      processMap.put("filter_nodes_local", new filter_nodes_local());
      processMap.put("get_edge_attrs", new get_edge_attrs());
      processMap.put("get_edge_attrs_local", new get_edge_attrs_local());
      processMap.put("assoc_range", new assoc_range());
      processMap.put("assoc_range_local", new assoc_range_local());
      processMap.put("assoc_count", new assoc_count());
      processMap.put("assoc_count_local", new assoc_count_local());
      processMap.put("assoc_get", new assoc_get());
      processMap.put("assoc_get_local", new assoc_get_local());
      processMap.put("obj_add", new obj_add());
      processMap.put("obj_get", new obj_get());
      processMap.put("obj_get_local", new obj_get_local());
      processMap.put("assoc_time_range", new assoc_time_range());
      processMap.put("assoc_time_range_local", new assoc_time_range_local());
      processMap.put("assoc_add", new assoc_add());
      processMap.put("getNode", new getNode());
      processMap.put("getNodeLocal", new getNodeLocal());
      processMap.put("addNode", new addNode());
      processMap.put("deleteNode", new deleteNode());
      processMap.put("deleteNodeLocal", new deleteNodeLocal());
      processMap.put("updateNode", new updateNode());
      processMap.put("getLink", new getLink());
      processMap.put("getLinkLocal", new getLinkLocal());
      processMap.put("addLink", new addLink());
      processMap.put("deleteLink", new deleteLink());
      processMap.put("deleteLinkLocal", new deleteLinkLocal());
      processMap.put("updateLink", new updateLink());
      processMap.put("getLinkList", new getLinkList());
      processMap.put("getLinkListLocal", new getLinkListLocal());
      processMap.put("getFilteredLinkList", new getFilteredLinkList());
      processMap.put("getFilteredLinkListLocal", new getFilteredLinkListLocal());
      return processMap;
    }

    public static class init<I extends Iface> extends org.apache.thrift.ProcessFunction<I, init_args> {
      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public init_result getResult(I iface, init_args args) throws org.apache.thrift.TException {
        init_result result = new init_result();
        result.success = iface.init();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class connect_to_aggregators<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connect_to_aggregators_args> {
      public connect_to_aggregators() {
        super("connect_to_aggregators");
      }

      public connect_to_aggregators_args getEmptyArgsInstance() {
        return new connect_to_aggregators_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connect_to_aggregators_result getResult(I iface, connect_to_aggregators_args args) throws org.apache.thrift.TException {
        connect_to_aggregators_result result = new connect_to_aggregators_result();
        result.success = iface.connect_to_aggregators();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class disconnect_from_aggregators<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disconnect_from_aggregators_args> {
      public disconnect_from_aggregators() {
        super("disconnect_from_aggregators");
      }

      public disconnect_from_aggregators_args getEmptyArgsInstance() {
        return new disconnect_from_aggregators_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disconnect_from_aggregators_result getResult(I iface, disconnect_from_aggregators_args args) throws org.apache.thrift.TException {
        disconnect_from_aggregators_result result = new disconnect_from_aggregators_result();
        iface.disconnect_from_aggregators();
        return result;
      }
    }

    public static class shutdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdown_args> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shutdown_result getResult(I iface, shutdown_args args) throws org.apache.thrift.TException {
        shutdown_result result = new shutdown_result();
        iface.shutdown();
        return result;
      }
    }

    public static class record_edge_updates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, record_edge_updates_args> {
      public record_edge_updates() {
        super("record_edge_updates");
      }

      public record_edge_updates_args getEmptyArgsInstance() {
        return new record_edge_updates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public record_edge_updates_result getResult(I iface, record_edge_updates_args args) throws org.apache.thrift.TException {
        record_edge_updates_result result = new record_edge_updates_result();
        iface.record_edge_updates(args.next_shard, args.local_shard, args.updates);
        return result;
      }
    }

    public static class record_node_append<I extends Iface> extends org.apache.thrift.ProcessFunction<I, record_node_append_args> {
      public record_node_append() {
        super("record_node_append");
      }

      public record_node_append_args getEmptyArgsInstance() {
        return new record_node_append_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public record_node_append_result getResult(I iface, record_node_append_args args) throws org.apache.thrift.TException {
        record_node_append_result result = new record_node_append_result();
        iface.record_node_append(args.next_shard, args.local_shard, args.obj);
        return result;
      }
    }

    public static class get_attribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_attribute_args> {
      public get_attribute() {
        super("get_attribute");
      }

      public get_attribute_args getEmptyArgsInstance() {
        return new get_attribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_attribute_result getResult(I iface, get_attribute_args args) throws org.apache.thrift.TException {
        get_attribute_result result = new get_attribute_result();
        result.success = iface.get_attribute(args.nodeId, args.attrId);
        return result;
      }
    }

    public static class get_attribute_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_attribute_local_args> {
      public get_attribute_local() {
        super("get_attribute_local");
      }

      public get_attribute_local_args getEmptyArgsInstance() {
        return new get_attribute_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_attribute_local_result getResult(I iface, get_attribute_local_args args) throws org.apache.thrift.TException {
        get_attribute_local_result result = new get_attribute_local_result();
        result.success = iface.get_attribute_local(args.shardId, args.nodeId, args.attrId);
        return result;
      }
    }

    public static class get_neighbors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_neighbors_args> {
      public get_neighbors() {
        super("get_neighbors");
      }

      public get_neighbors_args getEmptyArgsInstance() {
        return new get_neighbors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_neighbors_result getResult(I iface, get_neighbors_args args) throws org.apache.thrift.TException {
        get_neighbors_result result = new get_neighbors_result();
        result.success = iface.get_neighbors(args.nodeId);
        return result;
      }
    }

    public static class get_neighbors_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_neighbors_local_args> {
      public get_neighbors_local() {
        super("get_neighbors_local");
      }

      public get_neighbors_local_args getEmptyArgsInstance() {
        return new get_neighbors_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_neighbors_local_result getResult(I iface, get_neighbors_local_args args) throws org.apache.thrift.TException {
        get_neighbors_local_result result = new get_neighbors_local_result();
        result.success = iface.get_neighbors_local(args.shardId, args.nodeId);
        return result;
      }
    }

    public static class get_neighbors_atype<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_neighbors_atype_args> {
      public get_neighbors_atype() {
        super("get_neighbors_atype");
      }

      public get_neighbors_atype_args getEmptyArgsInstance() {
        return new get_neighbors_atype_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_neighbors_atype_result getResult(I iface, get_neighbors_atype_args args) throws org.apache.thrift.TException {
        get_neighbors_atype_result result = new get_neighbors_atype_result();
        result.success = iface.get_neighbors_atype(args.nodeId, args.atype);
        return result;
      }
    }

    public static class get_neighbors_atype_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_neighbors_atype_local_args> {
      public get_neighbors_atype_local() {
        super("get_neighbors_atype_local");
      }

      public get_neighbors_atype_local_args getEmptyArgsInstance() {
        return new get_neighbors_atype_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_neighbors_atype_local_result getResult(I iface, get_neighbors_atype_local_args args) throws org.apache.thrift.TException {
        get_neighbors_atype_local_result result = new get_neighbors_atype_local_result();
        result.success = iface.get_neighbors_atype_local(args.shardId, args.nodeId, args.atype);
        return result;
      }
    }

    public static class get_neighbors_attr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_neighbors_attr_args> {
      public get_neighbors_attr() {
        super("get_neighbors_attr");
      }

      public get_neighbors_attr_args getEmptyArgsInstance() {
        return new get_neighbors_attr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_neighbors_attr_result getResult(I iface, get_neighbors_attr_args args) throws org.apache.thrift.TException {
        get_neighbors_attr_result result = new get_neighbors_attr_result();
        result.success = iface.get_neighbors_attr(args.nodeId, args.attrId, args.attrKey);
        return result;
      }
    }

    public static class get_neighbors_attr_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_neighbors_attr_local_args> {
      public get_neighbors_attr_local() {
        super("get_neighbors_attr_local");
      }

      public get_neighbors_attr_local_args getEmptyArgsInstance() {
        return new get_neighbors_attr_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_neighbors_attr_local_result getResult(I iface, get_neighbors_attr_local_args args) throws org.apache.thrift.TException {
        get_neighbors_attr_local_result result = new get_neighbors_attr_local_result();
        result.success = iface.get_neighbors_attr_local(args.shardId, args.nodeId, args.attrId, args.attrKey);
        return result;
      }
    }

    public static class get_nodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_nodes_args> {
      public get_nodes() {
        super("get_nodes");
      }

      public get_nodes_args getEmptyArgsInstance() {
        return new get_nodes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_nodes_result getResult(I iface, get_nodes_args args) throws org.apache.thrift.TException {
        get_nodes_result result = new get_nodes_result();
        result.success = iface.get_nodes(args.attrId, args.attrKey);
        return result;
      }
    }

    public static class get_nodes_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_nodes_local_args> {
      public get_nodes_local() {
        super("get_nodes_local");
      }

      public get_nodes_local_args getEmptyArgsInstance() {
        return new get_nodes_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_nodes_local_result getResult(I iface, get_nodes_local_args args) throws org.apache.thrift.TException {
        get_nodes_local_result result = new get_nodes_local_result();
        result.success = iface.get_nodes_local(args.attrId, args.attrKey);
        return result;
      }
    }

    public static class get_nodes2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_nodes2_args> {
      public get_nodes2() {
        super("get_nodes2");
      }

      public get_nodes2_args getEmptyArgsInstance() {
        return new get_nodes2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_nodes2_result getResult(I iface, get_nodes2_args args) throws org.apache.thrift.TException {
        get_nodes2_result result = new get_nodes2_result();
        result.success = iface.get_nodes2(args.attrId1, args.attrKey1, args.attrId2, args.attrKey2);
        return result;
      }
    }

    public static class get_nodes2_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_nodes2_local_args> {
      public get_nodes2_local() {
        super("get_nodes2_local");
      }

      public get_nodes2_local_args getEmptyArgsInstance() {
        return new get_nodes2_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_nodes2_local_result getResult(I iface, get_nodes2_local_args args) throws org.apache.thrift.TException {
        get_nodes2_local_result result = new get_nodes2_local_result();
        result.success = iface.get_nodes2_local(args.attrId1, args.attrKey1, args.attrId2, args.attrKey2);
        return result;
      }
    }

    public static class filter_nodes_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, filter_nodes_local_args> {
      public filter_nodes_local() {
        super("filter_nodes_local");
      }

      public filter_nodes_local_args getEmptyArgsInstance() {
        return new filter_nodes_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public filter_nodes_local_result getResult(I iface, filter_nodes_local_args args) throws org.apache.thrift.TException {
        filter_nodes_local_result result = new filter_nodes_local_result();
        result.success = iface.filter_nodes_local(args.nodeIds, args.attrId, args.attrKey);
        return result;
      }
    }

    public static class get_edge_attrs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_edge_attrs_args> {
      public get_edge_attrs() {
        super("get_edge_attrs");
      }

      public get_edge_attrs_args getEmptyArgsInstance() {
        return new get_edge_attrs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_edge_attrs_result getResult(I iface, get_edge_attrs_args args) throws org.apache.thrift.TException {
        get_edge_attrs_result result = new get_edge_attrs_result();
        result.success = iface.get_edge_attrs(args.nodeId, args.atype);
        return result;
      }
    }

    public static class get_edge_attrs_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_edge_attrs_local_args> {
      public get_edge_attrs_local() {
        super("get_edge_attrs_local");
      }

      public get_edge_attrs_local_args getEmptyArgsInstance() {
        return new get_edge_attrs_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_edge_attrs_local_result getResult(I iface, get_edge_attrs_local_args args) throws org.apache.thrift.TException {
        get_edge_attrs_local_result result = new get_edge_attrs_local_result();
        result.success = iface.get_edge_attrs_local(args.shardId, args.nodeId, args.atype);
        return result;
      }
    }

    public static class assoc_range<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_range_args> {
      public assoc_range() {
        super("assoc_range");
      }

      public assoc_range_args getEmptyArgsInstance() {
        return new assoc_range_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_range_result getResult(I iface, assoc_range_args args) throws org.apache.thrift.TException {
        assoc_range_result result = new assoc_range_result();
        result.success = iface.assoc_range(args.src, args.atype, args.off, args.len);
        return result;
      }
    }

    public static class assoc_range_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_range_local_args> {
      public assoc_range_local() {
        super("assoc_range_local");
      }

      public assoc_range_local_args getEmptyArgsInstance() {
        return new assoc_range_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_range_local_result getResult(I iface, assoc_range_local_args args) throws org.apache.thrift.TException {
        assoc_range_local_result result = new assoc_range_local_result();
        result.success = iface.assoc_range_local(args.shardId, args.src, args.atype, args.off, args.len);
        return result;
      }
    }

    public static class assoc_count<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_count_args> {
      public assoc_count() {
        super("assoc_count");
      }

      public assoc_count_args getEmptyArgsInstance() {
        return new assoc_count_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_count_result getResult(I iface, assoc_count_args args) throws org.apache.thrift.TException {
        assoc_count_result result = new assoc_count_result();
        result.success = iface.assoc_count(args.src, args.atype);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class assoc_count_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_count_local_args> {
      public assoc_count_local() {
        super("assoc_count_local");
      }

      public assoc_count_local_args getEmptyArgsInstance() {
        return new assoc_count_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_count_local_result getResult(I iface, assoc_count_local_args args) throws org.apache.thrift.TException {
        assoc_count_local_result result = new assoc_count_local_result();
        result.success = iface.assoc_count_local(args.shardId, args.src, args.atype);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class assoc_get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_get_args> {
      public assoc_get() {
        super("assoc_get");
      }

      public assoc_get_args getEmptyArgsInstance() {
        return new assoc_get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_get_result getResult(I iface, assoc_get_args args) throws org.apache.thrift.TException {
        assoc_get_result result = new assoc_get_result();
        result.success = iface.assoc_get(args.src, args.atype, args.dstIdSet, args.tLow, args.tHigh);
        return result;
      }
    }

    public static class assoc_get_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_get_local_args> {
      public assoc_get_local() {
        super("assoc_get_local");
      }

      public assoc_get_local_args getEmptyArgsInstance() {
        return new assoc_get_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_get_local_result getResult(I iface, assoc_get_local_args args) throws org.apache.thrift.TException {
        assoc_get_local_result result = new assoc_get_local_result();
        result.success = iface.assoc_get_local(args.shardId, args.src, args.atype, args.dstIdSet, args.tLow, args.tHigh);
        return result;
      }
    }

    public static class obj_add<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obj_add_args> {
      public obj_add() {
        super("obj_add");
      }

      public obj_add_args getEmptyArgsInstance() {
        return new obj_add_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obj_add_result getResult(I iface, obj_add_args args) throws org.apache.thrift.TException {
        obj_add_result result = new obj_add_result();
        result.success = iface.obj_add(args.attrs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class obj_get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obj_get_args> {
      public obj_get() {
        super("obj_get");
      }

      public obj_get_args getEmptyArgsInstance() {
        return new obj_get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obj_get_result getResult(I iface, obj_get_args args) throws org.apache.thrift.TException {
        obj_get_result result = new obj_get_result();
        result.success = iface.obj_get(args.nodeId);
        return result;
      }
    }

    public static class obj_get_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obj_get_local_args> {
      public obj_get_local() {
        super("obj_get_local");
      }

      public obj_get_local_args getEmptyArgsInstance() {
        return new obj_get_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obj_get_local_result getResult(I iface, obj_get_local_args args) throws org.apache.thrift.TException {
        obj_get_local_result result = new obj_get_local_result();
        result.success = iface.obj_get_local(args.shardId, args.nodeId);
        return result;
      }
    }

    public static class assoc_time_range<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_time_range_args> {
      public assoc_time_range() {
        super("assoc_time_range");
      }

      public assoc_time_range_args getEmptyArgsInstance() {
        return new assoc_time_range_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_time_range_result getResult(I iface, assoc_time_range_args args) throws org.apache.thrift.TException {
        assoc_time_range_result result = new assoc_time_range_result();
        result.success = iface.assoc_time_range(args.src, args.atype, args.tLow, args.tHigh, args.limit);
        return result;
      }
    }

    public static class assoc_time_range_local<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_time_range_local_args> {
      public assoc_time_range_local() {
        super("assoc_time_range_local");
      }

      public assoc_time_range_local_args getEmptyArgsInstance() {
        return new assoc_time_range_local_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_time_range_local_result getResult(I iface, assoc_time_range_local_args args) throws org.apache.thrift.TException {
        assoc_time_range_local_result result = new assoc_time_range_local_result();
        result.success = iface.assoc_time_range_local(args.shardId, args.src, args.atype, args.tLow, args.tHigh, args.limit);
        return result;
      }
    }

    public static class assoc_add<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assoc_add_args> {
      public assoc_add() {
        super("assoc_add");
      }

      public assoc_add_args getEmptyArgsInstance() {
        return new assoc_add_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assoc_add_result getResult(I iface, assoc_add_args args) throws org.apache.thrift.TException {
        assoc_add_result result = new assoc_add_result();
        result.success = iface.assoc_add(args.src, args.atype, args.dst, args.time, args.attr);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNode_args> {
      public getNode() {
        super("getNode");
      }

      public getNode_args getEmptyArgsInstance() {
        return new getNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNode_result getResult(I iface, getNode_args args) throws org.apache.thrift.TException {
        getNode_result result = new getNode_result();
        result.success = iface.getNode(args.id);
        return result;
      }
    }

    public static class getNodeLocal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNodeLocal_args> {
      public getNodeLocal() {
        super("getNodeLocal");
      }

      public getNodeLocal_args getEmptyArgsInstance() {
        return new getNodeLocal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNodeLocal_result getResult(I iface, getNodeLocal_args args) throws org.apache.thrift.TException {
        getNodeLocal_result result = new getNodeLocal_result();
        result.success = iface.getNodeLocal(args.shard_id, args.id);
        return result;
      }
    }

    public static class addNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNode_args> {
      public addNode() {
        super("addNode");
      }

      public addNode_args getEmptyArgsInstance() {
        return new addNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addNode_result getResult(I iface, addNode_args args) throws org.apache.thrift.TException {
        addNode_result result = new addNode_result();
        result.success = iface.addNode(args.id, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteNode_args> {
      public deleteNode() {
        super("deleteNode");
      }

      public deleteNode_args getEmptyArgsInstance() {
        return new deleteNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteNode_result getResult(I iface, deleteNode_args args) throws org.apache.thrift.TException {
        deleteNode_result result = new deleteNode_result();
        result.success = iface.deleteNode(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteNodeLocal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteNodeLocal_args> {
      public deleteNodeLocal() {
        super("deleteNodeLocal");
      }

      public deleteNodeLocal_args getEmptyArgsInstance() {
        return new deleteNodeLocal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteNodeLocal_result getResult(I iface, deleteNodeLocal_args args) throws org.apache.thrift.TException {
        deleteNodeLocal_result result = new deleteNodeLocal_result();
        result.success = iface.deleteNodeLocal(args.shard_id, args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNode_args> {
      public updateNode() {
        super("updateNode");
      }

      public updateNode_args getEmptyArgsInstance() {
        return new updateNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateNode_result getResult(I iface, updateNode_args args) throws org.apache.thrift.TException {
        updateNode_result result = new updateNode_result();
        result.success = iface.updateNode(args.id, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLink_args> {
      public getLink() {
        super("getLink");
      }

      public getLink_args getEmptyArgsInstance() {
        return new getLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLink_result getResult(I iface, getLink_args args) throws org.apache.thrift.TException {
        getLink_result result = new getLink_result();
        result.success = iface.getLink(args.id1, args.link_type, args.id2);
        return result;
      }
    }

    public static class getLinkLocal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLinkLocal_args> {
      public getLinkLocal() {
        super("getLinkLocal");
      }

      public getLinkLocal_args getEmptyArgsInstance() {
        return new getLinkLocal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLinkLocal_result getResult(I iface, getLinkLocal_args args) throws org.apache.thrift.TException {
        getLinkLocal_result result = new getLinkLocal_result();
        result.success = iface.getLinkLocal(args.shard_id, args.id1, args.link_type, args.id2);
        return result;
      }
    }

    public static class addLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLink_args> {
      public addLink() {
        super("addLink");
      }

      public addLink_args getEmptyArgsInstance() {
        return new addLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLink_result getResult(I iface, addLink_args args) throws org.apache.thrift.TException {
        addLink_result result = new addLink_result();
        result.success = iface.addLink(args.link);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLink_args> {
      public deleteLink() {
        super("deleteLink");
      }

      public deleteLink_args getEmptyArgsInstance() {
        return new deleteLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLink_result getResult(I iface, deleteLink_args args) throws org.apache.thrift.TException {
        deleteLink_result result = new deleteLink_result();
        result.success = iface.deleteLink(args.id1, args.link_type, args.id2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteLinkLocal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLinkLocal_args> {
      public deleteLinkLocal() {
        super("deleteLinkLocal");
      }

      public deleteLinkLocal_args getEmptyArgsInstance() {
        return new deleteLinkLocal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLinkLocal_result getResult(I iface, deleteLinkLocal_args args) throws org.apache.thrift.TException {
        deleteLinkLocal_result result = new deleteLinkLocal_result();
        result.success = iface.deleteLinkLocal(args.shard_id, args.id1, args.link_type, args.id2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLink_args> {
      public updateLink() {
        super("updateLink");
      }

      public updateLink_args getEmptyArgsInstance() {
        return new updateLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLink_result getResult(I iface, updateLink_args args) throws org.apache.thrift.TException {
        updateLink_result result = new updateLink_result();
        result.success = iface.updateLink(args.link);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLinkList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLinkList_args> {
      public getLinkList() {
        super("getLinkList");
      }

      public getLinkList_args getEmptyArgsInstance() {
        return new getLinkList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLinkList_result getResult(I iface, getLinkList_args args) throws org.apache.thrift.TException {
        getLinkList_result result = new getLinkList_result();
        result.success = iface.getLinkList(args.id1, args.link_type);
        return result;
      }
    }

    public static class getLinkListLocal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLinkListLocal_args> {
      public getLinkListLocal() {
        super("getLinkListLocal");
      }

      public getLinkListLocal_args getEmptyArgsInstance() {
        return new getLinkListLocal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLinkListLocal_result getResult(I iface, getLinkListLocal_args args) throws org.apache.thrift.TException {
        getLinkListLocal_result result = new getLinkListLocal_result();
        result.success = iface.getLinkListLocal(args.shard_id, args.id1, args.link_type);
        return result;
      }
    }

    public static class getFilteredLinkList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFilteredLinkList_args> {
      public getFilteredLinkList() {
        super("getFilteredLinkList");
      }

      public getFilteredLinkList_args getEmptyArgsInstance() {
        return new getFilteredLinkList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFilteredLinkList_result getResult(I iface, getFilteredLinkList_args args) throws org.apache.thrift.TException {
        getFilteredLinkList_result result = new getFilteredLinkList_result();
        result.success = iface.getFilteredLinkList(args.id1, args.link_type, args.min_timestamp, args.max_timestamp, args.offset, args.limit);
        return result;
      }
    }

    public static class getFilteredLinkListLocal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFilteredLinkListLocal_args> {
      public getFilteredLinkListLocal() {
        super("getFilteredLinkListLocal");
      }

      public getFilteredLinkListLocal_args getEmptyArgsInstance() {
        return new getFilteredLinkListLocal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFilteredLinkListLocal_result getResult(I iface, getFilteredLinkListLocal_args args) throws org.apache.thrift.TException {
        getFilteredLinkListLocal_result result = new getFilteredLinkListLocal_result();
        result.success = iface.getFilteredLinkListLocal(args.shard_id, args.id1, args.link_type, args.min_timestamp, args.max_timestamp, args.offset, args.limit);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("init", new init());
      processMap.put("connect_to_aggregators", new connect_to_aggregators());
      processMap.put("disconnect_from_aggregators", new disconnect_from_aggregators());
      processMap.put("shutdown", new shutdown());
      processMap.put("record_edge_updates", new record_edge_updates());
      processMap.put("record_node_append", new record_node_append());
      processMap.put("get_attribute", new get_attribute());
      processMap.put("get_attribute_local", new get_attribute_local());
      processMap.put("get_neighbors", new get_neighbors());
      processMap.put("get_neighbors_local", new get_neighbors_local());
      processMap.put("get_neighbors_atype", new get_neighbors_atype());
      processMap.put("get_neighbors_atype_local", new get_neighbors_atype_local());
      processMap.put("get_neighbors_attr", new get_neighbors_attr());
      processMap.put("get_neighbors_attr_local", new get_neighbors_attr_local());
      processMap.put("get_nodes", new get_nodes());
      processMap.put("get_nodes_local", new get_nodes_local());
      processMap.put("get_nodes2", new get_nodes2());
      processMap.put("get_nodes2_local", new get_nodes2_local());
      processMap.put("filter_nodes_local", new filter_nodes_local());
      processMap.put("get_edge_attrs", new get_edge_attrs());
      processMap.put("get_edge_attrs_local", new get_edge_attrs_local());
      processMap.put("assoc_range", new assoc_range());
      processMap.put("assoc_range_local", new assoc_range_local());
      processMap.put("assoc_count", new assoc_count());
      processMap.put("assoc_count_local", new assoc_count_local());
      processMap.put("assoc_get", new assoc_get());
      processMap.put("assoc_get_local", new assoc_get_local());
      processMap.put("obj_add", new obj_add());
      processMap.put("obj_get", new obj_get());
      processMap.put("obj_get_local", new obj_get_local());
      processMap.put("assoc_time_range", new assoc_time_range());
      processMap.put("assoc_time_range_local", new assoc_time_range_local());
      processMap.put("assoc_add", new assoc_add());
      processMap.put("getNode", new getNode());
      processMap.put("getNodeLocal", new getNodeLocal());
      processMap.put("addNode", new addNode());
      processMap.put("deleteNode", new deleteNode());
      processMap.put("deleteNodeLocal", new deleteNodeLocal());
      processMap.put("updateNode", new updateNode());
      processMap.put("getLink", new getLink());
      processMap.put("getLinkLocal", new getLinkLocal());
      processMap.put("addLink", new addLink());
      processMap.put("deleteLink", new deleteLink());
      processMap.put("deleteLinkLocal", new deleteLinkLocal());
      processMap.put("updateLink", new updateLink());
      processMap.put("getLinkList", new getLinkList());
      processMap.put("getLinkListLocal", new getLinkListLocal());
      processMap.put("getFilteredLinkList", new getFilteredLinkList());
      processMap.put("getFilteredLinkListLocal", new getFilteredLinkListLocal());
      return processMap;
    }

    public static class init<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, init_args, Integer> {
      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            init_result result = new init_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            init_result result = new init_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, init_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.init(resultHandler);
      }
    }

    public static class connect_to_aggregators<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connect_to_aggregators_args, Integer> {
      public connect_to_aggregators() {
        super("connect_to_aggregators");
      }

      public connect_to_aggregators_args getEmptyArgsInstance() {
        return new connect_to_aggregators_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            connect_to_aggregators_result result = new connect_to_aggregators_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connect_to_aggregators_result result = new connect_to_aggregators_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connect_to_aggregators_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.connect_to_aggregators(resultHandler);
      }
    }

    public static class disconnect_from_aggregators<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disconnect_from_aggregators_args, Void> {
      public disconnect_from_aggregators() {
        super("disconnect_from_aggregators");
      }

      public disconnect_from_aggregators_args getEmptyArgsInstance() {
        return new disconnect_from_aggregators_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            disconnect_from_aggregators_result result = new disconnect_from_aggregators_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disconnect_from_aggregators_result result = new disconnect_from_aggregators_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disconnect_from_aggregators_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.disconnect_from_aggregators(resultHandler);
      }
    }

    public static class shutdown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdown_args, Void> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            shutdown_result result = new shutdown_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            shutdown_result result = new shutdown_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdown_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.shutdown(resultHandler);
      }
    }

    public static class record_edge_updates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, record_edge_updates_args, Void> {
      public record_edge_updates() {
        super("record_edge_updates");
      }

      public record_edge_updates_args getEmptyArgsInstance() {
        return new record_edge_updates_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            record_edge_updates_result result = new record_edge_updates_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            record_edge_updates_result result = new record_edge_updates_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, record_edge_updates_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.record_edge_updates(args.next_shard, args.local_shard, args.updates,resultHandler);
      }
    }

    public static class record_node_append<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, record_node_append_args, Void> {
      public record_node_append() {
        super("record_node_append");
      }

      public record_node_append_args getEmptyArgsInstance() {
        return new record_node_append_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            record_node_append_result result = new record_node_append_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            record_node_append_result result = new record_node_append_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, record_node_append_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.record_node_append(args.next_shard, args.local_shard, args.obj,resultHandler);
      }
    }

    public static class get_attribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_attribute_args, String> {
      public get_attribute() {
        super("get_attribute");
      }

      public get_attribute_args getEmptyArgsInstance() {
        return new get_attribute_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_attribute_result result = new get_attribute_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_attribute_result result = new get_attribute_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_attribute_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_attribute(args.nodeId, args.attrId,resultHandler);
      }
    }

    public static class get_attribute_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_attribute_local_args, String> {
      public get_attribute_local() {
        super("get_attribute_local");
      }

      public get_attribute_local_args getEmptyArgsInstance() {
        return new get_attribute_local_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_attribute_local_result result = new get_attribute_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_attribute_local_result result = new get_attribute_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_attribute_local_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_attribute_local(args.shardId, args.nodeId, args.attrId,resultHandler);
      }
    }

    public static class get_neighbors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_neighbors_args, List<Long>> {
      public get_neighbors() {
        super("get_neighbors");
      }

      public get_neighbors_args getEmptyArgsInstance() {
        return new get_neighbors_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            get_neighbors_result result = new get_neighbors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_neighbors_result result = new get_neighbors_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_neighbors_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.get_neighbors(args.nodeId,resultHandler);
      }
    }

    public static class get_neighbors_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_neighbors_local_args, List<Long>> {
      public get_neighbors_local() {
        super("get_neighbors_local");
      }

      public get_neighbors_local_args getEmptyArgsInstance() {
        return new get_neighbors_local_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            get_neighbors_local_result result = new get_neighbors_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_neighbors_local_result result = new get_neighbors_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_neighbors_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.get_neighbors_local(args.shardId, args.nodeId,resultHandler);
      }
    }

    public static class get_neighbors_atype<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_neighbors_atype_args, List<Long>> {
      public get_neighbors_atype() {
        super("get_neighbors_atype");
      }

      public get_neighbors_atype_args getEmptyArgsInstance() {
        return new get_neighbors_atype_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            get_neighbors_atype_result result = new get_neighbors_atype_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_neighbors_atype_result result = new get_neighbors_atype_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_neighbors_atype_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.get_neighbors_atype(args.nodeId, args.atype,resultHandler);
      }
    }

    public static class get_neighbors_atype_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_neighbors_atype_local_args, List<Long>> {
      public get_neighbors_atype_local() {
        super("get_neighbors_atype_local");
      }

      public get_neighbors_atype_local_args getEmptyArgsInstance() {
        return new get_neighbors_atype_local_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            get_neighbors_atype_local_result result = new get_neighbors_atype_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_neighbors_atype_local_result result = new get_neighbors_atype_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_neighbors_atype_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.get_neighbors_atype_local(args.shardId, args.nodeId, args.atype,resultHandler);
      }
    }

    public static class get_neighbors_attr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_neighbors_attr_args, List<Long>> {
      public get_neighbors_attr() {
        super("get_neighbors_attr");
      }

      public get_neighbors_attr_args getEmptyArgsInstance() {
        return new get_neighbors_attr_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            get_neighbors_attr_result result = new get_neighbors_attr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_neighbors_attr_result result = new get_neighbors_attr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_neighbors_attr_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.get_neighbors_attr(args.nodeId, args.attrId, args.attrKey,resultHandler);
      }
    }

    public static class get_neighbors_attr_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_neighbors_attr_local_args, List<Long>> {
      public get_neighbors_attr_local() {
        super("get_neighbors_attr_local");
      }

      public get_neighbors_attr_local_args getEmptyArgsInstance() {
        return new get_neighbors_attr_local_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            get_neighbors_attr_local_result result = new get_neighbors_attr_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_neighbors_attr_local_result result = new get_neighbors_attr_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_neighbors_attr_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.get_neighbors_attr_local(args.shardId, args.nodeId, args.attrId, args.attrKey,resultHandler);
      }
    }

    public static class get_nodes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_nodes_args, Set<Long>> {
      public get_nodes() {
        super("get_nodes");
      }

      public get_nodes_args getEmptyArgsInstance() {
        return new get_nodes_args();
      }

      public AsyncMethodCallback<Set<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Long>>() { 
          public void onComplete(Set<Long> o) {
            get_nodes_result result = new get_nodes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_nodes_result result = new get_nodes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_nodes_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Long>> resultHandler) throws TException {
        iface.get_nodes(args.attrId, args.attrKey,resultHandler);
      }
    }

    public static class get_nodes_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_nodes_local_args, Set<Long>> {
      public get_nodes_local() {
        super("get_nodes_local");
      }

      public get_nodes_local_args getEmptyArgsInstance() {
        return new get_nodes_local_args();
      }

      public AsyncMethodCallback<Set<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Long>>() { 
          public void onComplete(Set<Long> o) {
            get_nodes_local_result result = new get_nodes_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_nodes_local_result result = new get_nodes_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_nodes_local_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Long>> resultHandler) throws TException {
        iface.get_nodes_local(args.attrId, args.attrKey,resultHandler);
      }
    }

    public static class get_nodes2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_nodes2_args, Set<Long>> {
      public get_nodes2() {
        super("get_nodes2");
      }

      public get_nodes2_args getEmptyArgsInstance() {
        return new get_nodes2_args();
      }

      public AsyncMethodCallback<Set<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Long>>() { 
          public void onComplete(Set<Long> o) {
            get_nodes2_result result = new get_nodes2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_nodes2_result result = new get_nodes2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_nodes2_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Long>> resultHandler) throws TException {
        iface.get_nodes2(args.attrId1, args.attrKey1, args.attrId2, args.attrKey2,resultHandler);
      }
    }

    public static class get_nodes2_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_nodes2_local_args, Set<Long>> {
      public get_nodes2_local() {
        super("get_nodes2_local");
      }

      public get_nodes2_local_args getEmptyArgsInstance() {
        return new get_nodes2_local_args();
      }

      public AsyncMethodCallback<Set<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Long>>() { 
          public void onComplete(Set<Long> o) {
            get_nodes2_local_result result = new get_nodes2_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_nodes2_local_result result = new get_nodes2_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_nodes2_local_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Long>> resultHandler) throws TException {
        iface.get_nodes2_local(args.attrId1, args.attrKey1, args.attrId2, args.attrKey2,resultHandler);
      }
    }

    public static class filter_nodes_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, filter_nodes_local_args, List<Long>> {
      public filter_nodes_local() {
        super("filter_nodes_local");
      }

      public filter_nodes_local_args getEmptyArgsInstance() {
        return new filter_nodes_local_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            filter_nodes_local_result result = new filter_nodes_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            filter_nodes_local_result result = new filter_nodes_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, filter_nodes_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.filter_nodes_local(args.nodeIds, args.attrId, args.attrKey,resultHandler);
      }
    }

    public static class get_edge_attrs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_edge_attrs_args, List<String>> {
      public get_edge_attrs() {
        super("get_edge_attrs");
      }

      public get_edge_attrs_args getEmptyArgsInstance() {
        return new get_edge_attrs_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_edge_attrs_result result = new get_edge_attrs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_edge_attrs_result result = new get_edge_attrs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_edge_attrs_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_edge_attrs(args.nodeId, args.atype,resultHandler);
      }
    }

    public static class get_edge_attrs_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_edge_attrs_local_args, List<String>> {
      public get_edge_attrs_local() {
        super("get_edge_attrs_local");
      }

      public get_edge_attrs_local_args getEmptyArgsInstance() {
        return new get_edge_attrs_local_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_edge_attrs_local_result result = new get_edge_attrs_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_edge_attrs_local_result result = new get_edge_attrs_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_edge_attrs_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_edge_attrs_local(args.shardId, args.nodeId, args.atype,resultHandler);
      }
    }

    public static class assoc_range<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_range_args, List<ThriftAssoc>> {
      public assoc_range() {
        super("assoc_range");
      }

      public assoc_range_args getEmptyArgsInstance() {
        return new assoc_range_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            assoc_range_result result = new assoc_range_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_range_result result = new assoc_range_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_range_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.assoc_range(args.src, args.atype, args.off, args.len,resultHandler);
      }
    }

    public static class assoc_range_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_range_local_args, List<ThriftAssoc>> {
      public assoc_range_local() {
        super("assoc_range_local");
      }

      public assoc_range_local_args getEmptyArgsInstance() {
        return new assoc_range_local_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            assoc_range_local_result result = new assoc_range_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_range_local_result result = new assoc_range_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_range_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.assoc_range_local(args.shardId, args.src, args.atype, args.off, args.len,resultHandler);
      }
    }

    public static class assoc_count<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_count_args, Long> {
      public assoc_count() {
        super("assoc_count");
      }

      public assoc_count_args getEmptyArgsInstance() {
        return new assoc_count_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            assoc_count_result result = new assoc_count_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_count_result result = new assoc_count_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_count_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.assoc_count(args.src, args.atype,resultHandler);
      }
    }

    public static class assoc_count_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_count_local_args, Long> {
      public assoc_count_local() {
        super("assoc_count_local");
      }

      public assoc_count_local_args getEmptyArgsInstance() {
        return new assoc_count_local_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            assoc_count_local_result result = new assoc_count_local_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_count_local_result result = new assoc_count_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_count_local_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.assoc_count_local(args.shardId, args.src, args.atype,resultHandler);
      }
    }

    public static class assoc_get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_get_args, List<ThriftAssoc>> {
      public assoc_get() {
        super("assoc_get");
      }

      public assoc_get_args getEmptyArgsInstance() {
        return new assoc_get_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            assoc_get_result result = new assoc_get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_get_result result = new assoc_get_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_get_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.assoc_get(args.src, args.atype, args.dstIdSet, args.tLow, args.tHigh,resultHandler);
      }
    }

    public static class assoc_get_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_get_local_args, List<ThriftAssoc>> {
      public assoc_get_local() {
        super("assoc_get_local");
      }

      public assoc_get_local_args getEmptyArgsInstance() {
        return new assoc_get_local_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            assoc_get_local_result result = new assoc_get_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_get_local_result result = new assoc_get_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_get_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.assoc_get_local(args.shardId, args.src, args.atype, args.dstIdSet, args.tLow, args.tHigh,resultHandler);
      }
    }

    public static class obj_add<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obj_add_args, Long> {
      public obj_add() {
        super("obj_add");
      }

      public obj_add_args getEmptyArgsInstance() {
        return new obj_add_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            obj_add_result result = new obj_add_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obj_add_result result = new obj_add_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obj_add_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.obj_add(args.attrs,resultHandler);
      }
    }

    public static class obj_get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obj_get_args, List<String>> {
      public obj_get() {
        super("obj_get");
      }

      public obj_get_args getEmptyArgsInstance() {
        return new obj_get_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            obj_get_result result = new obj_get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obj_get_result result = new obj_get_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obj_get_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.obj_get(args.nodeId,resultHandler);
      }
    }

    public static class obj_get_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obj_get_local_args, List<String>> {
      public obj_get_local() {
        super("obj_get_local");
      }

      public obj_get_local_args getEmptyArgsInstance() {
        return new obj_get_local_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            obj_get_local_result result = new obj_get_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obj_get_local_result result = new obj_get_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obj_get_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.obj_get_local(args.shardId, args.nodeId,resultHandler);
      }
    }

    public static class assoc_time_range<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_time_range_args, List<ThriftAssoc>> {
      public assoc_time_range() {
        super("assoc_time_range");
      }

      public assoc_time_range_args getEmptyArgsInstance() {
        return new assoc_time_range_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            assoc_time_range_result result = new assoc_time_range_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_time_range_result result = new assoc_time_range_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_time_range_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.assoc_time_range(args.src, args.atype, args.tLow, args.tHigh, args.limit,resultHandler);
      }
    }

    public static class assoc_time_range_local<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_time_range_local_args, List<ThriftAssoc>> {
      public assoc_time_range_local() {
        super("assoc_time_range_local");
      }

      public assoc_time_range_local_args getEmptyArgsInstance() {
        return new assoc_time_range_local_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            assoc_time_range_local_result result = new assoc_time_range_local_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_time_range_local_result result = new assoc_time_range_local_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_time_range_local_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.assoc_time_range_local(args.shardId, args.src, args.atype, args.tLow, args.tHigh, args.limit,resultHandler);
      }
    }

    public static class assoc_add<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assoc_add_args, Integer> {
      public assoc_add() {
        super("assoc_add");
      }

      public assoc_add_args getEmptyArgsInstance() {
        return new assoc_add_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            assoc_add_result result = new assoc_add_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assoc_add_result result = new assoc_add_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assoc_add_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.assoc_add(args.src, args.atype, args.dst, args.time, args.attr,resultHandler);
      }
    }

    public static class getNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNode_args, String> {
      public getNode() {
        super("getNode");
      }

      public getNode_args getEmptyArgsInstance() {
        return new getNode_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getNode_result result = new getNode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNode_result result = new getNode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNode_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getNode(args.id,resultHandler);
      }
    }

    public static class getNodeLocal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNodeLocal_args, String> {
      public getNodeLocal() {
        super("getNodeLocal");
      }

      public getNodeLocal_args getEmptyArgsInstance() {
        return new getNodeLocal_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getNodeLocal_result result = new getNodeLocal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNodeLocal_result result = new getNodeLocal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNodeLocal_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getNodeLocal(args.shard_id, args.id,resultHandler);
      }
    }

    public static class addNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNode_args, Long> {
      public addNode() {
        super("addNode");
      }

      public addNode_args getEmptyArgsInstance() {
        return new addNode_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addNode_result result = new addNode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addNode_result result = new addNode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addNode_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addNode(args.id, args.data,resultHandler);
      }
    }

    public static class deleteNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteNode_args, Boolean> {
      public deleteNode() {
        super("deleteNode");
      }

      public deleteNode_args getEmptyArgsInstance() {
        return new deleteNode_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteNode_result result = new deleteNode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteNode_result result = new deleteNode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteNode_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteNode(args.id,resultHandler);
      }
    }

    public static class deleteNodeLocal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteNodeLocal_args, Boolean> {
      public deleteNodeLocal() {
        super("deleteNodeLocal");
      }

      public deleteNodeLocal_args getEmptyArgsInstance() {
        return new deleteNodeLocal_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteNodeLocal_result result = new deleteNodeLocal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteNodeLocal_result result = new deleteNodeLocal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteNodeLocal_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteNodeLocal(args.shard_id, args.id,resultHandler);
      }
    }

    public static class updateNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateNode_args, Boolean> {
      public updateNode() {
        super("updateNode");
      }

      public updateNode_args getEmptyArgsInstance() {
        return new updateNode_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateNode_result result = new updateNode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateNode_result result = new updateNode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateNode_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateNode(args.id, args.data,resultHandler);
      }
    }

    public static class getLink<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLink_args, ThriftAssoc> {
      public getLink() {
        super("getLink");
      }

      public getLink_args getEmptyArgsInstance() {
        return new getLink_args();
      }

      public AsyncMethodCallback<ThriftAssoc> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftAssoc>() { 
          public void onComplete(ThriftAssoc o) {
            getLink_result result = new getLink_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLink_result result = new getLink_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLink_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftAssoc> resultHandler) throws TException {
        iface.getLink(args.id1, args.link_type, args.id2,resultHandler);
      }
    }

    public static class getLinkLocal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLinkLocal_args, ThriftAssoc> {
      public getLinkLocal() {
        super("getLinkLocal");
      }

      public getLinkLocal_args getEmptyArgsInstance() {
        return new getLinkLocal_args();
      }

      public AsyncMethodCallback<ThriftAssoc> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftAssoc>() { 
          public void onComplete(ThriftAssoc o) {
            getLinkLocal_result result = new getLinkLocal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLinkLocal_result result = new getLinkLocal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLinkLocal_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftAssoc> resultHandler) throws TException {
        iface.getLinkLocal(args.shard_id, args.id1, args.link_type, args.id2,resultHandler);
      }
    }

    public static class addLink<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addLink_args, Boolean> {
      public addLink() {
        super("addLink");
      }

      public addLink_args getEmptyArgsInstance() {
        return new addLink_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addLink_result result = new addLink_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addLink_result result = new addLink_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addLink_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addLink(args.link,resultHandler);
      }
    }

    public static class deleteLink<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLink_args, Boolean> {
      public deleteLink() {
        super("deleteLink");
      }

      public deleteLink_args getEmptyArgsInstance() {
        return new deleteLink_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteLink_result result = new deleteLink_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLink_result result = new deleteLink_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLink_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteLink(args.id1, args.link_type, args.id2,resultHandler);
      }
    }

    public static class deleteLinkLocal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLinkLocal_args, Boolean> {
      public deleteLinkLocal() {
        super("deleteLinkLocal");
      }

      public deleteLinkLocal_args getEmptyArgsInstance() {
        return new deleteLinkLocal_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteLinkLocal_result result = new deleteLinkLocal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLinkLocal_result result = new deleteLinkLocal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLinkLocal_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteLinkLocal(args.shard_id, args.id1, args.link_type, args.id2,resultHandler);
      }
    }

    public static class updateLink<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLink_args, Boolean> {
      public updateLink() {
        super("updateLink");
      }

      public updateLink_args getEmptyArgsInstance() {
        return new updateLink_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateLink_result result = new updateLink_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLink_result result = new updateLink_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLink_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateLink(args.link,resultHandler);
      }
    }

    public static class getLinkList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLinkList_args, List<ThriftAssoc>> {
      public getLinkList() {
        super("getLinkList");
      }

      public getLinkList_args getEmptyArgsInstance() {
        return new getLinkList_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            getLinkList_result result = new getLinkList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLinkList_result result = new getLinkList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLinkList_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.getLinkList(args.id1, args.link_type,resultHandler);
      }
    }

    public static class getLinkListLocal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLinkListLocal_args, List<ThriftAssoc>> {
      public getLinkListLocal() {
        super("getLinkListLocal");
      }

      public getLinkListLocal_args getEmptyArgsInstance() {
        return new getLinkListLocal_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            getLinkListLocal_result result = new getLinkListLocal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLinkListLocal_result result = new getLinkListLocal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLinkListLocal_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.getLinkListLocal(args.shard_id, args.id1, args.link_type,resultHandler);
      }
    }

    public static class getFilteredLinkList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFilteredLinkList_args, List<ThriftAssoc>> {
      public getFilteredLinkList() {
        super("getFilteredLinkList");
      }

      public getFilteredLinkList_args getEmptyArgsInstance() {
        return new getFilteredLinkList_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            getFilteredLinkList_result result = new getFilteredLinkList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFilteredLinkList_result result = new getFilteredLinkList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFilteredLinkList_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.getFilteredLinkList(args.id1, args.link_type, args.min_timestamp, args.max_timestamp, args.offset, args.limit,resultHandler);
      }
    }

    public static class getFilteredLinkListLocal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFilteredLinkListLocal_args, List<ThriftAssoc>> {
      public getFilteredLinkListLocal() {
        super("getFilteredLinkListLocal");
      }

      public getFilteredLinkListLocal_args getEmptyArgsInstance() {
        return new getFilteredLinkListLocal_args();
      }

      public AsyncMethodCallback<List<ThriftAssoc>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftAssoc>>() { 
          public void onComplete(List<ThriftAssoc> o) {
            getFilteredLinkListLocal_result result = new getFilteredLinkListLocal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFilteredLinkListLocal_result result = new getFilteredLinkListLocal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFilteredLinkListLocal_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftAssoc>> resultHandler) throws TException {
        iface.getFilteredLinkListLocal(args.shard_id, args.id1, args.link_type, args.min_timestamp, args.max_timestamp, args.offset, args.limit,resultHandler);
      }
    }

  }

  public static class init_args implements org.apache.thrift.TBase<init_args, init_args._Fields>, java.io.Serializable, Cloneable, Comparable<init_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_args.class, metaDataMap);
    }

    public init_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_args(init_args other) {
    }

    public init_args deepCopy() {
      return new init_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_args)
        return this.equals((init_args)that);
      return false;
    }

    public boolean equals(init_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(init_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_argsStandardSchemeFactory implements SchemeFactory {
      public init_argsStandardScheme getScheme() {
        return new init_argsStandardScheme();
      }
    }

    private static class init_argsStandardScheme extends StandardScheme<init_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_argsTupleSchemeFactory implements SchemeFactory {
      public init_argsTupleScheme getScheme() {
        return new init_argsTupleScheme();
      }
    }

    private static class init_argsTupleScheme extends TupleScheme<init_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class init_result implements org.apache.thrift.TBase<init_result, init_result._Fields>, java.io.Serializable, Cloneable, Comparable<init_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_result.class, metaDataMap);
    }

    public init_result() {
    }

    public init_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_result(init_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public init_result deepCopy() {
      return new init_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public init_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_result)
        return this.equals((init_result)that);
      return false;
    }

    public boolean equals(init_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(init_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_resultStandardSchemeFactory implements SchemeFactory {
      public init_resultStandardScheme getScheme() {
        return new init_resultStandardScheme();
      }
    }

    private static class init_resultStandardScheme extends StandardScheme<init_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_resultTupleSchemeFactory implements SchemeFactory {
      public init_resultTupleScheme getScheme() {
        return new init_resultTupleScheme();
      }
    }

    private static class init_resultTupleScheme extends TupleScheme<init_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class connect_to_aggregators_args implements org.apache.thrift.TBase<connect_to_aggregators_args, connect_to_aggregators_args._Fields>, java.io.Serializable, Cloneable, Comparable<connect_to_aggregators_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_to_aggregators_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connect_to_aggregators_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connect_to_aggregators_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_to_aggregators_args.class, metaDataMap);
    }

    public connect_to_aggregators_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_to_aggregators_args(connect_to_aggregators_args other) {
    }

    public connect_to_aggregators_args deepCopy() {
      return new connect_to_aggregators_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connect_to_aggregators_args)
        return this.equals((connect_to_aggregators_args)that);
      return false;
    }

    public boolean equals(connect_to_aggregators_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(connect_to_aggregators_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connect_to_aggregators_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_to_aggregators_argsStandardSchemeFactory implements SchemeFactory {
      public connect_to_aggregators_argsStandardScheme getScheme() {
        return new connect_to_aggregators_argsStandardScheme();
      }
    }

    private static class connect_to_aggregators_argsStandardScheme extends StandardScheme<connect_to_aggregators_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_to_aggregators_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_to_aggregators_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_to_aggregators_argsTupleSchemeFactory implements SchemeFactory {
      public connect_to_aggregators_argsTupleScheme getScheme() {
        return new connect_to_aggregators_argsTupleScheme();
      }
    }

    private static class connect_to_aggregators_argsTupleScheme extends TupleScheme<connect_to_aggregators_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_to_aggregators_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_to_aggregators_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class connect_to_aggregators_result implements org.apache.thrift.TBase<connect_to_aggregators_result, connect_to_aggregators_result._Fields>, java.io.Serializable, Cloneable, Comparable<connect_to_aggregators_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_to_aggregators_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connect_to_aggregators_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connect_to_aggregators_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_to_aggregators_result.class, metaDataMap);
    }

    public connect_to_aggregators_result() {
    }

    public connect_to_aggregators_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_to_aggregators_result(connect_to_aggregators_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public connect_to_aggregators_result deepCopy() {
      return new connect_to_aggregators_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public connect_to_aggregators_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connect_to_aggregators_result)
        return this.equals((connect_to_aggregators_result)that);
      return false;
    }

    public boolean equals(connect_to_aggregators_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(connect_to_aggregators_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connect_to_aggregators_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_to_aggregators_resultStandardSchemeFactory implements SchemeFactory {
      public connect_to_aggregators_resultStandardScheme getScheme() {
        return new connect_to_aggregators_resultStandardScheme();
      }
    }

    private static class connect_to_aggregators_resultStandardScheme extends StandardScheme<connect_to_aggregators_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_to_aggregators_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_to_aggregators_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_to_aggregators_resultTupleSchemeFactory implements SchemeFactory {
      public connect_to_aggregators_resultTupleScheme getScheme() {
        return new connect_to_aggregators_resultTupleScheme();
      }
    }

    private static class connect_to_aggregators_resultTupleScheme extends TupleScheme<connect_to_aggregators_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_to_aggregators_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_to_aggregators_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disconnect_from_aggregators_args implements org.apache.thrift.TBase<disconnect_from_aggregators_args, disconnect_from_aggregators_args._Fields>, java.io.Serializable, Cloneable, Comparable<disconnect_from_aggregators_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnect_from_aggregators_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disconnect_from_aggregators_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disconnect_from_aggregators_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnect_from_aggregators_args.class, metaDataMap);
    }

    public disconnect_from_aggregators_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnect_from_aggregators_args(disconnect_from_aggregators_args other) {
    }

    public disconnect_from_aggregators_args deepCopy() {
      return new disconnect_from_aggregators_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnect_from_aggregators_args)
        return this.equals((disconnect_from_aggregators_args)that);
      return false;
    }

    public boolean equals(disconnect_from_aggregators_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(disconnect_from_aggregators_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disconnect_from_aggregators_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnect_from_aggregators_argsStandardSchemeFactory implements SchemeFactory {
      public disconnect_from_aggregators_argsStandardScheme getScheme() {
        return new disconnect_from_aggregators_argsStandardScheme();
      }
    }

    private static class disconnect_from_aggregators_argsStandardScheme extends StandardScheme<disconnect_from_aggregators_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnect_from_aggregators_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnect_from_aggregators_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnect_from_aggregators_argsTupleSchemeFactory implements SchemeFactory {
      public disconnect_from_aggregators_argsTupleScheme getScheme() {
        return new disconnect_from_aggregators_argsTupleScheme();
      }
    }

    private static class disconnect_from_aggregators_argsTupleScheme extends TupleScheme<disconnect_from_aggregators_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnect_from_aggregators_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnect_from_aggregators_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class disconnect_from_aggregators_result implements org.apache.thrift.TBase<disconnect_from_aggregators_result, disconnect_from_aggregators_result._Fields>, java.io.Serializable, Cloneable, Comparable<disconnect_from_aggregators_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnect_from_aggregators_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disconnect_from_aggregators_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disconnect_from_aggregators_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnect_from_aggregators_result.class, metaDataMap);
    }

    public disconnect_from_aggregators_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnect_from_aggregators_result(disconnect_from_aggregators_result other) {
    }

    public disconnect_from_aggregators_result deepCopy() {
      return new disconnect_from_aggregators_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnect_from_aggregators_result)
        return this.equals((disconnect_from_aggregators_result)that);
      return false;
    }

    public boolean equals(disconnect_from_aggregators_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(disconnect_from_aggregators_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disconnect_from_aggregators_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnect_from_aggregators_resultStandardSchemeFactory implements SchemeFactory {
      public disconnect_from_aggregators_resultStandardScheme getScheme() {
        return new disconnect_from_aggregators_resultStandardScheme();
      }
    }

    private static class disconnect_from_aggregators_resultStandardScheme extends StandardScheme<disconnect_from_aggregators_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnect_from_aggregators_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnect_from_aggregators_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnect_from_aggregators_resultTupleSchemeFactory implements SchemeFactory {
      public disconnect_from_aggregators_resultTupleScheme getScheme() {
        return new disconnect_from_aggregators_resultTupleScheme();
      }
    }

    private static class disconnect_from_aggregators_resultTupleScheme extends TupleScheme<disconnect_from_aggregators_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnect_from_aggregators_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnect_from_aggregators_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class shutdown_args implements org.apache.thrift.TBase<shutdown_args, shutdown_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shutdown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shutdown_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_args.class, metaDataMap);
    }

    public shutdown_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_args(shutdown_args other) {
    }

    public shutdown_args deepCopy() {
      return new shutdown_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_args)
        return this.equals((shutdown_args)that);
      return false;
    }

    public boolean equals(shutdown_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_argsStandardSchemeFactory implements SchemeFactory {
      public shutdown_argsStandardScheme getScheme() {
        return new shutdown_argsStandardScheme();
      }
    }

    private static class shutdown_argsStandardScheme extends StandardScheme<shutdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_argsTupleSchemeFactory implements SchemeFactory {
      public shutdown_argsTupleScheme getScheme() {
        return new shutdown_argsTupleScheme();
      }
    }

    private static class shutdown_argsTupleScheme extends TupleScheme<shutdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class shutdown_result implements org.apache.thrift.TBase<shutdown_result, shutdown_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shutdown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shutdown_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_result.class, metaDataMap);
    }

    public shutdown_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_result(shutdown_result other) {
    }

    public shutdown_result deepCopy() {
      return new shutdown_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_result)
        return this.equals((shutdown_result)that);
      return false;
    }

    public boolean equals(shutdown_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(shutdown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_resultStandardSchemeFactory implements SchemeFactory {
      public shutdown_resultStandardScheme getScheme() {
        return new shutdown_resultStandardScheme();
      }
    }

    private static class shutdown_resultStandardScheme extends StandardScheme<shutdown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_resultTupleSchemeFactory implements SchemeFactory {
      public shutdown_resultTupleScheme getScheme() {
        return new shutdown_resultTupleScheme();
      }
    }

    private static class shutdown_resultTupleScheme extends TupleScheme<shutdown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class record_edge_updates_args implements org.apache.thrift.TBase<record_edge_updates_args, record_edge_updates_args._Fields>, java.io.Serializable, Cloneable, Comparable<record_edge_updates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("record_edge_updates_args");

    private static final org.apache.thrift.protocol.TField NEXT_SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("next_shard", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOCAL_SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("local_shard", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("updates", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new record_edge_updates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new record_edge_updates_argsTupleSchemeFactory());
    }

    public int next_shard; // required
    public int local_shard; // required
    public List<ThriftSrcAtype> updates; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEXT_SHARD((short)1, "next_shard"),
      LOCAL_SHARD((short)2, "local_shard"),
      UPDATES((short)3, "updates");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEXT_SHARD
            return NEXT_SHARD;
          case 2: // LOCAL_SHARD
            return LOCAL_SHARD;
          case 3: // UPDATES
            return UPDATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEXT_SHARD_ISSET_ID = 0;
    private static final int __LOCAL_SHARD_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEXT_SHARD, new org.apache.thrift.meta_data.FieldMetaData("next_shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOCAL_SHARD, new org.apache.thrift.meta_data.FieldMetaData("local_shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UPDATES, new org.apache.thrift.meta_data.FieldMetaData("updates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSrcAtype.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(record_edge_updates_args.class, metaDataMap);
    }

    public record_edge_updates_args() {
    }

    public record_edge_updates_args(
      int next_shard,
      int local_shard,
      List<ThriftSrcAtype> updates)
    {
      this();
      this.next_shard = next_shard;
      setNext_shardIsSet(true);
      this.local_shard = local_shard;
      setLocal_shardIsSet(true);
      this.updates = updates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public record_edge_updates_args(record_edge_updates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.next_shard = other.next_shard;
      this.local_shard = other.local_shard;
      if (other.isSetUpdates()) {
        List<ThriftSrcAtype> __this__updates = new ArrayList<ThriftSrcAtype>(other.updates.size());
        for (ThriftSrcAtype other_element : other.updates) {
          __this__updates.add(new ThriftSrcAtype(other_element));
        }
        this.updates = __this__updates;
      }
    }

    public record_edge_updates_args deepCopy() {
      return new record_edge_updates_args(this);
    }

    @Override
    public void clear() {
      setNext_shardIsSet(false);
      this.next_shard = 0;
      setLocal_shardIsSet(false);
      this.local_shard = 0;
      this.updates = null;
    }

    public int getNext_shard() {
      return this.next_shard;
    }

    public record_edge_updates_args setNext_shard(int next_shard) {
      this.next_shard = next_shard;
      setNext_shardIsSet(true);
      return this;
    }

    public void unsetNext_shard() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXT_SHARD_ISSET_ID);
    }

    /** Returns true if field next_shard is set (has been assigned a value) and false otherwise */
    public boolean isSetNext_shard() {
      return EncodingUtils.testBit(__isset_bitfield, __NEXT_SHARD_ISSET_ID);
    }

    public void setNext_shardIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXT_SHARD_ISSET_ID, value);
    }

    public int getLocal_shard() {
      return this.local_shard;
    }

    public record_edge_updates_args setLocal_shard(int local_shard) {
      this.local_shard = local_shard;
      setLocal_shardIsSet(true);
      return this;
    }

    public void unsetLocal_shard() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCAL_SHARD_ISSET_ID);
    }

    /** Returns true if field local_shard is set (has been assigned a value) and false otherwise */
    public boolean isSetLocal_shard() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCAL_SHARD_ISSET_ID);
    }

    public void setLocal_shardIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCAL_SHARD_ISSET_ID, value);
    }

    public int getUpdatesSize() {
      return (this.updates == null) ? 0 : this.updates.size();
    }

    public java.util.Iterator<ThriftSrcAtype> getUpdatesIterator() {
      return (this.updates == null) ? null : this.updates.iterator();
    }

    public void addToUpdates(ThriftSrcAtype elem) {
      if (this.updates == null) {
        this.updates = new ArrayList<ThriftSrcAtype>();
      }
      this.updates.add(elem);
    }

    public List<ThriftSrcAtype> getUpdates() {
      return this.updates;
    }

    public record_edge_updates_args setUpdates(List<ThriftSrcAtype> updates) {
      this.updates = updates;
      return this;
    }

    public void unsetUpdates() {
      this.updates = null;
    }

    /** Returns true if field updates is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdates() {
      return this.updates != null;
    }

    public void setUpdatesIsSet(boolean value) {
      if (!value) {
        this.updates = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEXT_SHARD:
        if (value == null) {
          unsetNext_shard();
        } else {
          setNext_shard((Integer)value);
        }
        break;

      case LOCAL_SHARD:
        if (value == null) {
          unsetLocal_shard();
        } else {
          setLocal_shard((Integer)value);
        }
        break;

      case UPDATES:
        if (value == null) {
          unsetUpdates();
        } else {
          setUpdates((List<ThriftSrcAtype>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEXT_SHARD:
        return getNext_shard();

      case LOCAL_SHARD:
        return getLocal_shard();

      case UPDATES:
        return getUpdates();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEXT_SHARD:
        return isSetNext_shard();
      case LOCAL_SHARD:
        return isSetLocal_shard();
      case UPDATES:
        return isSetUpdates();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof record_edge_updates_args)
        return this.equals((record_edge_updates_args)that);
      return false;
    }

    public boolean equals(record_edge_updates_args that) {
      if (that == null)
        return false;

      boolean this_present_next_shard = true;
      boolean that_present_next_shard = true;
      if (this_present_next_shard || that_present_next_shard) {
        if (!(this_present_next_shard && that_present_next_shard))
          return false;
        if (this.next_shard != that.next_shard)
          return false;
      }

      boolean this_present_local_shard = true;
      boolean that_present_local_shard = true;
      if (this_present_local_shard || that_present_local_shard) {
        if (!(this_present_local_shard && that_present_local_shard))
          return false;
        if (this.local_shard != that.local_shard)
          return false;
      }

      boolean this_present_updates = true && this.isSetUpdates();
      boolean that_present_updates = true && that.isSetUpdates();
      if (this_present_updates || that_present_updates) {
        if (!(this_present_updates && that_present_updates))
          return false;
        if (!this.updates.equals(that.updates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_next_shard = true;
      list.add(present_next_shard);
      if (present_next_shard)
        list.add(next_shard);

      boolean present_local_shard = true;
      list.add(present_local_shard);
      if (present_local_shard)
        list.add(local_shard);

      boolean present_updates = true && (isSetUpdates());
      list.add(present_updates);
      if (present_updates)
        list.add(updates);

      return list.hashCode();
    }

    @Override
    public int compareTo(record_edge_updates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNext_shard()).compareTo(other.isSetNext_shard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNext_shard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.next_shard, other.next_shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocal_shard()).compareTo(other.isSetLocal_shard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocal_shard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_shard, other.local_shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdates()).compareTo(other.isSetUpdates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updates, other.updates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("record_edge_updates_args(");
      boolean first = true;

      sb.append("next_shard:");
      sb.append(this.next_shard);
      first = false;
      if (!first) sb.append(", ");
      sb.append("local_shard:");
      sb.append(this.local_shard);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updates:");
      if (this.updates == null) {
        sb.append("null");
      } else {
        sb.append(this.updates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class record_edge_updates_argsStandardSchemeFactory implements SchemeFactory {
      public record_edge_updates_argsStandardScheme getScheme() {
        return new record_edge_updates_argsStandardScheme();
      }
    }

    private static class record_edge_updates_argsStandardScheme extends StandardScheme<record_edge_updates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, record_edge_updates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEXT_SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.next_shard = iprot.readI32();
                struct.setNext_shardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCAL_SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.local_shard = iprot.readI32();
                struct.setLocal_shardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UPDATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.updates = new ArrayList<ThriftSrcAtype>(_list0.size);
                  ThriftSrcAtype _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ThriftSrcAtype();
                    _elem1.read(iprot);
                    struct.updates.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setUpdatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, record_edge_updates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NEXT_SHARD_FIELD_DESC);
        oprot.writeI32(struct.next_shard);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOCAL_SHARD_FIELD_DESC);
        oprot.writeI32(struct.local_shard);
        oprot.writeFieldEnd();
        if (struct.updates != null) {
          oprot.writeFieldBegin(UPDATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updates.size()));
            for (ThriftSrcAtype _iter3 : struct.updates)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class record_edge_updates_argsTupleSchemeFactory implements SchemeFactory {
      public record_edge_updates_argsTupleScheme getScheme() {
        return new record_edge_updates_argsTupleScheme();
      }
    }

    private static class record_edge_updates_argsTupleScheme extends TupleScheme<record_edge_updates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, record_edge_updates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNext_shard()) {
          optionals.set(0);
        }
        if (struct.isSetLocal_shard()) {
          optionals.set(1);
        }
        if (struct.isSetUpdates()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNext_shard()) {
          oprot.writeI32(struct.next_shard);
        }
        if (struct.isSetLocal_shard()) {
          oprot.writeI32(struct.local_shard);
        }
        if (struct.isSetUpdates()) {
          {
            oprot.writeI32(struct.updates.size());
            for (ThriftSrcAtype _iter4 : struct.updates)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, record_edge_updates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.next_shard = iprot.readI32();
          struct.setNext_shardIsSet(true);
        }
        if (incoming.get(1)) {
          struct.local_shard = iprot.readI32();
          struct.setLocal_shardIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.updates = new ArrayList<ThriftSrcAtype>(_list5.size);
            ThriftSrcAtype _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ThriftSrcAtype();
              _elem6.read(iprot);
              struct.updates.add(_elem6);
            }
          }
          struct.setUpdatesIsSet(true);
        }
      }
    }

  }

  public static class record_edge_updates_result implements org.apache.thrift.TBase<record_edge_updates_result, record_edge_updates_result._Fields>, java.io.Serializable, Cloneable, Comparable<record_edge_updates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("record_edge_updates_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new record_edge_updates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new record_edge_updates_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(record_edge_updates_result.class, metaDataMap);
    }

    public record_edge_updates_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public record_edge_updates_result(record_edge_updates_result other) {
    }

    public record_edge_updates_result deepCopy() {
      return new record_edge_updates_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof record_edge_updates_result)
        return this.equals((record_edge_updates_result)that);
      return false;
    }

    public boolean equals(record_edge_updates_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(record_edge_updates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("record_edge_updates_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class record_edge_updates_resultStandardSchemeFactory implements SchemeFactory {
      public record_edge_updates_resultStandardScheme getScheme() {
        return new record_edge_updates_resultStandardScheme();
      }
    }

    private static class record_edge_updates_resultStandardScheme extends StandardScheme<record_edge_updates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, record_edge_updates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, record_edge_updates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class record_edge_updates_resultTupleSchemeFactory implements SchemeFactory {
      public record_edge_updates_resultTupleScheme getScheme() {
        return new record_edge_updates_resultTupleScheme();
      }
    }

    private static class record_edge_updates_resultTupleScheme extends TupleScheme<record_edge_updates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, record_edge_updates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, record_edge_updates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class record_node_append_args implements org.apache.thrift.TBase<record_node_append_args, record_node_append_args._Fields>, java.io.Serializable, Cloneable, Comparable<record_node_append_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("record_node_append_args");

    private static final org.apache.thrift.protocol.TField NEXT_SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("next_shard", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOCAL_SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("local_shard", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("obj", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new record_node_append_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new record_node_append_argsTupleSchemeFactory());
    }

    public int next_shard; // required
    public int local_shard; // required
    public long obj; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEXT_SHARD((short)1, "next_shard"),
      LOCAL_SHARD((short)2, "local_shard"),
      OBJ((short)3, "obj");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEXT_SHARD
            return NEXT_SHARD;
          case 2: // LOCAL_SHARD
            return LOCAL_SHARD;
          case 3: // OBJ
            return OBJ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEXT_SHARD_ISSET_ID = 0;
    private static final int __LOCAL_SHARD_ISSET_ID = 1;
    private static final int __OBJ_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEXT_SHARD, new org.apache.thrift.meta_data.FieldMetaData("next_shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOCAL_SHARD, new org.apache.thrift.meta_data.FieldMetaData("local_shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OBJ, new org.apache.thrift.meta_data.FieldMetaData("obj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(record_node_append_args.class, metaDataMap);
    }

    public record_node_append_args() {
    }

    public record_node_append_args(
      int next_shard,
      int local_shard,
      long obj)
    {
      this();
      this.next_shard = next_shard;
      setNext_shardIsSet(true);
      this.local_shard = local_shard;
      setLocal_shardIsSet(true);
      this.obj = obj;
      setObjIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public record_node_append_args(record_node_append_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.next_shard = other.next_shard;
      this.local_shard = other.local_shard;
      this.obj = other.obj;
    }

    public record_node_append_args deepCopy() {
      return new record_node_append_args(this);
    }

    @Override
    public void clear() {
      setNext_shardIsSet(false);
      this.next_shard = 0;
      setLocal_shardIsSet(false);
      this.local_shard = 0;
      setObjIsSet(false);
      this.obj = 0;
    }

    public int getNext_shard() {
      return this.next_shard;
    }

    public record_node_append_args setNext_shard(int next_shard) {
      this.next_shard = next_shard;
      setNext_shardIsSet(true);
      return this;
    }

    public void unsetNext_shard() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXT_SHARD_ISSET_ID);
    }

    /** Returns true if field next_shard is set (has been assigned a value) and false otherwise */
    public boolean isSetNext_shard() {
      return EncodingUtils.testBit(__isset_bitfield, __NEXT_SHARD_ISSET_ID);
    }

    public void setNext_shardIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXT_SHARD_ISSET_ID, value);
    }

    public int getLocal_shard() {
      return this.local_shard;
    }

    public record_node_append_args setLocal_shard(int local_shard) {
      this.local_shard = local_shard;
      setLocal_shardIsSet(true);
      return this;
    }

    public void unsetLocal_shard() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCAL_SHARD_ISSET_ID);
    }

    /** Returns true if field local_shard is set (has been assigned a value) and false otherwise */
    public boolean isSetLocal_shard() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCAL_SHARD_ISSET_ID);
    }

    public void setLocal_shardIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCAL_SHARD_ISSET_ID, value);
    }

    public long getObj() {
      return this.obj;
    }

    public record_node_append_args setObj(long obj) {
      this.obj = obj;
      setObjIsSet(true);
      return this;
    }

    public void unsetObj() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJ_ISSET_ID);
    }

    /** Returns true if field obj is set (has been assigned a value) and false otherwise */
    public boolean isSetObj() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJ_ISSET_ID);
    }

    public void setObjIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJ_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEXT_SHARD:
        if (value == null) {
          unsetNext_shard();
        } else {
          setNext_shard((Integer)value);
        }
        break;

      case LOCAL_SHARD:
        if (value == null) {
          unsetLocal_shard();
        } else {
          setLocal_shard((Integer)value);
        }
        break;

      case OBJ:
        if (value == null) {
          unsetObj();
        } else {
          setObj((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEXT_SHARD:
        return getNext_shard();

      case LOCAL_SHARD:
        return getLocal_shard();

      case OBJ:
        return getObj();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEXT_SHARD:
        return isSetNext_shard();
      case LOCAL_SHARD:
        return isSetLocal_shard();
      case OBJ:
        return isSetObj();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof record_node_append_args)
        return this.equals((record_node_append_args)that);
      return false;
    }

    public boolean equals(record_node_append_args that) {
      if (that == null)
        return false;

      boolean this_present_next_shard = true;
      boolean that_present_next_shard = true;
      if (this_present_next_shard || that_present_next_shard) {
        if (!(this_present_next_shard && that_present_next_shard))
          return false;
        if (this.next_shard != that.next_shard)
          return false;
      }

      boolean this_present_local_shard = true;
      boolean that_present_local_shard = true;
      if (this_present_local_shard || that_present_local_shard) {
        if (!(this_present_local_shard && that_present_local_shard))
          return false;
        if (this.local_shard != that.local_shard)
          return false;
      }

      boolean this_present_obj = true;
      boolean that_present_obj = true;
      if (this_present_obj || that_present_obj) {
        if (!(this_present_obj && that_present_obj))
          return false;
        if (this.obj != that.obj)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_next_shard = true;
      list.add(present_next_shard);
      if (present_next_shard)
        list.add(next_shard);

      boolean present_local_shard = true;
      list.add(present_local_shard);
      if (present_local_shard)
        list.add(local_shard);

      boolean present_obj = true;
      list.add(present_obj);
      if (present_obj)
        list.add(obj);

      return list.hashCode();
    }

    @Override
    public int compareTo(record_node_append_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNext_shard()).compareTo(other.isSetNext_shard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNext_shard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.next_shard, other.next_shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocal_shard()).compareTo(other.isSetLocal_shard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocal_shard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_shard, other.local_shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObj()).compareTo(other.isSetObj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj, other.obj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("record_node_append_args(");
      boolean first = true;

      sb.append("next_shard:");
      sb.append(this.next_shard);
      first = false;
      if (!first) sb.append(", ");
      sb.append("local_shard:");
      sb.append(this.local_shard);
      first = false;
      if (!first) sb.append(", ");
      sb.append("obj:");
      sb.append(this.obj);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class record_node_append_argsStandardSchemeFactory implements SchemeFactory {
      public record_node_append_argsStandardScheme getScheme() {
        return new record_node_append_argsStandardScheme();
      }
    }

    private static class record_node_append_argsStandardScheme extends StandardScheme<record_node_append_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, record_node_append_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEXT_SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.next_shard = iprot.readI32();
                struct.setNext_shardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCAL_SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.local_shard = iprot.readI32();
                struct.setLocal_shardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OBJ
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.obj = iprot.readI64();
                struct.setObjIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, record_node_append_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NEXT_SHARD_FIELD_DESC);
        oprot.writeI32(struct.next_shard);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOCAL_SHARD_FIELD_DESC);
        oprot.writeI32(struct.local_shard);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OBJ_FIELD_DESC);
        oprot.writeI64(struct.obj);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class record_node_append_argsTupleSchemeFactory implements SchemeFactory {
      public record_node_append_argsTupleScheme getScheme() {
        return new record_node_append_argsTupleScheme();
      }
    }

    private static class record_node_append_argsTupleScheme extends TupleScheme<record_node_append_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, record_node_append_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNext_shard()) {
          optionals.set(0);
        }
        if (struct.isSetLocal_shard()) {
          optionals.set(1);
        }
        if (struct.isSetObj()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNext_shard()) {
          oprot.writeI32(struct.next_shard);
        }
        if (struct.isSetLocal_shard()) {
          oprot.writeI32(struct.local_shard);
        }
        if (struct.isSetObj()) {
          oprot.writeI64(struct.obj);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, record_node_append_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.next_shard = iprot.readI32();
          struct.setNext_shardIsSet(true);
        }
        if (incoming.get(1)) {
          struct.local_shard = iprot.readI32();
          struct.setLocal_shardIsSet(true);
        }
        if (incoming.get(2)) {
          struct.obj = iprot.readI64();
          struct.setObjIsSet(true);
        }
      }
    }

  }

  public static class record_node_append_result implements org.apache.thrift.TBase<record_node_append_result, record_node_append_result._Fields>, java.io.Serializable, Cloneable, Comparable<record_node_append_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("record_node_append_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new record_node_append_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new record_node_append_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(record_node_append_result.class, metaDataMap);
    }

    public record_node_append_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public record_node_append_result(record_node_append_result other) {
    }

    public record_node_append_result deepCopy() {
      return new record_node_append_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof record_node_append_result)
        return this.equals((record_node_append_result)that);
      return false;
    }

    public boolean equals(record_node_append_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(record_node_append_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("record_node_append_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class record_node_append_resultStandardSchemeFactory implements SchemeFactory {
      public record_node_append_resultStandardScheme getScheme() {
        return new record_node_append_resultStandardScheme();
      }
    }

    private static class record_node_append_resultStandardScheme extends StandardScheme<record_node_append_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, record_node_append_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, record_node_append_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class record_node_append_resultTupleSchemeFactory implements SchemeFactory {
      public record_node_append_resultTupleScheme getScheme() {
        return new record_node_append_resultTupleScheme();
      }
    }

    private static class record_node_append_resultTupleScheme extends TupleScheme<record_node_append_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, record_node_append_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, record_node_append_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_attribute_args implements org.apache.thrift.TBase<get_attribute_args, get_attribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_attribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_attribute_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_attribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_attribute_argsTupleSchemeFactory());
    }

    public long nodeId; // required
    public int attrId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      ATTR_ID((short)2, "attrId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // ATTR_ID
            return ATTR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODEID_ISSET_ID = 0;
    private static final int __ATTRID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_attribute_args.class, metaDataMap);
    }

    public get_attribute_args() {
    }

    public get_attribute_args(
      long nodeId,
      int attrId)
    {
      this();
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.attrId = attrId;
      setAttrIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_attribute_args(get_attribute_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nodeId = other.nodeId;
      this.attrId = other.attrId;
    }

    public get_attribute_args deepCopy() {
      return new get_attribute_args(this);
    }

    @Override
    public void clear() {
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAttrIdIsSet(false);
      this.attrId = 0;
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_attribute_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public int getAttrId() {
      return this.attrId;
    }

    public get_attribute_args setAttrId(int attrId) {
      this.attrId = attrId;
      setAttrIdIsSet(true);
      return this;
    }

    public void unsetAttrId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    public void setAttrIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATTR_ID:
        if (value == null) {
          unsetAttrId();
        } else {
          setAttrId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case ATTR_ID:
        return getAttrId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case ATTR_ID:
        return isSetAttrId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_attribute_args)
        return this.equals((get_attribute_args)that);
      return false;
    }

    public boolean equals(get_attribute_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_attrId = true;
      boolean that_present_attrId = true;
      if (this_present_attrId || that_present_attrId) {
        if (!(this_present_attrId && that_present_attrId))
          return false;
        if (this.attrId != that.attrId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_attrId = true;
      list.add(present_attrId);
      if (present_attrId)
        list.add(attrId);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_attribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_attribute_args(");
      boolean first = true;

      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrId:");
      sb.append(this.attrId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_attribute_argsStandardSchemeFactory implements SchemeFactory {
      public get_attribute_argsStandardScheme getScheme() {
        return new get_attribute_argsStandardScheme();
      }
    }

    private static class get_attribute_argsStandardScheme extends StandardScheme<get_attribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_attribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId = iprot.readI32();
                struct.setAttrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_attribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
        oprot.writeI32(struct.attrId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_attribute_argsTupleSchemeFactory implements SchemeFactory {
      public get_attribute_argsTupleScheme getScheme() {
        return new get_attribute_argsTupleScheme();
      }
    }

    private static class get_attribute_argsTupleScheme extends TupleScheme<get_attribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_attribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetAttrId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAttrId()) {
          oprot.writeI32(struct.attrId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_attribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrId = iprot.readI32();
          struct.setAttrIdIsSet(true);
        }
      }
    }

  }

  public static class get_attribute_result implements org.apache.thrift.TBase<get_attribute_result, get_attribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_attribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_attribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_attribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_attribute_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_attribute_result.class, metaDataMap);
    }

    public get_attribute_result() {
    }

    public get_attribute_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_attribute_result(get_attribute_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_attribute_result deepCopy() {
      return new get_attribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_attribute_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_attribute_result)
        return this.equals((get_attribute_result)that);
      return false;
    }

    public boolean equals(get_attribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_attribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_attribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_attribute_resultStandardSchemeFactory implements SchemeFactory {
      public get_attribute_resultStandardScheme getScheme() {
        return new get_attribute_resultStandardScheme();
      }
    }

    private static class get_attribute_resultStandardScheme extends StandardScheme<get_attribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_attribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_attribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_attribute_resultTupleSchemeFactory implements SchemeFactory {
      public get_attribute_resultTupleScheme getScheme() {
        return new get_attribute_resultTupleScheme();
      }
    }

    private static class get_attribute_resultTupleScheme extends TupleScheme<get_attribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_attribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_attribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_attribute_local_args implements org.apache.thrift.TBase<get_attribute_local_args, get_attribute_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_attribute_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_attribute_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_attribute_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_attribute_local_argsTupleSchemeFactory());
    }

    public long shardId; // required
    public long nodeId; // required
    public int attrId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      NODE_ID((short)2, "nodeId"),
      ATTR_ID((short)3, "attrId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // NODE_ID
            return NODE_ID;
          case 3: // ATTR_ID
            return ATTR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __NODEID_ISSET_ID = 1;
    private static final int __ATTRID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_attribute_local_args.class, metaDataMap);
    }

    public get_attribute_local_args() {
    }

    public get_attribute_local_args(
      long shardId,
      long nodeId,
      int attrId)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.attrId = attrId;
      setAttrIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_attribute_local_args(get_attribute_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.nodeId = other.nodeId;
      this.attrId = other.attrId;
    }

    public get_attribute_local_args deepCopy() {
      return new get_attribute_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAttrIdIsSet(false);
      this.attrId = 0;
    }

    public long getShardId() {
      return this.shardId;
    }

    public get_attribute_local_args setShardId(long shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_attribute_local_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public int getAttrId() {
      return this.attrId;
    }

    public get_attribute_local_args setAttrId(int attrId) {
      this.attrId = attrId;
      setAttrIdIsSet(true);
      return this;
    }

    public void unsetAttrId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    public void setAttrIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Long)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATTR_ID:
        if (value == null) {
          unsetAttrId();
        } else {
          setAttrId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case NODE_ID:
        return getNodeId();

      case ATTR_ID:
        return getAttrId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case NODE_ID:
        return isSetNodeId();
      case ATTR_ID:
        return isSetAttrId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_attribute_local_args)
        return this.equals((get_attribute_local_args)that);
      return false;
    }

    public boolean equals(get_attribute_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_attrId = true;
      boolean that_present_attrId = true;
      if (this_present_attrId || that_present_attrId) {
        if (!(this_present_attrId && that_present_attrId))
          return false;
        if (this.attrId != that.attrId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_attrId = true;
      list.add(present_attrId);
      if (present_attrId)
        list.add(attrId);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_attribute_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_attribute_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrId:");
      sb.append(this.attrId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_attribute_local_argsStandardSchemeFactory implements SchemeFactory {
      public get_attribute_local_argsStandardScheme getScheme() {
        return new get_attribute_local_argsStandardScheme();
      }
    }

    private static class get_attribute_local_argsStandardScheme extends StandardScheme<get_attribute_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_attribute_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shardId = iprot.readI64();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId = iprot.readI32();
                struct.setAttrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_attribute_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI64(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
        oprot.writeI32(struct.attrId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_attribute_local_argsTupleSchemeFactory implements SchemeFactory {
      public get_attribute_local_argsTupleScheme getScheme() {
        return new get_attribute_local_argsTupleScheme();
      }
    }

    private static class get_attribute_local_argsTupleScheme extends TupleScheme<get_attribute_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_attribute_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        if (struct.isSetAttrId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetShardId()) {
          oprot.writeI64(struct.shardId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAttrId()) {
          oprot.writeI32(struct.attrId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_attribute_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI64();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.attrId = iprot.readI32();
          struct.setAttrIdIsSet(true);
        }
      }
    }

  }

  public static class get_attribute_local_result implements org.apache.thrift.TBase<get_attribute_local_result, get_attribute_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_attribute_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_attribute_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_attribute_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_attribute_local_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_attribute_local_result.class, metaDataMap);
    }

    public get_attribute_local_result() {
    }

    public get_attribute_local_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_attribute_local_result(get_attribute_local_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_attribute_local_result deepCopy() {
      return new get_attribute_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_attribute_local_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_attribute_local_result)
        return this.equals((get_attribute_local_result)that);
      return false;
    }

    public boolean equals(get_attribute_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_attribute_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_attribute_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_attribute_local_resultStandardSchemeFactory implements SchemeFactory {
      public get_attribute_local_resultStandardScheme getScheme() {
        return new get_attribute_local_resultStandardScheme();
      }
    }

    private static class get_attribute_local_resultStandardScheme extends StandardScheme<get_attribute_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_attribute_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_attribute_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_attribute_local_resultTupleSchemeFactory implements SchemeFactory {
      public get_attribute_local_resultTupleScheme getScheme() {
        return new get_attribute_local_resultTupleScheme();
      }
    }

    private static class get_attribute_local_resultTupleScheme extends TupleScheme<get_attribute_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_attribute_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_attribute_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_args implements org.apache.thrift.TBase<get_neighbors_args, get_neighbors_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_argsTupleSchemeFactory());
    }

    public long nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_args.class, metaDataMap);
    }

    public get_neighbors_args() {
    }

    public get_neighbors_args(
      long nodeId)
    {
      this();
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_args(get_neighbors_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nodeId = other.nodeId;
    }

    public get_neighbors_args deepCopy() {
      return new get_neighbors_args(this);
    }

    @Override
    public void clear() {
      setNodeIdIsSet(false);
      this.nodeId = 0;
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_neighbors_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_args)
        return this.equals((get_neighbors_args)that);
      return false;
    }

    public boolean equals(get_neighbors_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_args(");
      boolean first = true;

      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_argsStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_argsStandardScheme getScheme() {
        return new get_neighbors_argsStandardScheme();
      }
    }

    private static class get_neighbors_argsStandardScheme extends StandardScheme<get_neighbors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_argsTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_argsTupleScheme getScheme() {
        return new get_neighbors_argsTupleScheme();
      }
    }

    private static class get_neighbors_argsTupleScheme extends TupleScheme<get_neighbors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_result implements org.apache.thrift.TBase<get_neighbors_result, get_neighbors_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_result.class, metaDataMap);
    }

    public get_neighbors_result() {
    }

    public get_neighbors_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_result(get_neighbors_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_neighbors_result deepCopy() {
      return new get_neighbors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public get_neighbors_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_result)
        return this.equals((get_neighbors_result)that);
      return false;
    }

    public boolean equals(get_neighbors_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_resultStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_resultStandardScheme getScheme() {
        return new get_neighbors_resultStandardScheme();
      }
    }

    private static class get_neighbors_resultStandardScheme extends StandardScheme<get_neighbors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter11 : struct.success)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_resultTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_resultTupleScheme getScheme() {
        return new get_neighbors_resultTupleScheme();
      }
    }

    private static class get_neighbors_resultTupleScheme extends TupleScheme<get_neighbors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter12 : struct.success)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_local_args implements org.apache.thrift.TBase<get_neighbors_local_args, get_neighbors_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __NODEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_local_args.class, metaDataMap);
    }

    public get_neighbors_local_args() {
    }

    public get_neighbors_local_args(
      int shardId,
      long nodeId)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_local_args(get_neighbors_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.nodeId = other.nodeId;
    }

    public get_neighbors_local_args deepCopy() {
      return new get_neighbors_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setNodeIdIsSet(false);
      this.nodeId = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public get_neighbors_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_neighbors_local_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_local_args)
        return this.equals((get_neighbors_local_args)that);
      return false;
    }

    public boolean equals(get_neighbors_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_local_argsStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_local_argsStandardScheme getScheme() {
        return new get_neighbors_local_argsStandardScheme();
      }
    }

    private static class get_neighbors_local_argsStandardScheme extends StandardScheme<get_neighbors_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_local_argsTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_local_argsTupleScheme getScheme() {
        return new get_neighbors_local_argsTupleScheme();
      }
    }

    private static class get_neighbors_local_argsTupleScheme extends TupleScheme<get_neighbors_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_local_result implements org.apache.thrift.TBase<get_neighbors_local_result, get_neighbors_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_local_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_local_result.class, metaDataMap);
    }

    public get_neighbors_local_result() {
    }

    public get_neighbors_local_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_local_result(get_neighbors_local_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_neighbors_local_result deepCopy() {
      return new get_neighbors_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public get_neighbors_local_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_local_result)
        return this.equals((get_neighbors_local_result)that);
      return false;
    }

    public boolean equals(get_neighbors_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_local_resultStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_local_resultStandardScheme getScheme() {
        return new get_neighbors_local_resultStandardScheme();
      }
    }

    private static class get_neighbors_local_resultStandardScheme extends StandardScheme<get_neighbors_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list16.size);
                  long _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readI64();
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter19 : struct.success)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_local_resultTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_local_resultTupleScheme getScheme() {
        return new get_neighbors_local_resultTupleScheme();
      }
    }

    private static class get_neighbors_local_resultTupleScheme extends TupleScheme<get_neighbors_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter20 : struct.success)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list21.size);
            long _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI64();
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_atype_args implements org.apache.thrift.TBase<get_neighbors_atype_args, get_neighbors_atype_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_atype_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_atype_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_atype_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_atype_argsTupleSchemeFactory());
    }

    public long nodeId; // required
    public long atype; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      ATYPE((short)2, "atype");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // ATYPE
            return ATYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODEID_ISSET_ID = 0;
    private static final int __ATYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_atype_args.class, metaDataMap);
    }

    public get_neighbors_atype_args() {
    }

    public get_neighbors_atype_args(
      long nodeId,
      long atype)
    {
      this();
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_atype_args(get_neighbors_atype_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nodeId = other.nodeId;
      this.atype = other.atype;
    }

    public get_neighbors_atype_args deepCopy() {
      return new get_neighbors_atype_args(this);
    }

    @Override
    public void clear() {
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAtypeIsSet(false);
      this.atype = 0;
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_neighbors_atype_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public get_neighbors_atype_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case ATYPE:
        return getAtype();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case ATYPE:
        return isSetAtype();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_atype_args)
        return this.equals((get_neighbors_atype_args)that);
      return false;
    }

    public boolean equals(get_neighbors_atype_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_atype_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_atype_args(");
      boolean first = true;

      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_atype_argsStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_argsStandardScheme getScheme() {
        return new get_neighbors_atype_argsStandardScheme();
      }
    }

    private static class get_neighbors_atype_argsStandardScheme extends StandardScheme<get_neighbors_atype_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_atype_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_atype_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_atype_argsTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_argsTupleScheme getScheme() {
        return new get_neighbors_atype_argsTupleScheme();
      }
    }

    private static class get_neighbors_atype_argsTupleScheme extends TupleScheme<get_neighbors_atype_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetAtype()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_atype_result implements org.apache.thrift.TBase<get_neighbors_atype_result, get_neighbors_atype_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_atype_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_atype_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_atype_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_atype_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_atype_result.class, metaDataMap);
    }

    public get_neighbors_atype_result() {
    }

    public get_neighbors_atype_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_atype_result(get_neighbors_atype_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_neighbors_atype_result deepCopy() {
      return new get_neighbors_atype_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public get_neighbors_atype_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_atype_result)
        return this.equals((get_neighbors_atype_result)that);
      return false;
    }

    public boolean equals(get_neighbors_atype_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_atype_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_atype_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_atype_resultStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_resultStandardScheme getScheme() {
        return new get_neighbors_atype_resultStandardScheme();
      }
    }

    private static class get_neighbors_atype_resultStandardScheme extends StandardScheme<get_neighbors_atype_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_atype_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list24.size);
                  long _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readI64();
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_atype_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter27 : struct.success)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_atype_resultTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_resultTupleScheme getScheme() {
        return new get_neighbors_atype_resultTupleScheme();
      }
    }

    private static class get_neighbors_atype_resultTupleScheme extends TupleScheme<get_neighbors_atype_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter28 : struct.success)
            {
              oprot.writeI64(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list29.size);
            long _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readI64();
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_atype_local_args implements org.apache.thrift.TBase<get_neighbors_atype_local_args, get_neighbors_atype_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_atype_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_atype_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_atype_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_atype_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long nodeId; // required
    public long atype; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      NODE_ID((short)2, "nodeId"),
      ATYPE((short)3, "atype");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // NODE_ID
            return NODE_ID;
          case 3: // ATYPE
            return ATYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __NODEID_ISSET_ID = 1;
    private static final int __ATYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_atype_local_args.class, metaDataMap);
    }

    public get_neighbors_atype_local_args() {
    }

    public get_neighbors_atype_local_args(
      int shardId,
      long nodeId,
      long atype)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_atype_local_args(get_neighbors_atype_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.nodeId = other.nodeId;
      this.atype = other.atype;
    }

    public get_neighbors_atype_local_args deepCopy() {
      return new get_neighbors_atype_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAtypeIsSet(false);
      this.atype = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public get_neighbors_atype_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_neighbors_atype_local_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public get_neighbors_atype_local_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case NODE_ID:
        return getNodeId();

      case ATYPE:
        return getAtype();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case NODE_ID:
        return isSetNodeId();
      case ATYPE:
        return isSetAtype();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_atype_local_args)
        return this.equals((get_neighbors_atype_local_args)that);
      return false;
    }

    public boolean equals(get_neighbors_atype_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_atype_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_atype_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_atype_local_argsStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_local_argsStandardScheme getScheme() {
        return new get_neighbors_atype_local_argsStandardScheme();
      }
    }

    private static class get_neighbors_atype_local_argsStandardScheme extends StandardScheme<get_neighbors_atype_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_atype_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_atype_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_atype_local_argsTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_local_argsTupleScheme getScheme() {
        return new get_neighbors_atype_local_argsTupleScheme();
      }
    }

    private static class get_neighbors_atype_local_argsTupleScheme extends TupleScheme<get_neighbors_atype_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        if (struct.isSetAtype()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_atype_local_result implements org.apache.thrift.TBase<get_neighbors_atype_local_result, get_neighbors_atype_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_atype_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_atype_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_atype_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_atype_local_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_atype_local_result.class, metaDataMap);
    }

    public get_neighbors_atype_local_result() {
    }

    public get_neighbors_atype_local_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_atype_local_result(get_neighbors_atype_local_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_neighbors_atype_local_result deepCopy() {
      return new get_neighbors_atype_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public get_neighbors_atype_local_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_atype_local_result)
        return this.equals((get_neighbors_atype_local_result)that);
      return false;
    }

    public boolean equals(get_neighbors_atype_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_atype_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_atype_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_atype_local_resultStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_local_resultStandardScheme getScheme() {
        return new get_neighbors_atype_local_resultStandardScheme();
      }
    }

    private static class get_neighbors_atype_local_resultStandardScheme extends StandardScheme<get_neighbors_atype_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_atype_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list32.size);
                  long _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI64();
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_atype_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter35 : struct.success)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_atype_local_resultTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_atype_local_resultTupleScheme getScheme() {
        return new get_neighbors_atype_local_resultTupleScheme();
      }
    }

    private static class get_neighbors_atype_local_resultTupleScheme extends TupleScheme<get_neighbors_atype_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter36 : struct.success)
            {
              oprot.writeI64(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_atype_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list37.size);
            long _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI64();
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_attr_args implements org.apache.thrift.TBase<get_neighbors_attr_args, get_neighbors_attr_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_attr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_attr_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ATTR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_attr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_attr_argsTupleSchemeFactory());
    }

    public long nodeId; // required
    public int attrId; // required
    public String attrKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      ATTR_ID((short)2, "attrId"),
      ATTR_KEY((short)3, "attrKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // ATTR_ID
            return ATTR_ID;
          case 3: // ATTR_KEY
            return ATTR_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODEID_ISSET_ID = 0;
    private static final int __ATTRID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY, new org.apache.thrift.meta_data.FieldMetaData("attrKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_attr_args.class, metaDataMap);
    }

    public get_neighbors_attr_args() {
    }

    public get_neighbors_attr_args(
      long nodeId,
      int attrId,
      String attrKey)
    {
      this();
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.attrId = attrId;
      setAttrIdIsSet(true);
      this.attrKey = attrKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_attr_args(get_neighbors_attr_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nodeId = other.nodeId;
      this.attrId = other.attrId;
      if (other.isSetAttrKey()) {
        this.attrKey = other.attrKey;
      }
    }

    public get_neighbors_attr_args deepCopy() {
      return new get_neighbors_attr_args(this);
    }

    @Override
    public void clear() {
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAttrIdIsSet(false);
      this.attrId = 0;
      this.attrKey = null;
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_neighbors_attr_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public int getAttrId() {
      return this.attrId;
    }

    public get_neighbors_attr_args setAttrId(int attrId) {
      this.attrId = attrId;
      setAttrIdIsSet(true);
      return this;
    }

    public void unsetAttrId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    public void setAttrIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID_ISSET_ID, value);
    }

    public String getAttrKey() {
      return this.attrKey;
    }

    public get_neighbors_attr_args setAttrKey(String attrKey) {
      this.attrKey = attrKey;
      return this;
    }

    public void unsetAttrKey() {
      this.attrKey = null;
    }

    /** Returns true if field attrKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey() {
      return this.attrKey != null;
    }

    public void setAttrKeyIsSet(boolean value) {
      if (!value) {
        this.attrKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATTR_ID:
        if (value == null) {
          unsetAttrId();
        } else {
          setAttrId((Integer)value);
        }
        break;

      case ATTR_KEY:
        if (value == null) {
          unsetAttrKey();
        } else {
          setAttrKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case ATTR_ID:
        return getAttrId();

      case ATTR_KEY:
        return getAttrKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case ATTR_ID:
        return isSetAttrId();
      case ATTR_KEY:
        return isSetAttrKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_attr_args)
        return this.equals((get_neighbors_attr_args)that);
      return false;
    }

    public boolean equals(get_neighbors_attr_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_attrId = true;
      boolean that_present_attrId = true;
      if (this_present_attrId || that_present_attrId) {
        if (!(this_present_attrId && that_present_attrId))
          return false;
        if (this.attrId != that.attrId)
          return false;
      }

      boolean this_present_attrKey = true && this.isSetAttrKey();
      boolean that_present_attrKey = true && that.isSetAttrKey();
      if (this_present_attrKey || that_present_attrKey) {
        if (!(this_present_attrKey && that_present_attrKey))
          return false;
        if (!this.attrKey.equals(that.attrKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_attrId = true;
      list.add(present_attrId);
      if (present_attrId)
        list.add(attrId);

      boolean present_attrKey = true && (isSetAttrKey());
      list.add(present_attrKey);
      if (present_attrKey)
        list.add(attrKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_attr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey()).compareTo(other.isSetAttrKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey, other.attrKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_attr_args(");
      boolean first = true;

      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrId:");
      sb.append(this.attrId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey:");
      if (this.attrKey == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_attr_argsStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_argsStandardScheme getScheme() {
        return new get_neighbors_attr_argsStandardScheme();
      }
    }

    private static class get_neighbors_attr_argsStandardScheme extends StandardScheme<get_neighbors_attr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_attr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId = iprot.readI32();
                struct.setAttrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTR_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey = iprot.readString();
                struct.setAttrKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_attr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
        oprot.writeI32(struct.attrId);
        oprot.writeFieldEnd();
        if (struct.attrKey != null) {
          oprot.writeFieldBegin(ATTR_KEY_FIELD_DESC);
          oprot.writeString(struct.attrKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_attr_argsTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_argsTupleScheme getScheme() {
        return new get_neighbors_attr_argsTupleScheme();
      }
    }

    private static class get_neighbors_attr_argsTupleScheme extends TupleScheme<get_neighbors_attr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetAttrId()) {
          optionals.set(1);
        }
        if (struct.isSetAttrKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAttrId()) {
          oprot.writeI32(struct.attrId);
        }
        if (struct.isSetAttrKey()) {
          oprot.writeString(struct.attrKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrId = iprot.readI32();
          struct.setAttrIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.attrKey = iprot.readString();
          struct.setAttrKeyIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_attr_result implements org.apache.thrift.TBase<get_neighbors_attr_result, get_neighbors_attr_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_attr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_attr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_attr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_attr_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_attr_result.class, metaDataMap);
    }

    public get_neighbors_attr_result() {
    }

    public get_neighbors_attr_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_attr_result(get_neighbors_attr_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_neighbors_attr_result deepCopy() {
      return new get_neighbors_attr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public get_neighbors_attr_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_attr_result)
        return this.equals((get_neighbors_attr_result)that);
      return false;
    }

    public boolean equals(get_neighbors_attr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_attr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_attr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_attr_resultStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_resultStandardScheme getScheme() {
        return new get_neighbors_attr_resultStandardScheme();
      }
    }

    private static class get_neighbors_attr_resultStandardScheme extends StandardScheme<get_neighbors_attr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_attr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list40.size);
                  long _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readI64();
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_attr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter43 : struct.success)
            {
              oprot.writeI64(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_attr_resultTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_resultTupleScheme getScheme() {
        return new get_neighbors_attr_resultTupleScheme();
      }
    }

    private static class get_neighbors_attr_resultTupleScheme extends TupleScheme<get_neighbors_attr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter44 : struct.success)
            {
              oprot.writeI64(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list45.size);
            long _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readI64();
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_attr_local_args implements org.apache.thrift.TBase<get_neighbors_attr_local_args, get_neighbors_attr_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_attr_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_attr_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ATTR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_attr_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_attr_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long nodeId; // required
    public int attrId; // required
    public String attrKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      NODE_ID((short)2, "nodeId"),
      ATTR_ID((short)3, "attrId"),
      ATTR_KEY((short)4, "attrKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // NODE_ID
            return NODE_ID;
          case 3: // ATTR_ID
            return ATTR_ID;
          case 4: // ATTR_KEY
            return ATTR_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __NODEID_ISSET_ID = 1;
    private static final int __ATTRID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY, new org.apache.thrift.meta_data.FieldMetaData("attrKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_attr_local_args.class, metaDataMap);
    }

    public get_neighbors_attr_local_args() {
    }

    public get_neighbors_attr_local_args(
      int shardId,
      long nodeId,
      int attrId,
      String attrKey)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.attrId = attrId;
      setAttrIdIsSet(true);
      this.attrKey = attrKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_attr_local_args(get_neighbors_attr_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.nodeId = other.nodeId;
      this.attrId = other.attrId;
      if (other.isSetAttrKey()) {
        this.attrKey = other.attrKey;
      }
    }

    public get_neighbors_attr_local_args deepCopy() {
      return new get_neighbors_attr_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAttrIdIsSet(false);
      this.attrId = 0;
      this.attrKey = null;
    }

    public int getShardId() {
      return this.shardId;
    }

    public get_neighbors_attr_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_neighbors_attr_local_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public int getAttrId() {
      return this.attrId;
    }

    public get_neighbors_attr_local_args setAttrId(int attrId) {
      this.attrId = attrId;
      setAttrIdIsSet(true);
      return this;
    }

    public void unsetAttrId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    public void setAttrIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID_ISSET_ID, value);
    }

    public String getAttrKey() {
      return this.attrKey;
    }

    public get_neighbors_attr_local_args setAttrKey(String attrKey) {
      this.attrKey = attrKey;
      return this;
    }

    public void unsetAttrKey() {
      this.attrKey = null;
    }

    /** Returns true if field attrKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey() {
      return this.attrKey != null;
    }

    public void setAttrKeyIsSet(boolean value) {
      if (!value) {
        this.attrKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATTR_ID:
        if (value == null) {
          unsetAttrId();
        } else {
          setAttrId((Integer)value);
        }
        break;

      case ATTR_KEY:
        if (value == null) {
          unsetAttrKey();
        } else {
          setAttrKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case NODE_ID:
        return getNodeId();

      case ATTR_ID:
        return getAttrId();

      case ATTR_KEY:
        return getAttrKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case NODE_ID:
        return isSetNodeId();
      case ATTR_ID:
        return isSetAttrId();
      case ATTR_KEY:
        return isSetAttrKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_attr_local_args)
        return this.equals((get_neighbors_attr_local_args)that);
      return false;
    }

    public boolean equals(get_neighbors_attr_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_attrId = true;
      boolean that_present_attrId = true;
      if (this_present_attrId || that_present_attrId) {
        if (!(this_present_attrId && that_present_attrId))
          return false;
        if (this.attrId != that.attrId)
          return false;
      }

      boolean this_present_attrKey = true && this.isSetAttrKey();
      boolean that_present_attrKey = true && that.isSetAttrKey();
      if (this_present_attrKey || that_present_attrKey) {
        if (!(this_present_attrKey && that_present_attrKey))
          return false;
        if (!this.attrKey.equals(that.attrKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_attrId = true;
      list.add(present_attrId);
      if (present_attrId)
        list.add(attrId);

      boolean present_attrKey = true && (isSetAttrKey());
      list.add(present_attrKey);
      if (present_attrKey)
        list.add(attrKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_attr_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey()).compareTo(other.isSetAttrKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey, other.attrKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_attr_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrId:");
      sb.append(this.attrId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey:");
      if (this.attrKey == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_attr_local_argsStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_local_argsStandardScheme getScheme() {
        return new get_neighbors_attr_local_argsStandardScheme();
      }
    }

    private static class get_neighbors_attr_local_argsStandardScheme extends StandardScheme<get_neighbors_attr_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_attr_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId = iprot.readI32();
                struct.setAttrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ATTR_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey = iprot.readString();
                struct.setAttrKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_attr_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
        oprot.writeI32(struct.attrId);
        oprot.writeFieldEnd();
        if (struct.attrKey != null) {
          oprot.writeFieldBegin(ATTR_KEY_FIELD_DESC);
          oprot.writeString(struct.attrKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_attr_local_argsTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_local_argsTupleScheme getScheme() {
        return new get_neighbors_attr_local_argsTupleScheme();
      }
    }

    private static class get_neighbors_attr_local_argsTupleScheme extends TupleScheme<get_neighbors_attr_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        if (struct.isSetAttrId()) {
          optionals.set(2);
        }
        if (struct.isSetAttrKey()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAttrId()) {
          oprot.writeI32(struct.attrId);
        }
        if (struct.isSetAttrKey()) {
          oprot.writeString(struct.attrKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.attrId = iprot.readI32();
          struct.setAttrIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.attrKey = iprot.readString();
          struct.setAttrKeyIsSet(true);
        }
      }
    }

  }

  public static class get_neighbors_attr_local_result implements org.apache.thrift.TBase<get_neighbors_attr_local_result, get_neighbors_attr_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_neighbors_attr_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_neighbors_attr_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_neighbors_attr_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_neighbors_attr_local_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_neighbors_attr_local_result.class, metaDataMap);
    }

    public get_neighbors_attr_local_result() {
    }

    public get_neighbors_attr_local_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_neighbors_attr_local_result(get_neighbors_attr_local_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_neighbors_attr_local_result deepCopy() {
      return new get_neighbors_attr_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public get_neighbors_attr_local_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_neighbors_attr_local_result)
        return this.equals((get_neighbors_attr_local_result)that);
      return false;
    }

    public boolean equals(get_neighbors_attr_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_neighbors_attr_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_neighbors_attr_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_neighbors_attr_local_resultStandardSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_local_resultStandardScheme getScheme() {
        return new get_neighbors_attr_local_resultStandardScheme();
      }
    }

    private static class get_neighbors_attr_local_resultStandardScheme extends StandardScheme<get_neighbors_attr_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_neighbors_attr_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list48.size);
                  long _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readI64();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_neighbors_attr_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter51 : struct.success)
            {
              oprot.writeI64(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_neighbors_attr_local_resultTupleSchemeFactory implements SchemeFactory {
      public get_neighbors_attr_local_resultTupleScheme getScheme() {
        return new get_neighbors_attr_local_resultTupleScheme();
      }
    }

    private static class get_neighbors_attr_local_resultTupleScheme extends TupleScheme<get_neighbors_attr_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter52 : struct.success)
            {
              oprot.writeI64(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_neighbors_attr_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list53.size);
            long _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readI64();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_nodes_args implements org.apache.thrift.TBase<get_nodes_args, get_nodes_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes_args");

    private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes_argsTupleSchemeFactory());
    }

    public int attrId; // required
    public String attrKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTR_ID((short)1, "attrId"),
      ATTR_KEY((short)2, "attrKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTR_ID
            return ATTR_ID;
          case 2: // ATTR_KEY
            return ATTR_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ATTRID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY, new org.apache.thrift.meta_data.FieldMetaData("attrKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes_args.class, metaDataMap);
    }

    public get_nodes_args() {
    }

    public get_nodes_args(
      int attrId,
      String attrKey)
    {
      this();
      this.attrId = attrId;
      setAttrIdIsSet(true);
      this.attrKey = attrKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes_args(get_nodes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.attrId = other.attrId;
      if (other.isSetAttrKey()) {
        this.attrKey = other.attrKey;
      }
    }

    public get_nodes_args deepCopy() {
      return new get_nodes_args(this);
    }

    @Override
    public void clear() {
      setAttrIdIsSet(false);
      this.attrId = 0;
      this.attrKey = null;
    }

    public int getAttrId() {
      return this.attrId;
    }

    public get_nodes_args setAttrId(int attrId) {
      this.attrId = attrId;
      setAttrIdIsSet(true);
      return this;
    }

    public void unsetAttrId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    public void setAttrIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID_ISSET_ID, value);
    }

    public String getAttrKey() {
      return this.attrKey;
    }

    public get_nodes_args setAttrKey(String attrKey) {
      this.attrKey = attrKey;
      return this;
    }

    public void unsetAttrKey() {
      this.attrKey = null;
    }

    /** Returns true if field attrKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey() {
      return this.attrKey != null;
    }

    public void setAttrKeyIsSet(boolean value) {
      if (!value) {
        this.attrKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTR_ID:
        if (value == null) {
          unsetAttrId();
        } else {
          setAttrId((Integer)value);
        }
        break;

      case ATTR_KEY:
        if (value == null) {
          unsetAttrKey();
        } else {
          setAttrKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTR_ID:
        return getAttrId();

      case ATTR_KEY:
        return getAttrKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTR_ID:
        return isSetAttrId();
      case ATTR_KEY:
        return isSetAttrKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes_args)
        return this.equals((get_nodes_args)that);
      return false;
    }

    public boolean equals(get_nodes_args that) {
      if (that == null)
        return false;

      boolean this_present_attrId = true;
      boolean that_present_attrId = true;
      if (this_present_attrId || that_present_attrId) {
        if (!(this_present_attrId && that_present_attrId))
          return false;
        if (this.attrId != that.attrId)
          return false;
      }

      boolean this_present_attrKey = true && this.isSetAttrKey();
      boolean that_present_attrKey = true && that.isSetAttrKey();
      if (this_present_attrKey || that_present_attrKey) {
        if (!(this_present_attrKey && that_present_attrKey))
          return false;
        if (!this.attrKey.equals(that.attrKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_attrId = true;
      list.add(present_attrId);
      if (present_attrId)
        list.add(attrId);

      boolean present_attrKey = true && (isSetAttrKey());
      list.add(present_attrKey);
      if (present_attrKey)
        list.add(attrKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey()).compareTo(other.isSetAttrKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey, other.attrKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes_args(");
      boolean first = true;

      sb.append("attrId:");
      sb.append(this.attrId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey:");
      if (this.attrKey == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes_argsStandardSchemeFactory implements SchemeFactory {
      public get_nodes_argsStandardScheme getScheme() {
        return new get_nodes_argsStandardScheme();
      }
    }

    private static class get_nodes_argsStandardScheme extends StandardScheme<get_nodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId = iprot.readI32();
                struct.setAttrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey = iprot.readString();
                struct.setAttrKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
        oprot.writeI32(struct.attrId);
        oprot.writeFieldEnd();
        if (struct.attrKey != null) {
          oprot.writeFieldBegin(ATTR_KEY_FIELD_DESC);
          oprot.writeString(struct.attrKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes_argsTupleSchemeFactory implements SchemeFactory {
      public get_nodes_argsTupleScheme getScheme() {
        return new get_nodes_argsTupleScheme();
      }
    }

    private static class get_nodes_argsTupleScheme extends TupleScheme<get_nodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttrId()) {
          optionals.set(0);
        }
        if (struct.isSetAttrKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAttrId()) {
          oprot.writeI32(struct.attrId);
        }
        if (struct.isSetAttrKey()) {
          oprot.writeString(struct.attrKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.attrId = iprot.readI32();
          struct.setAttrIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrKey = iprot.readString();
          struct.setAttrKeyIsSet(true);
        }
      }
    }

  }

  public static class get_nodes_result implements org.apache.thrift.TBase<get_nodes_result, get_nodes_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes_resultTupleSchemeFactory());
    }

    public Set<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes_result.class, metaDataMap);
    }

    public get_nodes_result() {
    }

    public get_nodes_result(
      Set<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes_result(get_nodes_result other) {
      if (other.isSetSuccess()) {
        Set<Long> __this__success = new HashSet<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_nodes_result deepCopy() {
      return new get_nodes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new HashSet<Long>();
      }
      this.success.add(elem);
    }

    public Set<Long> getSuccess() {
      return this.success;
    }

    public get_nodes_result setSuccess(Set<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes_result)
        return this.equals((get_nodes_result)that);
      return false;
    }

    public boolean equals(get_nodes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes_resultStandardSchemeFactory implements SchemeFactory {
      public get_nodes_resultStandardScheme getScheme() {
        return new get_nodes_resultStandardScheme();
      }
    }

    private static class get_nodes_resultStandardScheme extends StandardScheme<get_nodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set56 = iprot.readSetBegin();
                  struct.success = new HashSet<Long>(2*_set56.size);
                  long _elem57;
                  for (int _i58 = 0; _i58 < _set56.size; ++_i58)
                  {
                    _elem57 = iprot.readI64();
                    struct.success.add(_elem57);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter59 : struct.success)
            {
              oprot.writeI64(_iter59);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes_resultTupleSchemeFactory implements SchemeFactory {
      public get_nodes_resultTupleScheme getScheme() {
        return new get_nodes_resultTupleScheme();
      }
    }

    private static class get_nodes_resultTupleScheme extends TupleScheme<get_nodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter60 : struct.success)
            {
              oprot.writeI64(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set61 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashSet<Long>(2*_set61.size);
            long _elem62;
            for (int _i63 = 0; _i63 < _set61.size; ++_i63)
            {
              _elem62 = iprot.readI64();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_nodes_local_args implements org.apache.thrift.TBase<get_nodes_local_args, get_nodes_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes_local_args");

    private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes_local_argsTupleSchemeFactory());
    }

    public int attrId; // required
    public String attrKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTR_ID((short)1, "attrId"),
      ATTR_KEY((short)2, "attrKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTR_ID
            return ATTR_ID;
          case 2: // ATTR_KEY
            return ATTR_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ATTRID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY, new org.apache.thrift.meta_data.FieldMetaData("attrKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes_local_args.class, metaDataMap);
    }

    public get_nodes_local_args() {
    }

    public get_nodes_local_args(
      int attrId,
      String attrKey)
    {
      this();
      this.attrId = attrId;
      setAttrIdIsSet(true);
      this.attrKey = attrKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes_local_args(get_nodes_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.attrId = other.attrId;
      if (other.isSetAttrKey()) {
        this.attrKey = other.attrKey;
      }
    }

    public get_nodes_local_args deepCopy() {
      return new get_nodes_local_args(this);
    }

    @Override
    public void clear() {
      setAttrIdIsSet(false);
      this.attrId = 0;
      this.attrKey = null;
    }

    public int getAttrId() {
      return this.attrId;
    }

    public get_nodes_local_args setAttrId(int attrId) {
      this.attrId = attrId;
      setAttrIdIsSet(true);
      return this;
    }

    public void unsetAttrId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    public void setAttrIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID_ISSET_ID, value);
    }

    public String getAttrKey() {
      return this.attrKey;
    }

    public get_nodes_local_args setAttrKey(String attrKey) {
      this.attrKey = attrKey;
      return this;
    }

    public void unsetAttrKey() {
      this.attrKey = null;
    }

    /** Returns true if field attrKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey() {
      return this.attrKey != null;
    }

    public void setAttrKeyIsSet(boolean value) {
      if (!value) {
        this.attrKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTR_ID:
        if (value == null) {
          unsetAttrId();
        } else {
          setAttrId((Integer)value);
        }
        break;

      case ATTR_KEY:
        if (value == null) {
          unsetAttrKey();
        } else {
          setAttrKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTR_ID:
        return getAttrId();

      case ATTR_KEY:
        return getAttrKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTR_ID:
        return isSetAttrId();
      case ATTR_KEY:
        return isSetAttrKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes_local_args)
        return this.equals((get_nodes_local_args)that);
      return false;
    }

    public boolean equals(get_nodes_local_args that) {
      if (that == null)
        return false;

      boolean this_present_attrId = true;
      boolean that_present_attrId = true;
      if (this_present_attrId || that_present_attrId) {
        if (!(this_present_attrId && that_present_attrId))
          return false;
        if (this.attrId != that.attrId)
          return false;
      }

      boolean this_present_attrKey = true && this.isSetAttrKey();
      boolean that_present_attrKey = true && that.isSetAttrKey();
      if (this_present_attrKey || that_present_attrKey) {
        if (!(this_present_attrKey && that_present_attrKey))
          return false;
        if (!this.attrKey.equals(that.attrKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_attrId = true;
      list.add(present_attrId);
      if (present_attrId)
        list.add(attrId);

      boolean present_attrKey = true && (isSetAttrKey());
      list.add(present_attrKey);
      if (present_attrKey)
        list.add(attrKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey()).compareTo(other.isSetAttrKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey, other.attrKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes_local_args(");
      boolean first = true;

      sb.append("attrId:");
      sb.append(this.attrId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey:");
      if (this.attrKey == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes_local_argsStandardSchemeFactory implements SchemeFactory {
      public get_nodes_local_argsStandardScheme getScheme() {
        return new get_nodes_local_argsStandardScheme();
      }
    }

    private static class get_nodes_local_argsStandardScheme extends StandardScheme<get_nodes_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId = iprot.readI32();
                struct.setAttrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey = iprot.readString();
                struct.setAttrKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
        oprot.writeI32(struct.attrId);
        oprot.writeFieldEnd();
        if (struct.attrKey != null) {
          oprot.writeFieldBegin(ATTR_KEY_FIELD_DESC);
          oprot.writeString(struct.attrKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes_local_argsTupleSchemeFactory implements SchemeFactory {
      public get_nodes_local_argsTupleScheme getScheme() {
        return new get_nodes_local_argsTupleScheme();
      }
    }

    private static class get_nodes_local_argsTupleScheme extends TupleScheme<get_nodes_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttrId()) {
          optionals.set(0);
        }
        if (struct.isSetAttrKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAttrId()) {
          oprot.writeI32(struct.attrId);
        }
        if (struct.isSetAttrKey()) {
          oprot.writeString(struct.attrKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.attrId = iprot.readI32();
          struct.setAttrIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrKey = iprot.readString();
          struct.setAttrKeyIsSet(true);
        }
      }
    }

  }

  public static class get_nodes_local_result implements org.apache.thrift.TBase<get_nodes_local_result, get_nodes_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes_local_resultTupleSchemeFactory());
    }

    public Set<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes_local_result.class, metaDataMap);
    }

    public get_nodes_local_result() {
    }

    public get_nodes_local_result(
      Set<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes_local_result(get_nodes_local_result other) {
      if (other.isSetSuccess()) {
        Set<Long> __this__success = new HashSet<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_nodes_local_result deepCopy() {
      return new get_nodes_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new HashSet<Long>();
      }
      this.success.add(elem);
    }

    public Set<Long> getSuccess() {
      return this.success;
    }

    public get_nodes_local_result setSuccess(Set<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes_local_result)
        return this.equals((get_nodes_local_result)that);
      return false;
    }

    public boolean equals(get_nodes_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes_local_resultStandardSchemeFactory implements SchemeFactory {
      public get_nodes_local_resultStandardScheme getScheme() {
        return new get_nodes_local_resultStandardScheme();
      }
    }

    private static class get_nodes_local_resultStandardScheme extends StandardScheme<get_nodes_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set64 = iprot.readSetBegin();
                  struct.success = new HashSet<Long>(2*_set64.size);
                  long _elem65;
                  for (int _i66 = 0; _i66 < _set64.size; ++_i66)
                  {
                    _elem65 = iprot.readI64();
                    struct.success.add(_elem65);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter67 : struct.success)
            {
              oprot.writeI64(_iter67);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes_local_resultTupleSchemeFactory implements SchemeFactory {
      public get_nodes_local_resultTupleScheme getScheme() {
        return new get_nodes_local_resultTupleScheme();
      }
    }

    private static class get_nodes_local_resultTupleScheme extends TupleScheme<get_nodes_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter68 : struct.success)
            {
              oprot.writeI64(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set69 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashSet<Long>(2*_set69.size);
            long _elem70;
            for (int _i71 = 0; _i71 < _set69.size; ++_i71)
            {
              _elem70 = iprot.readI64();
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_nodes2_args implements org.apache.thrift.TBase<get_nodes2_args, get_nodes2_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes2_args");

    private static final org.apache.thrift.protocol.TField ATTR_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_KEY1_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ATTR_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId2", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ATTR_KEY2_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey2", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes2_argsTupleSchemeFactory());
    }

    public int attrId1; // required
    public String attrKey1; // required
    public int attrId2; // required
    public String attrKey2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTR_ID1((short)1, "attrId1"),
      ATTR_KEY1((short)2, "attrKey1"),
      ATTR_ID2((short)3, "attrId2"),
      ATTR_KEY2((short)4, "attrKey2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTR_ID1
            return ATTR_ID1;
          case 2: // ATTR_KEY1
            return ATTR_KEY1;
          case 3: // ATTR_ID2
            return ATTR_ID2;
          case 4: // ATTR_KEY2
            return ATTR_KEY2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ATTRID1_ISSET_ID = 0;
    private static final int __ATTRID2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTR_ID1, new org.apache.thrift.meta_data.FieldMetaData("attrId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY1, new org.apache.thrift.meta_data.FieldMetaData("attrKey1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTR_ID2, new org.apache.thrift.meta_data.FieldMetaData("attrId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY2, new org.apache.thrift.meta_data.FieldMetaData("attrKey2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes2_args.class, metaDataMap);
    }

    public get_nodes2_args() {
    }

    public get_nodes2_args(
      int attrId1,
      String attrKey1,
      int attrId2,
      String attrKey2)
    {
      this();
      this.attrId1 = attrId1;
      setAttrId1IsSet(true);
      this.attrKey1 = attrKey1;
      this.attrId2 = attrId2;
      setAttrId2IsSet(true);
      this.attrKey2 = attrKey2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes2_args(get_nodes2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.attrId1 = other.attrId1;
      if (other.isSetAttrKey1()) {
        this.attrKey1 = other.attrKey1;
      }
      this.attrId2 = other.attrId2;
      if (other.isSetAttrKey2()) {
        this.attrKey2 = other.attrKey2;
      }
    }

    public get_nodes2_args deepCopy() {
      return new get_nodes2_args(this);
    }

    @Override
    public void clear() {
      setAttrId1IsSet(false);
      this.attrId1 = 0;
      this.attrKey1 = null;
      setAttrId2IsSet(false);
      this.attrId2 = 0;
      this.attrKey2 = null;
    }

    public int getAttrId1() {
      return this.attrId1;
    }

    public get_nodes2_args setAttrId1(int attrId1) {
      this.attrId1 = attrId1;
      setAttrId1IsSet(true);
      return this;
    }

    public void unsetAttrId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID1_ISSET_ID);
    }

    /** Returns true if field attrId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID1_ISSET_ID);
    }

    public void setAttrId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID1_ISSET_ID, value);
    }

    public String getAttrKey1() {
      return this.attrKey1;
    }

    public get_nodes2_args setAttrKey1(String attrKey1) {
      this.attrKey1 = attrKey1;
      return this;
    }

    public void unsetAttrKey1() {
      this.attrKey1 = null;
    }

    /** Returns true if field attrKey1 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey1() {
      return this.attrKey1 != null;
    }

    public void setAttrKey1IsSet(boolean value) {
      if (!value) {
        this.attrKey1 = null;
      }
    }

    public int getAttrId2() {
      return this.attrId2;
    }

    public get_nodes2_args setAttrId2(int attrId2) {
      this.attrId2 = attrId2;
      setAttrId2IsSet(true);
      return this;
    }

    public void unsetAttrId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID2_ISSET_ID);
    }

    /** Returns true if field attrId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId2() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID2_ISSET_ID);
    }

    public void setAttrId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID2_ISSET_ID, value);
    }

    public String getAttrKey2() {
      return this.attrKey2;
    }

    public get_nodes2_args setAttrKey2(String attrKey2) {
      this.attrKey2 = attrKey2;
      return this;
    }

    public void unsetAttrKey2() {
      this.attrKey2 = null;
    }

    /** Returns true if field attrKey2 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey2() {
      return this.attrKey2 != null;
    }

    public void setAttrKey2IsSet(boolean value) {
      if (!value) {
        this.attrKey2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTR_ID1:
        if (value == null) {
          unsetAttrId1();
        } else {
          setAttrId1((Integer)value);
        }
        break;

      case ATTR_KEY1:
        if (value == null) {
          unsetAttrKey1();
        } else {
          setAttrKey1((String)value);
        }
        break;

      case ATTR_ID2:
        if (value == null) {
          unsetAttrId2();
        } else {
          setAttrId2((Integer)value);
        }
        break;

      case ATTR_KEY2:
        if (value == null) {
          unsetAttrKey2();
        } else {
          setAttrKey2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTR_ID1:
        return getAttrId1();

      case ATTR_KEY1:
        return getAttrKey1();

      case ATTR_ID2:
        return getAttrId2();

      case ATTR_KEY2:
        return getAttrKey2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTR_ID1:
        return isSetAttrId1();
      case ATTR_KEY1:
        return isSetAttrKey1();
      case ATTR_ID2:
        return isSetAttrId2();
      case ATTR_KEY2:
        return isSetAttrKey2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes2_args)
        return this.equals((get_nodes2_args)that);
      return false;
    }

    public boolean equals(get_nodes2_args that) {
      if (that == null)
        return false;

      boolean this_present_attrId1 = true;
      boolean that_present_attrId1 = true;
      if (this_present_attrId1 || that_present_attrId1) {
        if (!(this_present_attrId1 && that_present_attrId1))
          return false;
        if (this.attrId1 != that.attrId1)
          return false;
      }

      boolean this_present_attrKey1 = true && this.isSetAttrKey1();
      boolean that_present_attrKey1 = true && that.isSetAttrKey1();
      if (this_present_attrKey1 || that_present_attrKey1) {
        if (!(this_present_attrKey1 && that_present_attrKey1))
          return false;
        if (!this.attrKey1.equals(that.attrKey1))
          return false;
      }

      boolean this_present_attrId2 = true;
      boolean that_present_attrId2 = true;
      if (this_present_attrId2 || that_present_attrId2) {
        if (!(this_present_attrId2 && that_present_attrId2))
          return false;
        if (this.attrId2 != that.attrId2)
          return false;
      }

      boolean this_present_attrKey2 = true && this.isSetAttrKey2();
      boolean that_present_attrKey2 = true && that.isSetAttrKey2();
      if (this_present_attrKey2 || that_present_attrKey2) {
        if (!(this_present_attrKey2 && that_present_attrKey2))
          return false;
        if (!this.attrKey2.equals(that.attrKey2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_attrId1 = true;
      list.add(present_attrId1);
      if (present_attrId1)
        list.add(attrId1);

      boolean present_attrKey1 = true && (isSetAttrKey1());
      list.add(present_attrKey1);
      if (present_attrKey1)
        list.add(attrKey1);

      boolean present_attrId2 = true;
      list.add(present_attrId2);
      if (present_attrId2)
        list.add(attrId2);

      boolean present_attrKey2 = true && (isSetAttrKey2());
      list.add(present_attrKey2);
      if (present_attrKey2)
        list.add(attrKey2);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAttrId1()).compareTo(other.isSetAttrId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId1, other.attrId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey1()).compareTo(other.isSetAttrKey1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey1, other.attrKey1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrId2()).compareTo(other.isSetAttrId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId2, other.attrId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey2()).compareTo(other.isSetAttrKey2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey2, other.attrKey2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes2_args(");
      boolean first = true;

      sb.append("attrId1:");
      sb.append(this.attrId1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey1:");
      if (this.attrKey1 == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrId2:");
      sb.append(this.attrId2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey2:");
      if (this.attrKey2 == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes2_argsStandardSchemeFactory implements SchemeFactory {
      public get_nodes2_argsStandardScheme getScheme() {
        return new get_nodes2_argsStandardScheme();
      }
    }

    private static class get_nodes2_argsStandardScheme extends StandardScheme<get_nodes2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTR_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId1 = iprot.readI32();
                struct.setAttrId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_KEY1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey1 = iprot.readString();
                struct.setAttrKey1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTR_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId2 = iprot.readI32();
                struct.setAttrId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ATTR_KEY2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey2 = iprot.readString();
                struct.setAttrKey2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ATTR_ID1_FIELD_DESC);
        oprot.writeI32(struct.attrId1);
        oprot.writeFieldEnd();
        if (struct.attrKey1 != null) {
          oprot.writeFieldBegin(ATTR_KEY1_FIELD_DESC);
          oprot.writeString(struct.attrKey1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ATTR_ID2_FIELD_DESC);
        oprot.writeI32(struct.attrId2);
        oprot.writeFieldEnd();
        if (struct.attrKey2 != null) {
          oprot.writeFieldBegin(ATTR_KEY2_FIELD_DESC);
          oprot.writeString(struct.attrKey2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes2_argsTupleSchemeFactory implements SchemeFactory {
      public get_nodes2_argsTupleScheme getScheme() {
        return new get_nodes2_argsTupleScheme();
      }
    }

    private static class get_nodes2_argsTupleScheme extends TupleScheme<get_nodes2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttrId1()) {
          optionals.set(0);
        }
        if (struct.isSetAttrKey1()) {
          optionals.set(1);
        }
        if (struct.isSetAttrId2()) {
          optionals.set(2);
        }
        if (struct.isSetAttrKey2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAttrId1()) {
          oprot.writeI32(struct.attrId1);
        }
        if (struct.isSetAttrKey1()) {
          oprot.writeString(struct.attrKey1);
        }
        if (struct.isSetAttrId2()) {
          oprot.writeI32(struct.attrId2);
        }
        if (struct.isSetAttrKey2()) {
          oprot.writeString(struct.attrKey2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.attrId1 = iprot.readI32();
          struct.setAttrId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrKey1 = iprot.readString();
          struct.setAttrKey1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.attrId2 = iprot.readI32();
          struct.setAttrId2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.attrKey2 = iprot.readString();
          struct.setAttrKey2IsSet(true);
        }
      }
    }

  }

  public static class get_nodes2_result implements org.apache.thrift.TBase<get_nodes2_result, get_nodes2_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes2_resultTupleSchemeFactory());
    }

    public Set<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes2_result.class, metaDataMap);
    }

    public get_nodes2_result() {
    }

    public get_nodes2_result(
      Set<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes2_result(get_nodes2_result other) {
      if (other.isSetSuccess()) {
        Set<Long> __this__success = new HashSet<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_nodes2_result deepCopy() {
      return new get_nodes2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new HashSet<Long>();
      }
      this.success.add(elem);
    }

    public Set<Long> getSuccess() {
      return this.success;
    }

    public get_nodes2_result setSuccess(Set<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes2_result)
        return this.equals((get_nodes2_result)that);
      return false;
    }

    public boolean equals(get_nodes2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes2_resultStandardSchemeFactory implements SchemeFactory {
      public get_nodes2_resultStandardScheme getScheme() {
        return new get_nodes2_resultStandardScheme();
      }
    }

    private static class get_nodes2_resultStandardScheme extends StandardScheme<get_nodes2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set72 = iprot.readSetBegin();
                  struct.success = new HashSet<Long>(2*_set72.size);
                  long _elem73;
                  for (int _i74 = 0; _i74 < _set72.size; ++_i74)
                  {
                    _elem73 = iprot.readI64();
                    struct.success.add(_elem73);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter75 : struct.success)
            {
              oprot.writeI64(_iter75);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes2_resultTupleSchemeFactory implements SchemeFactory {
      public get_nodes2_resultTupleScheme getScheme() {
        return new get_nodes2_resultTupleScheme();
      }
    }

    private static class get_nodes2_resultTupleScheme extends TupleScheme<get_nodes2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter76 : struct.success)
            {
              oprot.writeI64(_iter76);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set77 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashSet<Long>(2*_set77.size);
            long _elem78;
            for (int _i79 = 0; _i79 < _set77.size; ++_i79)
            {
              _elem78 = iprot.readI64();
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_nodes2_local_args implements org.apache.thrift.TBase<get_nodes2_local_args, get_nodes2_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes2_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes2_local_args");

    private static final org.apache.thrift.protocol.TField ATTR_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_KEY1_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey1", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ATTR_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId2", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ATTR_KEY2_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey2", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes2_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes2_local_argsTupleSchemeFactory());
    }

    public int attrId1; // required
    public String attrKey1; // required
    public int attrId2; // required
    public String attrKey2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTR_ID1((short)1, "attrId1"),
      ATTR_KEY1((short)2, "attrKey1"),
      ATTR_ID2((short)3, "attrId2"),
      ATTR_KEY2((short)4, "attrKey2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTR_ID1
            return ATTR_ID1;
          case 2: // ATTR_KEY1
            return ATTR_KEY1;
          case 3: // ATTR_ID2
            return ATTR_ID2;
          case 4: // ATTR_KEY2
            return ATTR_KEY2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ATTRID1_ISSET_ID = 0;
    private static final int __ATTRID2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTR_ID1, new org.apache.thrift.meta_data.FieldMetaData("attrId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY1, new org.apache.thrift.meta_data.FieldMetaData("attrKey1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTR_ID2, new org.apache.thrift.meta_data.FieldMetaData("attrId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY2, new org.apache.thrift.meta_data.FieldMetaData("attrKey2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes2_local_args.class, metaDataMap);
    }

    public get_nodes2_local_args() {
    }

    public get_nodes2_local_args(
      int attrId1,
      String attrKey1,
      int attrId2,
      String attrKey2)
    {
      this();
      this.attrId1 = attrId1;
      setAttrId1IsSet(true);
      this.attrKey1 = attrKey1;
      this.attrId2 = attrId2;
      setAttrId2IsSet(true);
      this.attrKey2 = attrKey2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes2_local_args(get_nodes2_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.attrId1 = other.attrId1;
      if (other.isSetAttrKey1()) {
        this.attrKey1 = other.attrKey1;
      }
      this.attrId2 = other.attrId2;
      if (other.isSetAttrKey2()) {
        this.attrKey2 = other.attrKey2;
      }
    }

    public get_nodes2_local_args deepCopy() {
      return new get_nodes2_local_args(this);
    }

    @Override
    public void clear() {
      setAttrId1IsSet(false);
      this.attrId1 = 0;
      this.attrKey1 = null;
      setAttrId2IsSet(false);
      this.attrId2 = 0;
      this.attrKey2 = null;
    }

    public int getAttrId1() {
      return this.attrId1;
    }

    public get_nodes2_local_args setAttrId1(int attrId1) {
      this.attrId1 = attrId1;
      setAttrId1IsSet(true);
      return this;
    }

    public void unsetAttrId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID1_ISSET_ID);
    }

    /** Returns true if field attrId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID1_ISSET_ID);
    }

    public void setAttrId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID1_ISSET_ID, value);
    }

    public String getAttrKey1() {
      return this.attrKey1;
    }

    public get_nodes2_local_args setAttrKey1(String attrKey1) {
      this.attrKey1 = attrKey1;
      return this;
    }

    public void unsetAttrKey1() {
      this.attrKey1 = null;
    }

    /** Returns true if field attrKey1 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey1() {
      return this.attrKey1 != null;
    }

    public void setAttrKey1IsSet(boolean value) {
      if (!value) {
        this.attrKey1 = null;
      }
    }

    public int getAttrId2() {
      return this.attrId2;
    }

    public get_nodes2_local_args setAttrId2(int attrId2) {
      this.attrId2 = attrId2;
      setAttrId2IsSet(true);
      return this;
    }

    public void unsetAttrId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID2_ISSET_ID);
    }

    /** Returns true if field attrId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId2() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID2_ISSET_ID);
    }

    public void setAttrId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID2_ISSET_ID, value);
    }

    public String getAttrKey2() {
      return this.attrKey2;
    }

    public get_nodes2_local_args setAttrKey2(String attrKey2) {
      this.attrKey2 = attrKey2;
      return this;
    }

    public void unsetAttrKey2() {
      this.attrKey2 = null;
    }

    /** Returns true if field attrKey2 is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey2() {
      return this.attrKey2 != null;
    }

    public void setAttrKey2IsSet(boolean value) {
      if (!value) {
        this.attrKey2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTR_ID1:
        if (value == null) {
          unsetAttrId1();
        } else {
          setAttrId1((Integer)value);
        }
        break;

      case ATTR_KEY1:
        if (value == null) {
          unsetAttrKey1();
        } else {
          setAttrKey1((String)value);
        }
        break;

      case ATTR_ID2:
        if (value == null) {
          unsetAttrId2();
        } else {
          setAttrId2((Integer)value);
        }
        break;

      case ATTR_KEY2:
        if (value == null) {
          unsetAttrKey2();
        } else {
          setAttrKey2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTR_ID1:
        return getAttrId1();

      case ATTR_KEY1:
        return getAttrKey1();

      case ATTR_ID2:
        return getAttrId2();

      case ATTR_KEY2:
        return getAttrKey2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTR_ID1:
        return isSetAttrId1();
      case ATTR_KEY1:
        return isSetAttrKey1();
      case ATTR_ID2:
        return isSetAttrId2();
      case ATTR_KEY2:
        return isSetAttrKey2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes2_local_args)
        return this.equals((get_nodes2_local_args)that);
      return false;
    }

    public boolean equals(get_nodes2_local_args that) {
      if (that == null)
        return false;

      boolean this_present_attrId1 = true;
      boolean that_present_attrId1 = true;
      if (this_present_attrId1 || that_present_attrId1) {
        if (!(this_present_attrId1 && that_present_attrId1))
          return false;
        if (this.attrId1 != that.attrId1)
          return false;
      }

      boolean this_present_attrKey1 = true && this.isSetAttrKey1();
      boolean that_present_attrKey1 = true && that.isSetAttrKey1();
      if (this_present_attrKey1 || that_present_attrKey1) {
        if (!(this_present_attrKey1 && that_present_attrKey1))
          return false;
        if (!this.attrKey1.equals(that.attrKey1))
          return false;
      }

      boolean this_present_attrId2 = true;
      boolean that_present_attrId2 = true;
      if (this_present_attrId2 || that_present_attrId2) {
        if (!(this_present_attrId2 && that_present_attrId2))
          return false;
        if (this.attrId2 != that.attrId2)
          return false;
      }

      boolean this_present_attrKey2 = true && this.isSetAttrKey2();
      boolean that_present_attrKey2 = true && that.isSetAttrKey2();
      if (this_present_attrKey2 || that_present_attrKey2) {
        if (!(this_present_attrKey2 && that_present_attrKey2))
          return false;
        if (!this.attrKey2.equals(that.attrKey2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_attrId1 = true;
      list.add(present_attrId1);
      if (present_attrId1)
        list.add(attrId1);

      boolean present_attrKey1 = true && (isSetAttrKey1());
      list.add(present_attrKey1);
      if (present_attrKey1)
        list.add(attrKey1);

      boolean present_attrId2 = true;
      list.add(present_attrId2);
      if (present_attrId2)
        list.add(attrId2);

      boolean present_attrKey2 = true && (isSetAttrKey2());
      list.add(present_attrKey2);
      if (present_attrKey2)
        list.add(attrKey2);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes2_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAttrId1()).compareTo(other.isSetAttrId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId1, other.attrId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey1()).compareTo(other.isSetAttrKey1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey1, other.attrKey1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrId2()).compareTo(other.isSetAttrId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId2, other.attrId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey2()).compareTo(other.isSetAttrKey2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey2, other.attrKey2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes2_local_args(");
      boolean first = true;

      sb.append("attrId1:");
      sb.append(this.attrId1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey1:");
      if (this.attrKey1 == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrId2:");
      sb.append(this.attrId2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey2:");
      if (this.attrKey2 == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes2_local_argsStandardSchemeFactory implements SchemeFactory {
      public get_nodes2_local_argsStandardScheme getScheme() {
        return new get_nodes2_local_argsStandardScheme();
      }
    }

    private static class get_nodes2_local_argsStandardScheme extends StandardScheme<get_nodes2_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes2_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTR_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId1 = iprot.readI32();
                struct.setAttrId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_KEY1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey1 = iprot.readString();
                struct.setAttrKey1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTR_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId2 = iprot.readI32();
                struct.setAttrId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ATTR_KEY2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey2 = iprot.readString();
                struct.setAttrKey2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes2_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ATTR_ID1_FIELD_DESC);
        oprot.writeI32(struct.attrId1);
        oprot.writeFieldEnd();
        if (struct.attrKey1 != null) {
          oprot.writeFieldBegin(ATTR_KEY1_FIELD_DESC);
          oprot.writeString(struct.attrKey1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ATTR_ID2_FIELD_DESC);
        oprot.writeI32(struct.attrId2);
        oprot.writeFieldEnd();
        if (struct.attrKey2 != null) {
          oprot.writeFieldBegin(ATTR_KEY2_FIELD_DESC);
          oprot.writeString(struct.attrKey2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes2_local_argsTupleSchemeFactory implements SchemeFactory {
      public get_nodes2_local_argsTupleScheme getScheme() {
        return new get_nodes2_local_argsTupleScheme();
      }
    }

    private static class get_nodes2_local_argsTupleScheme extends TupleScheme<get_nodes2_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes2_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttrId1()) {
          optionals.set(0);
        }
        if (struct.isSetAttrKey1()) {
          optionals.set(1);
        }
        if (struct.isSetAttrId2()) {
          optionals.set(2);
        }
        if (struct.isSetAttrKey2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAttrId1()) {
          oprot.writeI32(struct.attrId1);
        }
        if (struct.isSetAttrKey1()) {
          oprot.writeString(struct.attrKey1);
        }
        if (struct.isSetAttrId2()) {
          oprot.writeI32(struct.attrId2);
        }
        if (struct.isSetAttrKey2()) {
          oprot.writeString(struct.attrKey2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes2_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.attrId1 = iprot.readI32();
          struct.setAttrId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrKey1 = iprot.readString();
          struct.setAttrKey1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.attrId2 = iprot.readI32();
          struct.setAttrId2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.attrKey2 = iprot.readString();
          struct.setAttrKey2IsSet(true);
        }
      }
    }

  }

  public static class get_nodes2_local_result implements org.apache.thrift.TBase<get_nodes2_local_result, get_nodes2_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_nodes2_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_nodes2_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_nodes2_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_nodes2_local_resultTupleSchemeFactory());
    }

    public Set<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_nodes2_local_result.class, metaDataMap);
    }

    public get_nodes2_local_result() {
    }

    public get_nodes2_local_result(
      Set<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_nodes2_local_result(get_nodes2_local_result other) {
      if (other.isSetSuccess()) {
        Set<Long> __this__success = new HashSet<Long>(other.success);
        this.success = __this__success;
      }
    }

    public get_nodes2_local_result deepCopy() {
      return new get_nodes2_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new HashSet<Long>();
      }
      this.success.add(elem);
    }

    public Set<Long> getSuccess() {
      return this.success;
    }

    public get_nodes2_local_result setSuccess(Set<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_nodes2_local_result)
        return this.equals((get_nodes2_local_result)that);
      return false;
    }

    public boolean equals(get_nodes2_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_nodes2_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_nodes2_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_nodes2_local_resultStandardSchemeFactory implements SchemeFactory {
      public get_nodes2_local_resultStandardScheme getScheme() {
        return new get_nodes2_local_resultStandardScheme();
      }
    }

    private static class get_nodes2_local_resultStandardScheme extends StandardScheme<get_nodes2_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_nodes2_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set80 = iprot.readSetBegin();
                  struct.success = new HashSet<Long>(2*_set80.size);
                  long _elem81;
                  for (int _i82 = 0; _i82 < _set80.size; ++_i82)
                  {
                    _elem81 = iprot.readI64();
                    struct.success.add(_elem81);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_nodes2_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter83 : struct.success)
            {
              oprot.writeI64(_iter83);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_nodes2_local_resultTupleSchemeFactory implements SchemeFactory {
      public get_nodes2_local_resultTupleScheme getScheme() {
        return new get_nodes2_local_resultTupleScheme();
      }
    }

    private static class get_nodes2_local_resultTupleScheme extends TupleScheme<get_nodes2_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_nodes2_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter84 : struct.success)
            {
              oprot.writeI64(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_nodes2_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set85 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashSet<Long>(2*_set85.size);
            long _elem86;
            for (int _i87 = 0; _i87 < _set85.size; ++_i87)
            {
              _elem86 = iprot.readI64();
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class filter_nodes_local_args implements org.apache.thrift.TBase<filter_nodes_local_args, filter_nodes_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<filter_nodes_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filter_nodes_local_args");

    private static final org.apache.thrift.protocol.TField NODE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ATTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attrId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ATTR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("attrKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new filter_nodes_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new filter_nodes_local_argsTupleSchemeFactory());
    }

    public List<Long> nodeIds; // required
    public int attrId; // required
    public String attrKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_IDS((short)1, "nodeIds"),
      ATTR_ID((short)2, "attrId"),
      ATTR_KEY((short)3, "attrKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_IDS
            return NODE_IDS;
          case 2: // ATTR_ID
            return ATTR_ID;
          case 3: // ATTR_KEY
            return ATTR_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ATTRID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_IDS, new org.apache.thrift.meta_data.FieldMetaData("nodeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.ATTR_ID, new org.apache.thrift.meta_data.FieldMetaData("attrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTR_KEY, new org.apache.thrift.meta_data.FieldMetaData("attrKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filter_nodes_local_args.class, metaDataMap);
    }

    public filter_nodes_local_args() {
    }

    public filter_nodes_local_args(
      List<Long> nodeIds,
      int attrId,
      String attrKey)
    {
      this();
      this.nodeIds = nodeIds;
      this.attrId = attrId;
      setAttrIdIsSet(true);
      this.attrKey = attrKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filter_nodes_local_args(filter_nodes_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNodeIds()) {
        List<Long> __this__nodeIds = new ArrayList<Long>(other.nodeIds);
        this.nodeIds = __this__nodeIds;
      }
      this.attrId = other.attrId;
      if (other.isSetAttrKey()) {
        this.attrKey = other.attrKey;
      }
    }

    public filter_nodes_local_args deepCopy() {
      return new filter_nodes_local_args(this);
    }

    @Override
    public void clear() {
      this.nodeIds = null;
      setAttrIdIsSet(false);
      this.attrId = 0;
      this.attrKey = null;
    }

    public int getNodeIdsSize() {
      return (this.nodeIds == null) ? 0 : this.nodeIds.size();
    }

    public java.util.Iterator<Long> getNodeIdsIterator() {
      return (this.nodeIds == null) ? null : this.nodeIds.iterator();
    }

    public void addToNodeIds(long elem) {
      if (this.nodeIds == null) {
        this.nodeIds = new ArrayList<Long>();
      }
      this.nodeIds.add(elem);
    }

    public List<Long> getNodeIds() {
      return this.nodeIds;
    }

    public filter_nodes_local_args setNodeIds(List<Long> nodeIds) {
      this.nodeIds = nodeIds;
      return this;
    }

    public void unsetNodeIds() {
      this.nodeIds = null;
    }

    /** Returns true if field nodeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeIds() {
      return this.nodeIds != null;
    }

    public void setNodeIdsIsSet(boolean value) {
      if (!value) {
        this.nodeIds = null;
      }
    }

    public int getAttrId() {
      return this.attrId;
    }

    public filter_nodes_local_args setAttrId(int attrId) {
      this.attrId = attrId;
      setAttrIdIsSet(true);
      return this;
    }

    public void unsetAttrId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    /** Returns true if field attrId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrId() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRID_ISSET_ID);
    }

    public void setAttrIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRID_ISSET_ID, value);
    }

    public String getAttrKey() {
      return this.attrKey;
    }

    public filter_nodes_local_args setAttrKey(String attrKey) {
      this.attrKey = attrKey;
      return this;
    }

    public void unsetAttrKey() {
      this.attrKey = null;
    }

    /** Returns true if field attrKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrKey() {
      return this.attrKey != null;
    }

    public void setAttrKeyIsSet(boolean value) {
      if (!value) {
        this.attrKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_IDS:
        if (value == null) {
          unsetNodeIds();
        } else {
          setNodeIds((List<Long>)value);
        }
        break;

      case ATTR_ID:
        if (value == null) {
          unsetAttrId();
        } else {
          setAttrId((Integer)value);
        }
        break;

      case ATTR_KEY:
        if (value == null) {
          unsetAttrKey();
        } else {
          setAttrKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_IDS:
        return getNodeIds();

      case ATTR_ID:
        return getAttrId();

      case ATTR_KEY:
        return getAttrKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_IDS:
        return isSetNodeIds();
      case ATTR_ID:
        return isSetAttrId();
      case ATTR_KEY:
        return isSetAttrKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof filter_nodes_local_args)
        return this.equals((filter_nodes_local_args)that);
      return false;
    }

    public boolean equals(filter_nodes_local_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeIds = true && this.isSetNodeIds();
      boolean that_present_nodeIds = true && that.isSetNodeIds();
      if (this_present_nodeIds || that_present_nodeIds) {
        if (!(this_present_nodeIds && that_present_nodeIds))
          return false;
        if (!this.nodeIds.equals(that.nodeIds))
          return false;
      }

      boolean this_present_attrId = true;
      boolean that_present_attrId = true;
      if (this_present_attrId || that_present_attrId) {
        if (!(this_present_attrId && that_present_attrId))
          return false;
        if (this.attrId != that.attrId)
          return false;
      }

      boolean this_present_attrKey = true && this.isSetAttrKey();
      boolean that_present_attrKey = true && that.isSetAttrKey();
      if (this_present_attrKey || that_present_attrKey) {
        if (!(this_present_attrKey && that_present_attrKey))
          return false;
        if (!this.attrKey.equals(that.attrKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeIds = true && (isSetNodeIds());
      list.add(present_nodeIds);
      if (present_nodeIds)
        list.add(nodeIds);

      boolean present_attrId = true;
      list.add(present_attrId);
      if (present_attrId)
        list.add(attrId);

      boolean present_attrKey = true && (isSetAttrKey());
      list.add(present_attrKey);
      if (present_attrKey)
        list.add(attrKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(filter_nodes_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeIds()).compareTo(other.isSetNodeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeIds, other.nodeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrId()).compareTo(other.isSetAttrId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrId, other.attrId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttrKey()).compareTo(other.isSetAttrKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrKey, other.attrKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("filter_nodes_local_args(");
      boolean first = true;

      sb.append("nodeIds:");
      if (this.nodeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrId:");
      sb.append(this.attrId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrKey:");
      if (this.attrKey == null) {
        sb.append("null");
      } else {
        sb.append(this.attrKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filter_nodes_local_argsStandardSchemeFactory implements SchemeFactory {
      public filter_nodes_local_argsStandardScheme getScheme() {
        return new filter_nodes_local_argsStandardScheme();
      }
    }

    private static class filter_nodes_local_argsStandardScheme extends StandardScheme<filter_nodes_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filter_nodes_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.nodeIds = new ArrayList<Long>(_list88.size);
                  long _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI64();
                    struct.nodeIds.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setNodeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attrId = iprot.readI32();
                struct.setAttrIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTR_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attrKey = iprot.readString();
                struct.setAttrKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filter_nodes_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeIds != null) {
          oprot.writeFieldBegin(NODE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.nodeIds.size()));
            for (long _iter91 : struct.nodeIds)
            {
              oprot.writeI64(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ATTR_ID_FIELD_DESC);
        oprot.writeI32(struct.attrId);
        oprot.writeFieldEnd();
        if (struct.attrKey != null) {
          oprot.writeFieldBegin(ATTR_KEY_FIELD_DESC);
          oprot.writeString(struct.attrKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filter_nodes_local_argsTupleSchemeFactory implements SchemeFactory {
      public filter_nodes_local_argsTupleScheme getScheme() {
        return new filter_nodes_local_argsTupleScheme();
      }
    }

    private static class filter_nodes_local_argsTupleScheme extends TupleScheme<filter_nodes_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filter_nodes_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeIds()) {
          optionals.set(0);
        }
        if (struct.isSetAttrId()) {
          optionals.set(1);
        }
        if (struct.isSetAttrKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNodeIds()) {
          {
            oprot.writeI32(struct.nodeIds.size());
            for (long _iter92 : struct.nodeIds)
            {
              oprot.writeI64(_iter92);
            }
          }
        }
        if (struct.isSetAttrId()) {
          oprot.writeI32(struct.attrId);
        }
        if (struct.isSetAttrKey()) {
          oprot.writeString(struct.attrKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filter_nodes_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.nodeIds = new ArrayList<Long>(_list93.size);
            long _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readI64();
              struct.nodeIds.add(_elem94);
            }
          }
          struct.setNodeIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrId = iprot.readI32();
          struct.setAttrIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.attrKey = iprot.readString();
          struct.setAttrKeyIsSet(true);
        }
      }
    }

  }

  public static class filter_nodes_local_result implements org.apache.thrift.TBase<filter_nodes_local_result, filter_nodes_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<filter_nodes_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filter_nodes_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new filter_nodes_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new filter_nodes_local_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filter_nodes_local_result.class, metaDataMap);
    }

    public filter_nodes_local_result() {
    }

    public filter_nodes_local_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filter_nodes_local_result(filter_nodes_local_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public filter_nodes_local_result deepCopy() {
      return new filter_nodes_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public filter_nodes_local_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof filter_nodes_local_result)
        return this.equals((filter_nodes_local_result)that);
      return false;
    }

    public boolean equals(filter_nodes_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(filter_nodes_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("filter_nodes_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filter_nodes_local_resultStandardSchemeFactory implements SchemeFactory {
      public filter_nodes_local_resultStandardScheme getScheme() {
        return new filter_nodes_local_resultStandardScheme();
      }
    }

    private static class filter_nodes_local_resultStandardScheme extends StandardScheme<filter_nodes_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filter_nodes_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list96.size);
                  long _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readI64();
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filter_nodes_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter99 : struct.success)
            {
              oprot.writeI64(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filter_nodes_local_resultTupleSchemeFactory implements SchemeFactory {
      public filter_nodes_local_resultTupleScheme getScheme() {
        return new filter_nodes_local_resultTupleScheme();
      }
    }

    private static class filter_nodes_local_resultTupleScheme extends TupleScheme<filter_nodes_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filter_nodes_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter100 : struct.success)
            {
              oprot.writeI64(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filter_nodes_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list101.size);
            long _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI64();
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_edge_attrs_args implements org.apache.thrift.TBase<get_edge_attrs_args, get_edge_attrs_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_edge_attrs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_edge_attrs_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_edge_attrs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_edge_attrs_argsTupleSchemeFactory());
    }

    public long nodeId; // required
    public long atype; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      ATYPE((short)2, "atype");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // ATYPE
            return ATYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODEID_ISSET_ID = 0;
    private static final int __ATYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_edge_attrs_args.class, metaDataMap);
    }

    public get_edge_attrs_args() {
    }

    public get_edge_attrs_args(
      long nodeId,
      long atype)
    {
      this();
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_edge_attrs_args(get_edge_attrs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nodeId = other.nodeId;
      this.atype = other.atype;
    }

    public get_edge_attrs_args deepCopy() {
      return new get_edge_attrs_args(this);
    }

    @Override
    public void clear() {
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAtypeIsSet(false);
      this.atype = 0;
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_edge_attrs_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public get_edge_attrs_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case ATYPE:
        return getAtype();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case ATYPE:
        return isSetAtype();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_edge_attrs_args)
        return this.equals((get_edge_attrs_args)that);
      return false;
    }

    public boolean equals(get_edge_attrs_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_edge_attrs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_edge_attrs_args(");
      boolean first = true;

      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_edge_attrs_argsStandardSchemeFactory implements SchemeFactory {
      public get_edge_attrs_argsStandardScheme getScheme() {
        return new get_edge_attrs_argsStandardScheme();
      }
    }

    private static class get_edge_attrs_argsStandardScheme extends StandardScheme<get_edge_attrs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_edge_attrs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_edge_attrs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_edge_attrs_argsTupleSchemeFactory implements SchemeFactory {
      public get_edge_attrs_argsTupleScheme getScheme() {
        return new get_edge_attrs_argsTupleScheme();
      }
    }

    private static class get_edge_attrs_argsTupleScheme extends TupleScheme<get_edge_attrs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetAtype()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
      }
    }

  }

  public static class get_edge_attrs_result implements org.apache.thrift.TBase<get_edge_attrs_result, get_edge_attrs_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_edge_attrs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_edge_attrs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_edge_attrs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_edge_attrs_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_edge_attrs_result.class, metaDataMap);
    }

    public get_edge_attrs_result() {
    }

    public get_edge_attrs_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_edge_attrs_result(get_edge_attrs_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public get_edge_attrs_result deepCopy() {
      return new get_edge_attrs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_edge_attrs_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_edge_attrs_result)
        return this.equals((get_edge_attrs_result)that);
      return false;
    }

    public boolean equals(get_edge_attrs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_edge_attrs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_edge_attrs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_edge_attrs_resultStandardSchemeFactory implements SchemeFactory {
      public get_edge_attrs_resultStandardScheme getScheme() {
        return new get_edge_attrs_resultStandardScheme();
      }
    }

    private static class get_edge_attrs_resultStandardScheme extends StandardScheme<get_edge_attrs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_edge_attrs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list104.size);
                  String _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readString();
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_edge_attrs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter107 : struct.success)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_edge_attrs_resultTupleSchemeFactory implements SchemeFactory {
      public get_edge_attrs_resultTupleScheme getScheme() {
        return new get_edge_attrs_resultTupleScheme();
      }
    }

    private static class get_edge_attrs_resultTupleScheme extends TupleScheme<get_edge_attrs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter108 : struct.success)
            {
              oprot.writeString(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list109.size);
            String _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readString();
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_edge_attrs_local_args implements org.apache.thrift.TBase<get_edge_attrs_local_args, get_edge_attrs_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_edge_attrs_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_edge_attrs_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_edge_attrs_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_edge_attrs_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long nodeId; // required
    public long atype; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      NODE_ID((short)2, "nodeId"),
      ATYPE((short)3, "atype");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // NODE_ID
            return NODE_ID;
          case 3: // ATYPE
            return ATYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __NODEID_ISSET_ID = 1;
    private static final int __ATYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_edge_attrs_local_args.class, metaDataMap);
    }

    public get_edge_attrs_local_args() {
    }

    public get_edge_attrs_local_args(
      int shardId,
      long nodeId,
      long atype)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_edge_attrs_local_args(get_edge_attrs_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.nodeId = other.nodeId;
      this.atype = other.atype;
    }

    public get_edge_attrs_local_args deepCopy() {
      return new get_edge_attrs_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setNodeIdIsSet(false);
      this.nodeId = 0;
      setAtypeIsSet(false);
      this.atype = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public get_edge_attrs_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public get_edge_attrs_local_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public get_edge_attrs_local_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case NODE_ID:
        return getNodeId();

      case ATYPE:
        return getAtype();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case NODE_ID:
        return isSetNodeId();
      case ATYPE:
        return isSetAtype();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_edge_attrs_local_args)
        return this.equals((get_edge_attrs_local_args)that);
      return false;
    }

    public boolean equals(get_edge_attrs_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_edge_attrs_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_edge_attrs_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_edge_attrs_local_argsStandardSchemeFactory implements SchemeFactory {
      public get_edge_attrs_local_argsStandardScheme getScheme() {
        return new get_edge_attrs_local_argsStandardScheme();
      }
    }

    private static class get_edge_attrs_local_argsStandardScheme extends StandardScheme<get_edge_attrs_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_edge_attrs_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_edge_attrs_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_edge_attrs_local_argsTupleSchemeFactory implements SchemeFactory {
      public get_edge_attrs_local_argsTupleScheme getScheme() {
        return new get_edge_attrs_local_argsTupleScheme();
      }
    }

    private static class get_edge_attrs_local_argsTupleScheme extends TupleScheme<get_edge_attrs_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        if (struct.isSetAtype()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
      }
    }

  }

  public static class get_edge_attrs_local_result implements org.apache.thrift.TBase<get_edge_attrs_local_result, get_edge_attrs_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_edge_attrs_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_edge_attrs_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_edge_attrs_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_edge_attrs_local_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_edge_attrs_local_result.class, metaDataMap);
    }

    public get_edge_attrs_local_result() {
    }

    public get_edge_attrs_local_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_edge_attrs_local_result(get_edge_attrs_local_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public get_edge_attrs_local_result deepCopy() {
      return new get_edge_attrs_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_edge_attrs_local_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_edge_attrs_local_result)
        return this.equals((get_edge_attrs_local_result)that);
      return false;
    }

    public boolean equals(get_edge_attrs_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_edge_attrs_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_edge_attrs_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_edge_attrs_local_resultStandardSchemeFactory implements SchemeFactory {
      public get_edge_attrs_local_resultStandardScheme getScheme() {
        return new get_edge_attrs_local_resultStandardScheme();
      }
    }

    private static class get_edge_attrs_local_resultStandardScheme extends StandardScheme<get_edge_attrs_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_edge_attrs_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list112.size);
                  String _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = iprot.readString();
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_edge_attrs_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter115 : struct.success)
            {
              oprot.writeString(_iter115);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_edge_attrs_local_resultTupleSchemeFactory implements SchemeFactory {
      public get_edge_attrs_local_resultTupleScheme getScheme() {
        return new get_edge_attrs_local_resultTupleScheme();
      }
    }

    private static class get_edge_attrs_local_resultTupleScheme extends TupleScheme<get_edge_attrs_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter116 : struct.success)
            {
              oprot.writeString(_iter116);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_edge_attrs_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list117.size);
            String _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = iprot.readString();
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_range_args implements org.apache.thrift.TBase<assoc_range_args, assoc_range_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_range_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_range_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField OFF_FIELD_DESC = new org.apache.thrift.protocol.TField("off", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("len", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_range_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_range_argsTupleSchemeFactory());
    }

    public long src; // required
    public long atype; // required
    public int off; // required
    public int len; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ATYPE((short)2, "atype"),
      OFF((short)3, "off"),
      LEN((short)4, "len");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ATYPE
            return ATYPE;
          case 3: // OFF
            return OFF;
          case 4: // LEN
            return LEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRC_ISSET_ID = 0;
    private static final int __ATYPE_ISSET_ID = 1;
    private static final int __OFF_ISSET_ID = 2;
    private static final int __LEN_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFF, new org.apache.thrift.meta_data.FieldMetaData("off", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LEN, new org.apache.thrift.meta_data.FieldMetaData("len", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_range_args.class, metaDataMap);
    }

    public assoc_range_args() {
    }

    public assoc_range_args(
      long src,
      long atype,
      int off,
      int len)
    {
      this();
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
      this.off = off;
      setOffIsSet(true);
      this.len = len;
      setLenIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_range_args(assoc_range_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.src = other.src;
      this.atype = other.atype;
      this.off = other.off;
      this.len = other.len;
    }

    public assoc_range_args deepCopy() {
      return new assoc_range_args(this);
    }

    @Override
    public void clear() {
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
      setOffIsSet(false);
      this.off = 0;
      setLenIsSet(false);
      this.len = 0;
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_range_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_range_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public int getOff() {
      return this.off;
    }

    public assoc_range_args setOff(int off) {
      this.off = off;
      setOffIsSet(true);
      return this;
    }

    public void unsetOff() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFF_ISSET_ID);
    }

    /** Returns true if field off is set (has been assigned a value) and false otherwise */
    public boolean isSetOff() {
      return EncodingUtils.testBit(__isset_bitfield, __OFF_ISSET_ID);
    }

    public void setOffIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFF_ISSET_ID, value);
    }

    public int getLen() {
      return this.len;
    }

    public assoc_range_args setLen(int len) {
      this.len = len;
      setLenIsSet(true);
      return this;
    }

    public void unsetLen() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEN_ISSET_ID);
    }

    /** Returns true if field len is set (has been assigned a value) and false otherwise */
    public boolean isSetLen() {
      return EncodingUtils.testBit(__isset_bitfield, __LEN_ISSET_ID);
    }

    public void setLenIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      case OFF:
        if (value == null) {
          unsetOff();
        } else {
          setOff((Integer)value);
        }
        break;

      case LEN:
        if (value == null) {
          unsetLen();
        } else {
          setLen((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      case OFF:
        return getOff();

      case LEN:
        return getLen();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      case OFF:
        return isSetOff();
      case LEN:
        return isSetLen();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_range_args)
        return this.equals((assoc_range_args)that);
      return false;
    }

    public boolean equals(assoc_range_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      boolean this_present_off = true;
      boolean that_present_off = true;
      if (this_present_off || that_present_off) {
        if (!(this_present_off && that_present_off))
          return false;
        if (this.off != that.off)
          return false;
      }

      boolean this_present_len = true;
      boolean that_present_len = true;
      if (this_present_len || that_present_len) {
        if (!(this_present_len && that_present_len))
          return false;
        if (this.len != that.len)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      boolean present_off = true;
      list.add(present_off);
      if (present_off)
        list.add(off);

      boolean present_len = true;
      list.add(present_len);
      if (present_len)
        list.add(len);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_range_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOff()).compareTo(other.isSetOff());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOff()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.off, other.off);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLen()).compareTo(other.isSetLen());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLen()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.len, other.len);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_range_args(");
      boolean first = true;

      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("off:");
      sb.append(this.off);
      first = false;
      if (!first) sb.append(", ");
      sb.append("len:");
      sb.append(this.len);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_range_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_range_argsStandardScheme getScheme() {
        return new assoc_range_argsStandardScheme();
      }
    }

    private static class assoc_range_argsStandardScheme extends StandardScheme<assoc_range_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_range_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OFF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.off = iprot.readI32();
                struct.setOffIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LEN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.len = iprot.readI32();
                struct.setLenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_range_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFF_FIELD_DESC);
        oprot.writeI32(struct.off);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEN_FIELD_DESC);
        oprot.writeI32(struct.len);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_range_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_range_argsTupleScheme getScheme() {
        return new assoc_range_argsTupleScheme();
      }
    }

    private static class assoc_range_argsTupleScheme extends TupleScheme<assoc_range_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_range_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAtype()) {
          optionals.set(1);
        }
        if (struct.isSetOff()) {
          optionals.set(2);
        }
        if (struct.isSetLen()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
        if (struct.isSetOff()) {
          oprot.writeI32(struct.off);
        }
        if (struct.isSetLen()) {
          oprot.writeI32(struct.len);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_range_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.off = iprot.readI32();
          struct.setOffIsSet(true);
        }
        if (incoming.get(3)) {
          struct.len = iprot.readI32();
          struct.setLenIsSet(true);
        }
      }
    }

  }

  public static class assoc_range_result implements org.apache.thrift.TBase<assoc_range_result, assoc_range_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_range_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_range_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_range_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_range_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_range_result.class, metaDataMap);
    }

    public assoc_range_result() {
    }

    public assoc_range_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_range_result(assoc_range_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public assoc_range_result deepCopy() {
      return new assoc_range_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public assoc_range_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_range_result)
        return this.equals((assoc_range_result)that);
      return false;
    }

    public boolean equals(assoc_range_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_range_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_range_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_range_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_range_resultStandardScheme getScheme() {
        return new assoc_range_resultStandardScheme();
      }
    }

    private static class assoc_range_resultStandardScheme extends StandardScheme<assoc_range_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_range_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list120.size);
                  ThriftAssoc _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new ThriftAssoc();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_range_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_range_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_range_resultTupleScheme getScheme() {
        return new assoc_range_resultTupleScheme();
      }
    }

    private static class assoc_range_resultTupleScheme extends TupleScheme<assoc_range_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_range_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_range_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list125.size);
            ThriftAssoc _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new ThriftAssoc();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_range_local_args implements org.apache.thrift.TBase<assoc_range_local_args, assoc_range_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_range_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_range_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField OFF_FIELD_DESC = new org.apache.thrift.protocol.TField("off", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("len", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_range_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_range_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long src; // required
    public long atype; // required
    public int off; // required
    public int len; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      SRC((short)2, "src"),
      ATYPE((short)3, "atype"),
      OFF((short)4, "off"),
      LEN((short)5, "len");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // SRC
            return SRC;
          case 3: // ATYPE
            return ATYPE;
          case 4: // OFF
            return OFF;
          case 5: // LEN
            return LEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __SRC_ISSET_ID = 1;
    private static final int __ATYPE_ISSET_ID = 2;
    private static final int __OFF_ISSET_ID = 3;
    private static final int __LEN_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFF, new org.apache.thrift.meta_data.FieldMetaData("off", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LEN, new org.apache.thrift.meta_data.FieldMetaData("len", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_range_local_args.class, metaDataMap);
    }

    public assoc_range_local_args() {
    }

    public assoc_range_local_args(
      int shardId,
      long src,
      long atype,
      int off,
      int len)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
      this.off = off;
      setOffIsSet(true);
      this.len = len;
      setLenIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_range_local_args(assoc_range_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.src = other.src;
      this.atype = other.atype;
      this.off = other.off;
      this.len = other.len;
    }

    public assoc_range_local_args deepCopy() {
      return new assoc_range_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
      setOffIsSet(false);
      this.off = 0;
      setLenIsSet(false);
      this.len = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public assoc_range_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_range_local_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_range_local_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public int getOff() {
      return this.off;
    }

    public assoc_range_local_args setOff(int off) {
      this.off = off;
      setOffIsSet(true);
      return this;
    }

    public void unsetOff() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFF_ISSET_ID);
    }

    /** Returns true if field off is set (has been assigned a value) and false otherwise */
    public boolean isSetOff() {
      return EncodingUtils.testBit(__isset_bitfield, __OFF_ISSET_ID);
    }

    public void setOffIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFF_ISSET_ID, value);
    }

    public int getLen() {
      return this.len;
    }

    public assoc_range_local_args setLen(int len) {
      this.len = len;
      setLenIsSet(true);
      return this;
    }

    public void unsetLen() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEN_ISSET_ID);
    }

    /** Returns true if field len is set (has been assigned a value) and false otherwise */
    public boolean isSetLen() {
      return EncodingUtils.testBit(__isset_bitfield, __LEN_ISSET_ID);
    }

    public void setLenIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      case OFF:
        if (value == null) {
          unsetOff();
        } else {
          setOff((Integer)value);
        }
        break;

      case LEN:
        if (value == null) {
          unsetLen();
        } else {
          setLen((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      case OFF:
        return getOff();

      case LEN:
        return getLen();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      case OFF:
        return isSetOff();
      case LEN:
        return isSetLen();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_range_local_args)
        return this.equals((assoc_range_local_args)that);
      return false;
    }

    public boolean equals(assoc_range_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      boolean this_present_off = true;
      boolean that_present_off = true;
      if (this_present_off || that_present_off) {
        if (!(this_present_off && that_present_off))
          return false;
        if (this.off != that.off)
          return false;
      }

      boolean this_present_len = true;
      boolean that_present_len = true;
      if (this_present_len || that_present_len) {
        if (!(this_present_len && that_present_len))
          return false;
        if (this.len != that.len)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      boolean present_off = true;
      list.add(present_off);
      if (present_off)
        list.add(off);

      boolean present_len = true;
      list.add(present_len);
      if (present_len)
        list.add(len);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_range_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOff()).compareTo(other.isSetOff());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOff()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.off, other.off);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLen()).compareTo(other.isSetLen());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLen()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.len, other.len);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_range_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("off:");
      sb.append(this.off);
      first = false;
      if (!first) sb.append(", ");
      sb.append("len:");
      sb.append(this.len);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_range_local_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_range_local_argsStandardScheme getScheme() {
        return new assoc_range_local_argsStandardScheme();
      }
    }

    private static class assoc_range_local_argsStandardScheme extends StandardScheme<assoc_range_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_range_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.off = iprot.readI32();
                struct.setOffIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LEN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.len = iprot.readI32();
                struct.setLenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_range_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFF_FIELD_DESC);
        oprot.writeI32(struct.off);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEN_FIELD_DESC);
        oprot.writeI32(struct.len);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_range_local_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_range_local_argsTupleScheme getScheme() {
        return new assoc_range_local_argsTupleScheme();
      }
    }

    private static class assoc_range_local_argsTupleScheme extends TupleScheme<assoc_range_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_range_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetSrc()) {
          optionals.set(1);
        }
        if (struct.isSetAtype()) {
          optionals.set(2);
        }
        if (struct.isSetOff()) {
          optionals.set(3);
        }
        if (struct.isSetLen()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
        if (struct.isSetOff()) {
          oprot.writeI32(struct.off);
        }
        if (struct.isSetLen()) {
          oprot.writeI32(struct.len);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_range_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.off = iprot.readI32();
          struct.setOffIsSet(true);
        }
        if (incoming.get(4)) {
          struct.len = iprot.readI32();
          struct.setLenIsSet(true);
        }
      }
    }

  }

  public static class assoc_range_local_result implements org.apache.thrift.TBase<assoc_range_local_result, assoc_range_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_range_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_range_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_range_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_range_local_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_range_local_result.class, metaDataMap);
    }

    public assoc_range_local_result() {
    }

    public assoc_range_local_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_range_local_result(assoc_range_local_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public assoc_range_local_result deepCopy() {
      return new assoc_range_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public assoc_range_local_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_range_local_result)
        return this.equals((assoc_range_local_result)that);
      return false;
    }

    public boolean equals(assoc_range_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_range_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_range_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_range_local_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_range_local_resultStandardScheme getScheme() {
        return new assoc_range_local_resultStandardScheme();
      }
    }

    private static class assoc_range_local_resultStandardScheme extends StandardScheme<assoc_range_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_range_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list128.size);
                  ThriftAssoc _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new ThriftAssoc();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_range_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_range_local_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_range_local_resultTupleScheme getScheme() {
        return new assoc_range_local_resultTupleScheme();
      }
    }

    private static class assoc_range_local_resultTupleScheme extends TupleScheme<assoc_range_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_range_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_range_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list133.size);
            ThriftAssoc _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new ThriftAssoc();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_count_args implements org.apache.thrift.TBase<assoc_count_args, assoc_count_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_count_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_count_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_count_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_count_argsTupleSchemeFactory());
    }

    public long src; // required
    public long atype; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ATYPE((short)2, "atype");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ATYPE
            return ATYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRC_ISSET_ID = 0;
    private static final int __ATYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_count_args.class, metaDataMap);
    }

    public assoc_count_args() {
    }

    public assoc_count_args(
      long src,
      long atype)
    {
      this();
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_count_args(assoc_count_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.src = other.src;
      this.atype = other.atype;
    }

    public assoc_count_args deepCopy() {
      return new assoc_count_args(this);
    }

    @Override
    public void clear() {
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_count_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_count_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_count_args)
        return this.equals((assoc_count_args)that);
      return false;
    }

    public boolean equals(assoc_count_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_count_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_count_args(");
      boolean first = true;

      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_count_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_count_argsStandardScheme getScheme() {
        return new assoc_count_argsStandardScheme();
      }
    }

    private static class assoc_count_argsStandardScheme extends StandardScheme<assoc_count_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_count_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_count_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_count_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_count_argsTupleScheme getScheme() {
        return new assoc_count_argsTupleScheme();
      }
    }

    private static class assoc_count_argsTupleScheme extends TupleScheme<assoc_count_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_count_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAtype()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_count_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
      }
    }

  }

  public static class assoc_count_result implements org.apache.thrift.TBase<assoc_count_result, assoc_count_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_count_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_count_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_count_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_count_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_count_result.class, metaDataMap);
    }

    public assoc_count_result() {
    }

    public assoc_count_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_count_result(assoc_count_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public assoc_count_result deepCopy() {
      return new assoc_count_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public assoc_count_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_count_result)
        return this.equals((assoc_count_result)that);
      return false;
    }

    public boolean equals(assoc_count_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_count_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_count_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_count_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_count_resultStandardScheme getScheme() {
        return new assoc_count_resultStandardScheme();
      }
    }

    private static class assoc_count_resultStandardScheme extends StandardScheme<assoc_count_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_count_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_count_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_count_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_count_resultTupleScheme getScheme() {
        return new assoc_count_resultTupleScheme();
      }
    }

    private static class assoc_count_resultTupleScheme extends TupleScheme<assoc_count_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_count_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_count_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_count_local_args implements org.apache.thrift.TBase<assoc_count_local_args, assoc_count_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_count_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_count_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_count_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_count_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long src; // required
    public long atype; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      SRC((short)2, "src"),
      ATYPE((short)3, "atype");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // SRC
            return SRC;
          case 3: // ATYPE
            return ATYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __SRC_ISSET_ID = 1;
    private static final int __ATYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_count_local_args.class, metaDataMap);
    }

    public assoc_count_local_args() {
    }

    public assoc_count_local_args(
      int shardId,
      long src,
      long atype)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_count_local_args(assoc_count_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.src = other.src;
      this.atype = other.atype;
    }

    public assoc_count_local_args deepCopy() {
      return new assoc_count_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public assoc_count_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_count_local_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_count_local_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_count_local_args)
        return this.equals((assoc_count_local_args)that);
      return false;
    }

    public boolean equals(assoc_count_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_count_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_count_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_count_local_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_count_local_argsStandardScheme getScheme() {
        return new assoc_count_local_argsStandardScheme();
      }
    }

    private static class assoc_count_local_argsStandardScheme extends StandardScheme<assoc_count_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_count_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_count_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_count_local_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_count_local_argsTupleScheme getScheme() {
        return new assoc_count_local_argsTupleScheme();
      }
    }

    private static class assoc_count_local_argsTupleScheme extends TupleScheme<assoc_count_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_count_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetSrc()) {
          optionals.set(1);
        }
        if (struct.isSetAtype()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_count_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
      }
    }

  }

  public static class assoc_count_local_result implements org.apache.thrift.TBase<assoc_count_local_result, assoc_count_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_count_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_count_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_count_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_count_local_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_count_local_result.class, metaDataMap);
    }

    public assoc_count_local_result() {
    }

    public assoc_count_local_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_count_local_result(assoc_count_local_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public assoc_count_local_result deepCopy() {
      return new assoc_count_local_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public assoc_count_local_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_count_local_result)
        return this.equals((assoc_count_local_result)that);
      return false;
    }

    public boolean equals(assoc_count_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_count_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_count_local_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_count_local_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_count_local_resultStandardScheme getScheme() {
        return new assoc_count_local_resultStandardScheme();
      }
    }

    private static class assoc_count_local_resultStandardScheme extends StandardScheme<assoc_count_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_count_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_count_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_count_local_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_count_local_resultTupleScheme getScheme() {
        return new assoc_count_local_resultTupleScheme();
      }
    }

    private static class assoc_count_local_resultTupleScheme extends TupleScheme<assoc_count_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_count_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_count_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_get_args implements org.apache.thrift.TBase<assoc_get_args, assoc_get_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_get_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DST_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("dstIdSet", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField T_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("tLow", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField T_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("tHigh", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_get_argsTupleSchemeFactory());
    }

    public long src; // required
    public long atype; // required
    public Set<Long> dstIdSet; // required
    public long tLow; // required
    public long tHigh; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ATYPE((short)2, "atype"),
      DST_ID_SET((short)3, "dstIdSet"),
      T_LOW((short)4, "tLow"),
      T_HIGH((short)5, "tHigh");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ATYPE
            return ATYPE;
          case 3: // DST_ID_SET
            return DST_ID_SET;
          case 4: // T_LOW
            return T_LOW;
          case 5: // T_HIGH
            return T_HIGH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRC_ISSET_ID = 0;
    private static final int __ATYPE_ISSET_ID = 1;
    private static final int __TLOW_ISSET_ID = 2;
    private static final int __THIGH_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DST_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("dstIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.T_LOW, new org.apache.thrift.meta_data.FieldMetaData("tLow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.T_HIGH, new org.apache.thrift.meta_data.FieldMetaData("tHigh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_get_args.class, metaDataMap);
    }

    public assoc_get_args() {
    }

    public assoc_get_args(
      long src,
      long atype,
      Set<Long> dstIdSet,
      long tLow,
      long tHigh)
    {
      this();
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
      this.dstIdSet = dstIdSet;
      this.tLow = tLow;
      setTLowIsSet(true);
      this.tHigh = tHigh;
      setTHighIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_get_args(assoc_get_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.src = other.src;
      this.atype = other.atype;
      if (other.isSetDstIdSet()) {
        Set<Long> __this__dstIdSet = new HashSet<Long>(other.dstIdSet);
        this.dstIdSet = __this__dstIdSet;
      }
      this.tLow = other.tLow;
      this.tHigh = other.tHigh;
    }

    public assoc_get_args deepCopy() {
      return new assoc_get_args(this);
    }

    @Override
    public void clear() {
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
      this.dstIdSet = null;
      setTLowIsSet(false);
      this.tLow = 0;
      setTHighIsSet(false);
      this.tHigh = 0;
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_get_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_get_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public int getDstIdSetSize() {
      return (this.dstIdSet == null) ? 0 : this.dstIdSet.size();
    }

    public java.util.Iterator<Long> getDstIdSetIterator() {
      return (this.dstIdSet == null) ? null : this.dstIdSet.iterator();
    }

    public void addToDstIdSet(long elem) {
      if (this.dstIdSet == null) {
        this.dstIdSet = new HashSet<Long>();
      }
      this.dstIdSet.add(elem);
    }

    public Set<Long> getDstIdSet() {
      return this.dstIdSet;
    }

    public assoc_get_args setDstIdSet(Set<Long> dstIdSet) {
      this.dstIdSet = dstIdSet;
      return this;
    }

    public void unsetDstIdSet() {
      this.dstIdSet = null;
    }

    /** Returns true if field dstIdSet is set (has been assigned a value) and false otherwise */
    public boolean isSetDstIdSet() {
      return this.dstIdSet != null;
    }

    public void setDstIdSetIsSet(boolean value) {
      if (!value) {
        this.dstIdSet = null;
      }
    }

    public long getTLow() {
      return this.tLow;
    }

    public assoc_get_args setTLow(long tLow) {
      this.tLow = tLow;
      setTLowIsSet(true);
      return this;
    }

    public void unsetTLow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    /** Returns true if field tLow is set (has been assigned a value) and false otherwise */
    public boolean isSetTLow() {
      return EncodingUtils.testBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    public void setTLowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TLOW_ISSET_ID, value);
    }

    public long getTHigh() {
      return this.tHigh;
    }

    public assoc_get_args setTHigh(long tHigh) {
      this.tHigh = tHigh;
      setTHighIsSet(true);
      return this;
    }

    public void unsetTHigh() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    /** Returns true if field tHigh is set (has been assigned a value) and false otherwise */
    public boolean isSetTHigh() {
      return EncodingUtils.testBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    public void setTHighIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIGH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      case DST_ID_SET:
        if (value == null) {
          unsetDstIdSet();
        } else {
          setDstIdSet((Set<Long>)value);
        }
        break;

      case T_LOW:
        if (value == null) {
          unsetTLow();
        } else {
          setTLow((Long)value);
        }
        break;

      case T_HIGH:
        if (value == null) {
          unsetTHigh();
        } else {
          setTHigh((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      case DST_ID_SET:
        return getDstIdSet();

      case T_LOW:
        return getTLow();

      case T_HIGH:
        return getTHigh();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      case DST_ID_SET:
        return isSetDstIdSet();
      case T_LOW:
        return isSetTLow();
      case T_HIGH:
        return isSetTHigh();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_get_args)
        return this.equals((assoc_get_args)that);
      return false;
    }

    public boolean equals(assoc_get_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      boolean this_present_dstIdSet = true && this.isSetDstIdSet();
      boolean that_present_dstIdSet = true && that.isSetDstIdSet();
      if (this_present_dstIdSet || that_present_dstIdSet) {
        if (!(this_present_dstIdSet && that_present_dstIdSet))
          return false;
        if (!this.dstIdSet.equals(that.dstIdSet))
          return false;
      }

      boolean this_present_tLow = true;
      boolean that_present_tLow = true;
      if (this_present_tLow || that_present_tLow) {
        if (!(this_present_tLow && that_present_tLow))
          return false;
        if (this.tLow != that.tLow)
          return false;
      }

      boolean this_present_tHigh = true;
      boolean that_present_tHigh = true;
      if (this_present_tHigh || that_present_tHigh) {
        if (!(this_present_tHigh && that_present_tHigh))
          return false;
        if (this.tHigh != that.tHigh)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      boolean present_dstIdSet = true && (isSetDstIdSet());
      list.add(present_dstIdSet);
      if (present_dstIdSet)
        list.add(dstIdSet);

      boolean present_tLow = true;
      list.add(present_tLow);
      if (present_tLow)
        list.add(tLow);

      boolean present_tHigh = true;
      list.add(present_tHigh);
      if (present_tHigh)
        list.add(tHigh);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstIdSet()).compareTo(other.isSetDstIdSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstIdSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstIdSet, other.dstIdSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTLow()).compareTo(other.isSetTLow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTLow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tLow, other.tLow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTHigh()).compareTo(other.isSetTHigh());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTHigh()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tHigh, other.tHigh);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_get_args(");
      boolean first = true;

      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstIdSet:");
      if (this.dstIdSet == null) {
        sb.append("null");
      } else {
        sb.append(this.dstIdSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tLow:");
      sb.append(this.tLow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tHigh:");
      sb.append(this.tHigh);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_get_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_get_argsStandardScheme getScheme() {
        return new assoc_get_argsStandardScheme();
      }
    }

    private static class assoc_get_argsStandardScheme extends StandardScheme<assoc_get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DST_ID_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set136 = iprot.readSetBegin();
                  struct.dstIdSet = new HashSet<Long>(2*_set136.size);
                  long _elem137;
                  for (int _i138 = 0; _i138 < _set136.size; ++_i138)
                  {
                    _elem137 = iprot.readI64();
                    struct.dstIdSet.add(_elem137);
                  }
                  iprot.readSetEnd();
                }
                struct.setDstIdSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_LOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tLow = iprot.readI64();
                struct.setTLowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // T_HIGH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tHigh = iprot.readI64();
                struct.setTHighIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        if (struct.dstIdSet != null) {
          oprot.writeFieldBegin(DST_ID_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.dstIdSet.size()));
            for (long _iter139 : struct.dstIdSet)
            {
              oprot.writeI64(_iter139);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(T_LOW_FIELD_DESC);
        oprot.writeI64(struct.tLow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_HIGH_FIELD_DESC);
        oprot.writeI64(struct.tHigh);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_get_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_get_argsTupleScheme getScheme() {
        return new assoc_get_argsTupleScheme();
      }
    }

    private static class assoc_get_argsTupleScheme extends TupleScheme<assoc_get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAtype()) {
          optionals.set(1);
        }
        if (struct.isSetDstIdSet()) {
          optionals.set(2);
        }
        if (struct.isSetTLow()) {
          optionals.set(3);
        }
        if (struct.isSetTHigh()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
        if (struct.isSetDstIdSet()) {
          {
            oprot.writeI32(struct.dstIdSet.size());
            for (long _iter140 : struct.dstIdSet)
            {
              oprot.writeI64(_iter140);
            }
          }
        }
        if (struct.isSetTLow()) {
          oprot.writeI64(struct.tLow);
        }
        if (struct.isSetTHigh()) {
          oprot.writeI64(struct.tHigh);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set141 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.dstIdSet = new HashSet<Long>(2*_set141.size);
            long _elem142;
            for (int _i143 = 0; _i143 < _set141.size; ++_i143)
            {
              _elem142 = iprot.readI64();
              struct.dstIdSet.add(_elem142);
            }
          }
          struct.setDstIdSetIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tLow = iprot.readI64();
          struct.setTLowIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tHigh = iprot.readI64();
          struct.setTHighIsSet(true);
        }
      }
    }

  }

  public static class assoc_get_result implements org.apache.thrift.TBase<assoc_get_result, assoc_get_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_get_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_get_result.class, metaDataMap);
    }

    public assoc_get_result() {
    }

    public assoc_get_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_get_result(assoc_get_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public assoc_get_result deepCopy() {
      return new assoc_get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public assoc_get_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_get_result)
        return this.equals((assoc_get_result)that);
      return false;
    }

    public boolean equals(assoc_get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_get_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_get_resultStandardScheme getScheme() {
        return new assoc_get_resultStandardScheme();
      }
    }

    private static class assoc_get_resultStandardScheme extends StandardScheme<assoc_get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list144.size);
                  ThriftAssoc _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new ThriftAssoc();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_get_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_get_resultTupleScheme getScheme() {
        return new assoc_get_resultTupleScheme();
      }
    }

    private static class assoc_get_resultTupleScheme extends TupleScheme<assoc_get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list149.size);
            ThriftAssoc _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new ThriftAssoc();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_get_local_args implements org.apache.thrift.TBase<assoc_get_local_args, assoc_get_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_get_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_get_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField DST_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("dstIdSet", org.apache.thrift.protocol.TType.SET, (short)4);
    private static final org.apache.thrift.protocol.TField T_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("tLow", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField T_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("tHigh", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_get_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_get_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long src; // required
    public long atype; // required
    public Set<Long> dstIdSet; // required
    public long tLow; // required
    public long tHigh; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      SRC((short)2, "src"),
      ATYPE((short)3, "atype"),
      DST_ID_SET((short)4, "dstIdSet"),
      T_LOW((short)5, "tLow"),
      T_HIGH((short)6, "tHigh");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // SRC
            return SRC;
          case 3: // ATYPE
            return ATYPE;
          case 4: // DST_ID_SET
            return DST_ID_SET;
          case 5: // T_LOW
            return T_LOW;
          case 6: // T_HIGH
            return T_HIGH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __SRC_ISSET_ID = 1;
    private static final int __ATYPE_ISSET_ID = 2;
    private static final int __TLOW_ISSET_ID = 3;
    private static final int __THIGH_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DST_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("dstIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.T_LOW, new org.apache.thrift.meta_data.FieldMetaData("tLow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.T_HIGH, new org.apache.thrift.meta_data.FieldMetaData("tHigh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_get_local_args.class, metaDataMap);
    }

    public assoc_get_local_args() {
    }

    public assoc_get_local_args(
      int shardId,
      long src,
      long atype,
      Set<Long> dstIdSet,
      long tLow,
      long tHigh)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
      this.dstIdSet = dstIdSet;
      this.tLow = tLow;
      setTLowIsSet(true);
      this.tHigh = tHigh;
      setTHighIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_get_local_args(assoc_get_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.src = other.src;
      this.atype = other.atype;
      if (other.isSetDstIdSet()) {
        Set<Long> __this__dstIdSet = new HashSet<Long>(other.dstIdSet);
        this.dstIdSet = __this__dstIdSet;
      }
      this.tLow = other.tLow;
      this.tHigh = other.tHigh;
    }

    public assoc_get_local_args deepCopy() {
      return new assoc_get_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
      this.dstIdSet = null;
      setTLowIsSet(false);
      this.tLow = 0;
      setTHighIsSet(false);
      this.tHigh = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public assoc_get_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_get_local_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_get_local_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public int getDstIdSetSize() {
      return (this.dstIdSet == null) ? 0 : this.dstIdSet.size();
    }

    public java.util.Iterator<Long> getDstIdSetIterator() {
      return (this.dstIdSet == null) ? null : this.dstIdSet.iterator();
    }

    public void addToDstIdSet(long elem) {
      if (this.dstIdSet == null) {
        this.dstIdSet = new HashSet<Long>();
      }
      this.dstIdSet.add(elem);
    }

    public Set<Long> getDstIdSet() {
      return this.dstIdSet;
    }

    public assoc_get_local_args setDstIdSet(Set<Long> dstIdSet) {
      this.dstIdSet = dstIdSet;
      return this;
    }

    public void unsetDstIdSet() {
      this.dstIdSet = null;
    }

    /** Returns true if field dstIdSet is set (has been assigned a value) and false otherwise */
    public boolean isSetDstIdSet() {
      return this.dstIdSet != null;
    }

    public void setDstIdSetIsSet(boolean value) {
      if (!value) {
        this.dstIdSet = null;
      }
    }

    public long getTLow() {
      return this.tLow;
    }

    public assoc_get_local_args setTLow(long tLow) {
      this.tLow = tLow;
      setTLowIsSet(true);
      return this;
    }

    public void unsetTLow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    /** Returns true if field tLow is set (has been assigned a value) and false otherwise */
    public boolean isSetTLow() {
      return EncodingUtils.testBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    public void setTLowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TLOW_ISSET_ID, value);
    }

    public long getTHigh() {
      return this.tHigh;
    }

    public assoc_get_local_args setTHigh(long tHigh) {
      this.tHigh = tHigh;
      setTHighIsSet(true);
      return this;
    }

    public void unsetTHigh() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    /** Returns true if field tHigh is set (has been assigned a value) and false otherwise */
    public boolean isSetTHigh() {
      return EncodingUtils.testBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    public void setTHighIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIGH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      case DST_ID_SET:
        if (value == null) {
          unsetDstIdSet();
        } else {
          setDstIdSet((Set<Long>)value);
        }
        break;

      case T_LOW:
        if (value == null) {
          unsetTLow();
        } else {
          setTLow((Long)value);
        }
        break;

      case T_HIGH:
        if (value == null) {
          unsetTHigh();
        } else {
          setTHigh((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      case DST_ID_SET:
        return getDstIdSet();

      case T_LOW:
        return getTLow();

      case T_HIGH:
        return getTHigh();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      case DST_ID_SET:
        return isSetDstIdSet();
      case T_LOW:
        return isSetTLow();
      case T_HIGH:
        return isSetTHigh();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_get_local_args)
        return this.equals((assoc_get_local_args)that);
      return false;
    }

    public boolean equals(assoc_get_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      boolean this_present_dstIdSet = true && this.isSetDstIdSet();
      boolean that_present_dstIdSet = true && that.isSetDstIdSet();
      if (this_present_dstIdSet || that_present_dstIdSet) {
        if (!(this_present_dstIdSet && that_present_dstIdSet))
          return false;
        if (!this.dstIdSet.equals(that.dstIdSet))
          return false;
      }

      boolean this_present_tLow = true;
      boolean that_present_tLow = true;
      if (this_present_tLow || that_present_tLow) {
        if (!(this_present_tLow && that_present_tLow))
          return false;
        if (this.tLow != that.tLow)
          return false;
      }

      boolean this_present_tHigh = true;
      boolean that_present_tHigh = true;
      if (this_present_tHigh || that_present_tHigh) {
        if (!(this_present_tHigh && that_present_tHigh))
          return false;
        if (this.tHigh != that.tHigh)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      boolean present_dstIdSet = true && (isSetDstIdSet());
      list.add(present_dstIdSet);
      if (present_dstIdSet)
        list.add(dstIdSet);

      boolean present_tLow = true;
      list.add(present_tLow);
      if (present_tLow)
        list.add(tLow);

      boolean present_tHigh = true;
      list.add(present_tHigh);
      if (present_tHigh)
        list.add(tHigh);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_get_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstIdSet()).compareTo(other.isSetDstIdSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstIdSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstIdSet, other.dstIdSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTLow()).compareTo(other.isSetTLow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTLow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tLow, other.tLow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTHigh()).compareTo(other.isSetTHigh());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTHigh()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tHigh, other.tHigh);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_get_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstIdSet:");
      if (this.dstIdSet == null) {
        sb.append("null");
      } else {
        sb.append(this.dstIdSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tLow:");
      sb.append(this.tLow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tHigh:");
      sb.append(this.tHigh);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_get_local_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_get_local_argsStandardScheme getScheme() {
        return new assoc_get_local_argsStandardScheme();
      }
    }

    private static class assoc_get_local_argsStandardScheme extends StandardScheme<assoc_get_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_get_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DST_ID_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set152 = iprot.readSetBegin();
                  struct.dstIdSet = new HashSet<Long>(2*_set152.size);
                  long _elem153;
                  for (int _i154 = 0; _i154 < _set152.size; ++_i154)
                  {
                    _elem153 = iprot.readI64();
                    struct.dstIdSet.add(_elem153);
                  }
                  iprot.readSetEnd();
                }
                struct.setDstIdSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // T_LOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tLow = iprot.readI64();
                struct.setTLowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // T_HIGH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tHigh = iprot.readI64();
                struct.setTHighIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_get_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        if (struct.dstIdSet != null) {
          oprot.writeFieldBegin(DST_ID_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.dstIdSet.size()));
            for (long _iter155 : struct.dstIdSet)
            {
              oprot.writeI64(_iter155);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(T_LOW_FIELD_DESC);
        oprot.writeI64(struct.tLow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_HIGH_FIELD_DESC);
        oprot.writeI64(struct.tHigh);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_get_local_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_get_local_argsTupleScheme getScheme() {
        return new assoc_get_local_argsTupleScheme();
      }
    }

    private static class assoc_get_local_argsTupleScheme extends TupleScheme<assoc_get_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_get_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetSrc()) {
          optionals.set(1);
        }
        if (struct.isSetAtype()) {
          optionals.set(2);
        }
        if (struct.isSetDstIdSet()) {
          optionals.set(3);
        }
        if (struct.isSetTLow()) {
          optionals.set(4);
        }
        if (struct.isSetTHigh()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
        if (struct.isSetDstIdSet()) {
          {
            oprot.writeI32(struct.dstIdSet.size());
            for (long _iter156 : struct.dstIdSet)
            {
              oprot.writeI64(_iter156);
            }
          }
        }
        if (struct.isSetTLow()) {
          oprot.writeI64(struct.tLow);
        }
        if (struct.isSetTHigh()) {
          oprot.writeI64(struct.tHigh);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_get_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set157 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.dstIdSet = new HashSet<Long>(2*_set157.size);
            long _elem158;
            for (int _i159 = 0; _i159 < _set157.size; ++_i159)
            {
              _elem158 = iprot.readI64();
              struct.dstIdSet.add(_elem158);
            }
          }
          struct.setDstIdSetIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tLow = iprot.readI64();
          struct.setTLowIsSet(true);
        }
        if (incoming.get(5)) {
          struct.tHigh = iprot.readI64();
          struct.setTHighIsSet(true);
        }
      }
    }

  }

  public static class assoc_get_local_result implements org.apache.thrift.TBase<assoc_get_local_result, assoc_get_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_get_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_get_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_get_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_get_local_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_get_local_result.class, metaDataMap);
    }

    public assoc_get_local_result() {
    }

    public assoc_get_local_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_get_local_result(assoc_get_local_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public assoc_get_local_result deepCopy() {
      return new assoc_get_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public assoc_get_local_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_get_local_result)
        return this.equals((assoc_get_local_result)that);
      return false;
    }

    public boolean equals(assoc_get_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_get_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_get_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_get_local_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_get_local_resultStandardScheme getScheme() {
        return new assoc_get_local_resultStandardScheme();
      }
    }

    private static class assoc_get_local_resultStandardScheme extends StandardScheme<assoc_get_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_get_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list160.size);
                  ThriftAssoc _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new ThriftAssoc();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_get_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_get_local_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_get_local_resultTupleScheme getScheme() {
        return new assoc_get_local_resultTupleScheme();
      }
    }

    private static class assoc_get_local_resultTupleScheme extends TupleScheme<assoc_get_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_get_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_get_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list165.size);
            ThriftAssoc _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new ThriftAssoc();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class obj_add_args implements org.apache.thrift.TBase<obj_add_args, obj_add_args._Fields>, java.io.Serializable, Cloneable, Comparable<obj_add_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obj_add_args");

    private static final org.apache.thrift.protocol.TField ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("attrs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obj_add_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obj_add_argsTupleSchemeFactory());
    }

    public List<String> attrs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTRS((short)1, "attrs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTRS
            return ATTRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTRS, new org.apache.thrift.meta_data.FieldMetaData("attrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obj_add_args.class, metaDataMap);
    }

    public obj_add_args() {
    }

    public obj_add_args(
      List<String> attrs)
    {
      this();
      this.attrs = attrs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obj_add_args(obj_add_args other) {
      if (other.isSetAttrs()) {
        List<String> __this__attrs = new ArrayList<String>(other.attrs);
        this.attrs = __this__attrs;
      }
    }

    public obj_add_args deepCopy() {
      return new obj_add_args(this);
    }

    @Override
    public void clear() {
      this.attrs = null;
    }

    public int getAttrsSize() {
      return (this.attrs == null) ? 0 : this.attrs.size();
    }

    public java.util.Iterator<String> getAttrsIterator() {
      return (this.attrs == null) ? null : this.attrs.iterator();
    }

    public void addToAttrs(String elem) {
      if (this.attrs == null) {
        this.attrs = new ArrayList<String>();
      }
      this.attrs.add(elem);
    }

    public List<String> getAttrs() {
      return this.attrs;
    }

    public obj_add_args setAttrs(List<String> attrs) {
      this.attrs = attrs;
      return this;
    }

    public void unsetAttrs() {
      this.attrs = null;
    }

    /** Returns true if field attrs is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrs() {
      return this.attrs != null;
    }

    public void setAttrsIsSet(boolean value) {
      if (!value) {
        this.attrs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTRS:
        if (value == null) {
          unsetAttrs();
        } else {
          setAttrs((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTRS:
        return getAttrs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTRS:
        return isSetAttrs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obj_add_args)
        return this.equals((obj_add_args)that);
      return false;
    }

    public boolean equals(obj_add_args that) {
      if (that == null)
        return false;

      boolean this_present_attrs = true && this.isSetAttrs();
      boolean that_present_attrs = true && that.isSetAttrs();
      if (this_present_attrs || that_present_attrs) {
        if (!(this_present_attrs && that_present_attrs))
          return false;
        if (!this.attrs.equals(that.attrs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_attrs = true && (isSetAttrs());
      list.add(present_attrs);
      if (present_attrs)
        list.add(attrs);

      return list.hashCode();
    }

    @Override
    public int compareTo(obj_add_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAttrs()).compareTo(other.isSetAttrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrs, other.attrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obj_add_args(");
      boolean first = true;

      sb.append("attrs:");
      if (this.attrs == null) {
        sb.append("null");
      } else {
        sb.append(this.attrs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obj_add_argsStandardSchemeFactory implements SchemeFactory {
      public obj_add_argsStandardScheme getScheme() {
        return new obj_add_argsStandardScheme();
      }
    }

    private static class obj_add_argsStandardScheme extends StandardScheme<obj_add_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obj_add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.attrs = new ArrayList<String>(_list168.size);
                  String _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = iprot.readString();
                    struct.attrs.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setAttrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obj_add_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.attrs != null) {
          oprot.writeFieldBegin(ATTRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attrs.size()));
            for (String _iter171 : struct.attrs)
            {
              oprot.writeString(_iter171);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obj_add_argsTupleSchemeFactory implements SchemeFactory {
      public obj_add_argsTupleScheme getScheme() {
        return new obj_add_argsTupleScheme();
      }
    }

    private static class obj_add_argsTupleScheme extends TupleScheme<obj_add_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obj_add_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttrs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAttrs()) {
          {
            oprot.writeI32(struct.attrs.size());
            for (String _iter172 : struct.attrs)
            {
              oprot.writeString(_iter172);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obj_add_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.attrs = new ArrayList<String>(_list173.size);
            String _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = iprot.readString();
              struct.attrs.add(_elem174);
            }
          }
          struct.setAttrsIsSet(true);
        }
      }
    }

  }

  public static class obj_add_result implements org.apache.thrift.TBase<obj_add_result, obj_add_result._Fields>, java.io.Serializable, Cloneable, Comparable<obj_add_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obj_add_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obj_add_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obj_add_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obj_add_result.class, metaDataMap);
    }

    public obj_add_result() {
    }

    public obj_add_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obj_add_result(obj_add_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public obj_add_result deepCopy() {
      return new obj_add_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public obj_add_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obj_add_result)
        return this.equals((obj_add_result)that);
      return false;
    }

    public boolean equals(obj_add_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(obj_add_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obj_add_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obj_add_resultStandardSchemeFactory implements SchemeFactory {
      public obj_add_resultStandardScheme getScheme() {
        return new obj_add_resultStandardScheme();
      }
    }

    private static class obj_add_resultStandardScheme extends StandardScheme<obj_add_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obj_add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obj_add_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obj_add_resultTupleSchemeFactory implements SchemeFactory {
      public obj_add_resultTupleScheme getScheme() {
        return new obj_add_resultTupleScheme();
      }
    }

    private static class obj_add_resultTupleScheme extends TupleScheme<obj_add_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obj_add_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obj_add_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class obj_get_args implements org.apache.thrift.TBase<obj_get_args, obj_get_args._Fields>, java.io.Serializable, Cloneable, Comparable<obj_get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obj_get_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obj_get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obj_get_argsTupleSchemeFactory());
    }

    public long nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obj_get_args.class, metaDataMap);
    }

    public obj_get_args() {
    }

    public obj_get_args(
      long nodeId)
    {
      this();
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obj_get_args(obj_get_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nodeId = other.nodeId;
    }

    public obj_get_args deepCopy() {
      return new obj_get_args(this);
    }

    @Override
    public void clear() {
      setNodeIdIsSet(false);
      this.nodeId = 0;
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public obj_get_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obj_get_args)
        return this.equals((obj_get_args)that);
      return false;
    }

    public boolean equals(obj_get_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obj_get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obj_get_args(");
      boolean first = true;

      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obj_get_argsStandardSchemeFactory implements SchemeFactory {
      public obj_get_argsStandardScheme getScheme() {
        return new obj_get_argsStandardScheme();
      }
    }

    private static class obj_get_argsStandardScheme extends StandardScheme<obj_get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obj_get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obj_get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obj_get_argsTupleSchemeFactory implements SchemeFactory {
      public obj_get_argsTupleScheme getScheme() {
        return new obj_get_argsTupleScheme();
      }
    }

    private static class obj_get_argsTupleScheme extends TupleScheme<obj_get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obj_get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obj_get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class obj_get_result implements org.apache.thrift.TBase<obj_get_result, obj_get_result._Fields>, java.io.Serializable, Cloneable, Comparable<obj_get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obj_get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obj_get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obj_get_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obj_get_result.class, metaDataMap);
    }

    public obj_get_result() {
    }

    public obj_get_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obj_get_result(obj_get_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public obj_get_result deepCopy() {
      return new obj_get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public obj_get_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obj_get_result)
        return this.equals((obj_get_result)that);
      return false;
    }

    public boolean equals(obj_get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(obj_get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obj_get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obj_get_resultStandardSchemeFactory implements SchemeFactory {
      public obj_get_resultStandardScheme getScheme() {
        return new obj_get_resultStandardScheme();
      }
    }

    private static class obj_get_resultStandardScheme extends StandardScheme<obj_get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obj_get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list176.size);
                  String _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = iprot.readString();
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obj_get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter179 : struct.success)
            {
              oprot.writeString(_iter179);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obj_get_resultTupleSchemeFactory implements SchemeFactory {
      public obj_get_resultTupleScheme getScheme() {
        return new obj_get_resultTupleScheme();
      }
    }

    private static class obj_get_resultTupleScheme extends TupleScheme<obj_get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obj_get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter180 : struct.success)
            {
              oprot.writeString(_iter180);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obj_get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list181.size);
            String _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = iprot.readString();
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class obj_get_local_args implements org.apache.thrift.TBase<obj_get_local_args, obj_get_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<obj_get_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obj_get_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obj_get_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obj_get_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      NODE_ID((short)2, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __NODEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obj_get_local_args.class, metaDataMap);
    }

    public obj_get_local_args() {
    }

    public obj_get_local_args(
      int shardId,
      long nodeId)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obj_get_local_args(obj_get_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.nodeId = other.nodeId;
    }

    public obj_get_local_args deepCopy() {
      return new obj_get_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setNodeIdIsSet(false);
      this.nodeId = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public obj_get_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getNodeId() {
      return this.nodeId;
    }

    public obj_get_local_args setNodeId(long nodeId) {
      this.nodeId = nodeId;
      setNodeIdIsSet(true);
      return this;
    }

    public void unsetNodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
    }

    public void setNodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obj_get_local_args)
        return this.equals((obj_get_local_args)that);
      return false;
    }

    public boolean equals(obj_get_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_nodeId = true;
      boolean that_present_nodeId = true;
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (this.nodeId != that.nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_nodeId = true;
      list.add(present_nodeId);
      if (present_nodeId)
        list.add(nodeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obj_get_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obj_get_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      sb.append(this.nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obj_get_local_argsStandardSchemeFactory implements SchemeFactory {
      public obj_get_local_argsStandardScheme getScheme() {
        return new obj_get_local_argsStandardScheme();
      }
    }

    private static class obj_get_local_argsStandardScheme extends StandardScheme<obj_get_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obj_get_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nodeId = iprot.readI64();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obj_get_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI64(struct.nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obj_get_local_argsTupleSchemeFactory implements SchemeFactory {
      public obj_get_local_argsTupleScheme getScheme() {
        return new obj_get_local_argsTupleScheme();
      }
    }

    private static class obj_get_local_argsTupleScheme extends TupleScheme<obj_get_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obj_get_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetNodeId()) {
          oprot.writeI64(struct.nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obj_get_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeId = iprot.readI64();
          struct.setNodeIdIsSet(true);
        }
      }
    }

  }

  public static class obj_get_local_result implements org.apache.thrift.TBase<obj_get_local_result, obj_get_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<obj_get_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obj_get_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obj_get_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obj_get_local_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obj_get_local_result.class, metaDataMap);
    }

    public obj_get_local_result() {
    }

    public obj_get_local_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obj_get_local_result(obj_get_local_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public obj_get_local_result deepCopy() {
      return new obj_get_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public obj_get_local_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obj_get_local_result)
        return this.equals((obj_get_local_result)that);
      return false;
    }

    public boolean equals(obj_get_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(obj_get_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obj_get_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obj_get_local_resultStandardSchemeFactory implements SchemeFactory {
      public obj_get_local_resultStandardScheme getScheme() {
        return new obj_get_local_resultStandardScheme();
      }
    }

    private static class obj_get_local_resultStandardScheme extends StandardScheme<obj_get_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obj_get_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list184.size);
                  String _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = iprot.readString();
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obj_get_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter187 : struct.success)
            {
              oprot.writeString(_iter187);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obj_get_local_resultTupleSchemeFactory implements SchemeFactory {
      public obj_get_local_resultTupleScheme getScheme() {
        return new obj_get_local_resultTupleScheme();
      }
    }

    private static class obj_get_local_resultTupleScheme extends TupleScheme<obj_get_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obj_get_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter188 : struct.success)
            {
              oprot.writeString(_iter188);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obj_get_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list189.size);
            String _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = iprot.readString();
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_time_range_args implements org.apache.thrift.TBase<assoc_time_range_args, assoc_time_range_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_time_range_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_time_range_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField T_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("tLow", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField T_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("tHigh", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_time_range_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_time_range_argsTupleSchemeFactory());
    }

    public long src; // required
    public long atype; // required
    public long tLow; // required
    public long tHigh; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ATYPE((short)2, "atype"),
      T_LOW((short)3, "tLow"),
      T_HIGH((short)4, "tHigh"),
      LIMIT((short)5, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ATYPE
            return ATYPE;
          case 3: // T_LOW
            return T_LOW;
          case 4: // T_HIGH
            return T_HIGH;
          case 5: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRC_ISSET_ID = 0;
    private static final int __ATYPE_ISSET_ID = 1;
    private static final int __TLOW_ISSET_ID = 2;
    private static final int __THIGH_ISSET_ID = 3;
    private static final int __LIMIT_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.T_LOW, new org.apache.thrift.meta_data.FieldMetaData("tLow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.T_HIGH, new org.apache.thrift.meta_data.FieldMetaData("tHigh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_time_range_args.class, metaDataMap);
    }

    public assoc_time_range_args() {
    }

    public assoc_time_range_args(
      long src,
      long atype,
      long tLow,
      long tHigh,
      int limit)
    {
      this();
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
      this.tLow = tLow;
      setTLowIsSet(true);
      this.tHigh = tHigh;
      setTHighIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_time_range_args(assoc_time_range_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.src = other.src;
      this.atype = other.atype;
      this.tLow = other.tLow;
      this.tHigh = other.tHigh;
      this.limit = other.limit;
    }

    public assoc_time_range_args deepCopy() {
      return new assoc_time_range_args(this);
    }

    @Override
    public void clear() {
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
      setTLowIsSet(false);
      this.tLow = 0;
      setTHighIsSet(false);
      this.tHigh = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_time_range_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_time_range_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public long getTLow() {
      return this.tLow;
    }

    public assoc_time_range_args setTLow(long tLow) {
      this.tLow = tLow;
      setTLowIsSet(true);
      return this;
    }

    public void unsetTLow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    /** Returns true if field tLow is set (has been assigned a value) and false otherwise */
    public boolean isSetTLow() {
      return EncodingUtils.testBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    public void setTLowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TLOW_ISSET_ID, value);
    }

    public long getTHigh() {
      return this.tHigh;
    }

    public assoc_time_range_args setTHigh(long tHigh) {
      this.tHigh = tHigh;
      setTHighIsSet(true);
      return this;
    }

    public void unsetTHigh() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    /** Returns true if field tHigh is set (has been assigned a value) and false otherwise */
    public boolean isSetTHigh() {
      return EncodingUtils.testBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    public void setTHighIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIGH_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public assoc_time_range_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      case T_LOW:
        if (value == null) {
          unsetTLow();
        } else {
          setTLow((Long)value);
        }
        break;

      case T_HIGH:
        if (value == null) {
          unsetTHigh();
        } else {
          setTHigh((Long)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      case T_LOW:
        return getTLow();

      case T_HIGH:
        return getTHigh();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      case T_LOW:
        return isSetTLow();
      case T_HIGH:
        return isSetTHigh();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_time_range_args)
        return this.equals((assoc_time_range_args)that);
      return false;
    }

    public boolean equals(assoc_time_range_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      boolean this_present_tLow = true;
      boolean that_present_tLow = true;
      if (this_present_tLow || that_present_tLow) {
        if (!(this_present_tLow && that_present_tLow))
          return false;
        if (this.tLow != that.tLow)
          return false;
      }

      boolean this_present_tHigh = true;
      boolean that_present_tHigh = true;
      if (this_present_tHigh || that_present_tHigh) {
        if (!(this_present_tHigh && that_present_tHigh))
          return false;
        if (this.tHigh != that.tHigh)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      boolean present_tLow = true;
      list.add(present_tLow);
      if (present_tLow)
        list.add(tLow);

      boolean present_tHigh = true;
      list.add(present_tHigh);
      if (present_tHigh)
        list.add(tHigh);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_time_range_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTLow()).compareTo(other.isSetTLow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTLow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tLow, other.tLow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTHigh()).compareTo(other.isSetTHigh());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTHigh()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tHigh, other.tHigh);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_time_range_args(");
      boolean first = true;

      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tLow:");
      sb.append(this.tLow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tHigh:");
      sb.append(this.tHigh);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_time_range_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_time_range_argsStandardScheme getScheme() {
        return new assoc_time_range_argsStandardScheme();
      }
    }

    private static class assoc_time_range_argsStandardScheme extends StandardScheme<assoc_time_range_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_time_range_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_LOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tLow = iprot.readI64();
                struct.setTLowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_HIGH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tHigh = iprot.readI64();
                struct.setTHighIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_time_range_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_LOW_FIELD_DESC);
        oprot.writeI64(struct.tLow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_HIGH_FIELD_DESC);
        oprot.writeI64(struct.tHigh);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_time_range_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_time_range_argsTupleScheme getScheme() {
        return new assoc_time_range_argsTupleScheme();
      }
    }

    private static class assoc_time_range_argsTupleScheme extends TupleScheme<assoc_time_range_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAtype()) {
          optionals.set(1);
        }
        if (struct.isSetTLow()) {
          optionals.set(2);
        }
        if (struct.isSetTHigh()) {
          optionals.set(3);
        }
        if (struct.isSetLimit()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
        if (struct.isSetTLow()) {
          oprot.writeI64(struct.tLow);
        }
        if (struct.isSetTHigh()) {
          oprot.writeI64(struct.tHigh);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tLow = iprot.readI64();
          struct.setTLowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tHigh = iprot.readI64();
          struct.setTHighIsSet(true);
        }
        if (incoming.get(4)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class assoc_time_range_result implements org.apache.thrift.TBase<assoc_time_range_result, assoc_time_range_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_time_range_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_time_range_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_time_range_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_time_range_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_time_range_result.class, metaDataMap);
    }

    public assoc_time_range_result() {
    }

    public assoc_time_range_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_time_range_result(assoc_time_range_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public assoc_time_range_result deepCopy() {
      return new assoc_time_range_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public assoc_time_range_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_time_range_result)
        return this.equals((assoc_time_range_result)that);
      return false;
    }

    public boolean equals(assoc_time_range_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_time_range_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_time_range_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_time_range_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_time_range_resultStandardScheme getScheme() {
        return new assoc_time_range_resultStandardScheme();
      }
    }

    private static class assoc_time_range_resultStandardScheme extends StandardScheme<assoc_time_range_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_time_range_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list192.size);
                  ThriftAssoc _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new ThriftAssoc();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_time_range_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_time_range_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_time_range_resultTupleScheme getScheme() {
        return new assoc_time_range_resultTupleScheme();
      }
    }

    private static class assoc_time_range_resultTupleScheme extends TupleScheme<assoc_time_range_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list197.size);
            ThriftAssoc _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new ThriftAssoc();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_time_range_local_args implements org.apache.thrift.TBase<assoc_time_range_local_args, assoc_time_range_local_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_time_range_local_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_time_range_local_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField T_LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("tLow", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField T_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("tHigh", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_time_range_local_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_time_range_local_argsTupleSchemeFactory());
    }

    public int shardId; // required
    public long src; // required
    public long atype; // required
    public long tLow; // required
    public long tHigh; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shardId"),
      SRC((short)2, "src"),
      ATYPE((short)3, "atype"),
      T_LOW((short)4, "tLow"),
      T_HIGH((short)5, "tHigh"),
      LIMIT((short)6, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // SRC
            return SRC;
          case 3: // ATYPE
            return ATYPE;
          case 4: // T_LOW
            return T_LOW;
          case 5: // T_HIGH
            return T_HIGH;
          case 6: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARDID_ISSET_ID = 0;
    private static final int __SRC_ISSET_ID = 1;
    private static final int __ATYPE_ISSET_ID = 2;
    private static final int __TLOW_ISSET_ID = 3;
    private static final int __THIGH_ISSET_ID = 4;
    private static final int __LIMIT_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.T_LOW, new org.apache.thrift.meta_data.FieldMetaData("tLow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.T_HIGH, new org.apache.thrift.meta_data.FieldMetaData("tHigh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_time_range_local_args.class, metaDataMap);
    }

    public assoc_time_range_local_args() {
    }

    public assoc_time_range_local_args(
      int shardId,
      long src,
      long atype,
      long tLow,
      long tHigh,
      int limit)
    {
      this();
      this.shardId = shardId;
      setShardIdIsSet(true);
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
      this.tLow = tLow;
      setTLowIsSet(true);
      this.tHigh = tHigh;
      setTHighIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_time_range_local_args(assoc_time_range_local_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shardId = other.shardId;
      this.src = other.src;
      this.atype = other.atype;
      this.tLow = other.tLow;
      this.tHigh = other.tHigh;
      this.limit = other.limit;
    }

    public assoc_time_range_local_args deepCopy() {
      return new assoc_time_range_local_args(this);
    }

    @Override
    public void clear() {
      setShardIdIsSet(false);
      this.shardId = 0;
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
      setTLowIsSet(false);
      this.tLow = 0;
      setTHighIsSet(false);
      this.tHigh = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public int getShardId() {
      return this.shardId;
    }

    public assoc_time_range_local_args setShardId(int shardId) {
      this.shardId = shardId;
      setShardIdIsSet(true);
      return this;
    }

    public void unsetShardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
    public boolean isSetShardId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
    }

    public void setShardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_time_range_local_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_time_range_local_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public long getTLow() {
      return this.tLow;
    }

    public assoc_time_range_local_args setTLow(long tLow) {
      this.tLow = tLow;
      setTLowIsSet(true);
      return this;
    }

    public void unsetTLow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    /** Returns true if field tLow is set (has been assigned a value) and false otherwise */
    public boolean isSetTLow() {
      return EncodingUtils.testBit(__isset_bitfield, __TLOW_ISSET_ID);
    }

    public void setTLowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TLOW_ISSET_ID, value);
    }

    public long getTHigh() {
      return this.tHigh;
    }

    public assoc_time_range_local_args setTHigh(long tHigh) {
      this.tHigh = tHigh;
      setTHighIsSet(true);
      return this;
    }

    public void unsetTHigh() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    /** Returns true if field tHigh is set (has been assigned a value) and false otherwise */
    public boolean isSetTHigh() {
      return EncodingUtils.testBit(__isset_bitfield, __THIGH_ISSET_ID);
    }

    public void setTHighIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THIGH_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public assoc_time_range_local_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShardId();
        } else {
          setShardId((Integer)value);
        }
        break;

      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      case T_LOW:
        if (value == null) {
          unsetTLow();
        } else {
          setTLow((Long)value);
        }
        break;

      case T_HIGH:
        if (value == null) {
          unsetTHigh();
        } else {
          setTHigh((Long)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShardId();

      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      case T_LOW:
        return getTLow();

      case T_HIGH:
        return getTHigh();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShardId();
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      case T_LOW:
        return isSetTLow();
      case T_HIGH:
        return isSetTHigh();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_time_range_local_args)
        return this.equals((assoc_time_range_local_args)that);
      return false;
    }

    public boolean equals(assoc_time_range_local_args that) {
      if (that == null)
        return false;

      boolean this_present_shardId = true;
      boolean that_present_shardId = true;
      if (this_present_shardId || that_present_shardId) {
        if (!(this_present_shardId && that_present_shardId))
          return false;
        if (this.shardId != that.shardId)
          return false;
      }

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      boolean this_present_tLow = true;
      boolean that_present_tLow = true;
      if (this_present_tLow || that_present_tLow) {
        if (!(this_present_tLow && that_present_tLow))
          return false;
        if (this.tLow != that.tLow)
          return false;
      }

      boolean this_present_tHigh = true;
      boolean that_present_tHigh = true;
      if (this_present_tHigh || that_present_tHigh) {
        if (!(this_present_tHigh && that_present_tHigh))
          return false;
        if (this.tHigh != that.tHigh)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shardId = true;
      list.add(present_shardId);
      if (present_shardId)
        list.add(shardId);

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      boolean present_tLow = true;
      list.add(present_tLow);
      if (present_tLow)
        list.add(tLow);

      boolean present_tHigh = true;
      list.add(present_tHigh);
      if (present_tHigh)
        list.add(tHigh);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_time_range_local_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTLow()).compareTo(other.isSetTLow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTLow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tLow, other.tLow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTHigh()).compareTo(other.isSetTHigh());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTHigh()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tHigh, other.tHigh);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_time_range_local_args(");
      boolean first = true;

      sb.append("shardId:");
      sb.append(this.shardId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tLow:");
      sb.append(this.tLow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tHigh:");
      sb.append(this.tHigh);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_time_range_local_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_time_range_local_argsStandardScheme getScheme() {
        return new assoc_time_range_local_argsStandardScheme();
      }
    }

    private static class assoc_time_range_local_argsStandardScheme extends StandardScheme<assoc_time_range_local_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_time_range_local_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shardId = iprot.readI32();
                struct.setShardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_LOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tLow = iprot.readI64();
                struct.setTLowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // T_HIGH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tHigh = iprot.readI64();
                struct.setTHighIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_time_range_local_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI32(struct.shardId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_LOW_FIELD_DESC);
        oprot.writeI64(struct.tLow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_HIGH_FIELD_DESC);
        oprot.writeI64(struct.tHigh);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_time_range_local_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_time_range_local_argsTupleScheme getScheme() {
        return new assoc_time_range_local_argsTupleScheme();
      }
    }

    private static class assoc_time_range_local_argsTupleScheme extends TupleScheme<assoc_time_range_local_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShardId()) {
          optionals.set(0);
        }
        if (struct.isSetSrc()) {
          optionals.set(1);
        }
        if (struct.isSetAtype()) {
          optionals.set(2);
        }
        if (struct.isSetTLow()) {
          optionals.set(3);
        }
        if (struct.isSetTHigh()) {
          optionals.set(4);
        }
        if (struct.isSetLimit()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetShardId()) {
          oprot.writeI32(struct.shardId);
        }
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
        if (struct.isSetTLow()) {
          oprot.writeI64(struct.tLow);
        }
        if (struct.isSetTHigh()) {
          oprot.writeI64(struct.tHigh);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_local_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.shardId = iprot.readI32();
          struct.setShardIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tLow = iprot.readI64();
          struct.setTLowIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tHigh = iprot.readI64();
          struct.setTHighIsSet(true);
        }
        if (incoming.get(5)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class assoc_time_range_local_result implements org.apache.thrift.TBase<assoc_time_range_local_result, assoc_time_range_local_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_time_range_local_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_time_range_local_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_time_range_local_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_time_range_local_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_time_range_local_result.class, metaDataMap);
    }

    public assoc_time_range_local_result() {
    }

    public assoc_time_range_local_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_time_range_local_result(assoc_time_range_local_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public assoc_time_range_local_result deepCopy() {
      return new assoc_time_range_local_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public assoc_time_range_local_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_time_range_local_result)
        return this.equals((assoc_time_range_local_result)that);
      return false;
    }

    public boolean equals(assoc_time_range_local_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_time_range_local_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_time_range_local_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_time_range_local_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_time_range_local_resultStandardScheme getScheme() {
        return new assoc_time_range_local_resultStandardScheme();
      }
    }

    private static class assoc_time_range_local_resultStandardScheme extends StandardScheme<assoc_time_range_local_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_time_range_local_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list200.size);
                  ThriftAssoc _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new ThriftAssoc();
                    _elem201.read(iprot);
                    struct.success.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_time_range_local_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_time_range_local_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_time_range_local_resultTupleScheme getScheme() {
        return new assoc_time_range_local_resultTupleScheme();
      }
    }

    private static class assoc_time_range_local_resultTupleScheme extends TupleScheme<assoc_time_range_local_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_time_range_local_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list205.size);
            ThriftAssoc _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new ThriftAssoc();
              _elem206.read(iprot);
              struct.success.add(_elem206);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assoc_add_args implements org.apache.thrift.TBase<assoc_add_args, assoc_add_args._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_add_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_add_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("atype", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DST_FIELD_DESC = new org.apache.thrift.protocol.TField("dst", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("attr", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_add_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_add_argsTupleSchemeFactory());
    }

    public long src; // required
    public long atype; // required
    public long dst; // required
    public long time; // required
    public String attr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      ATYPE((short)2, "atype"),
      DST((short)3, "dst"),
      TIME((short)4, "time"),
      ATTR((short)5, "attr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // ATYPE
            return ATYPE;
          case 3: // DST
            return DST;
          case 4: // TIME
            return TIME;
          case 5: // ATTR
            return ATTR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRC_ISSET_ID = 0;
    private static final int __ATYPE_ISSET_ID = 1;
    private static final int __DST_ISSET_ID = 2;
    private static final int __TIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATYPE, new org.apache.thrift.meta_data.FieldMetaData("atype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DST, new org.apache.thrift.meta_data.FieldMetaData("dst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ATTR, new org.apache.thrift.meta_data.FieldMetaData("attr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_add_args.class, metaDataMap);
    }

    public assoc_add_args() {
    }

    public assoc_add_args(
      long src,
      long atype,
      long dst,
      long time,
      String attr)
    {
      this();
      this.src = src;
      setSrcIsSet(true);
      this.atype = atype;
      setAtypeIsSet(true);
      this.dst = dst;
      setDstIsSet(true);
      this.time = time;
      setTimeIsSet(true);
      this.attr = attr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_add_args(assoc_add_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.src = other.src;
      this.atype = other.atype;
      this.dst = other.dst;
      this.time = other.time;
      if (other.isSetAttr()) {
        this.attr = other.attr;
      }
    }

    public assoc_add_args deepCopy() {
      return new assoc_add_args(this);
    }

    @Override
    public void clear() {
      setSrcIsSet(false);
      this.src = 0;
      setAtypeIsSet(false);
      this.atype = 0;
      setDstIsSet(false);
      this.dst = 0;
      setTimeIsSet(false);
      this.time = 0;
      this.attr = null;
    }

    public long getSrc() {
      return this.src;
    }

    public assoc_add_args setSrc(long src) {
      this.src = src;
      setSrcIsSet(true);
      return this;
    }

    public void unsetSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __SRC_ISSET_ID);
    }

    public void setSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRC_ISSET_ID, value);
    }

    public long getAtype() {
      return this.atype;
    }

    public assoc_add_args setAtype(long atype) {
      this.atype = atype;
      setAtypeIsSet(true);
      return this;
    }

    public void unsetAtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    /** Returns true if field atype is set (has been assigned a value) and false otherwise */
    public boolean isSetAtype() {
      return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
    }

    public void setAtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
    }

    public long getDst() {
      return this.dst;
    }

    public assoc_add_args setDst(long dst) {
      this.dst = dst;
      setDstIsSet(true);
      return this;
    }

    public void unsetDst() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DST_ISSET_ID);
    }

    /** Returns true if field dst is set (has been assigned a value) and false otherwise */
    public boolean isSetDst() {
      return EncodingUtils.testBit(__isset_bitfield, __DST_ISSET_ID);
    }

    public void setDstIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DST_ISSET_ID, value);
    }

    public long getTime() {
      return this.time;
    }

    public assoc_add_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public String getAttr() {
      return this.attr;
    }

    public assoc_add_args setAttr(String attr) {
      this.attr = attr;
      return this;
    }

    public void unsetAttr() {
      this.attr = null;
    }

    /** Returns true if field attr is set (has been assigned a value) and false otherwise */
    public boolean isSetAttr() {
      return this.attr != null;
    }

    public void setAttrIsSet(boolean value) {
      if (!value) {
        this.attr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((Long)value);
        }
        break;

      case ATYPE:
        if (value == null) {
          unsetAtype();
        } else {
          setAtype((Long)value);
        }
        break;

      case DST:
        if (value == null) {
          unsetDst();
        } else {
          setDst((Long)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Long)value);
        }
        break;

      case ATTR:
        if (value == null) {
          unsetAttr();
        } else {
          setAttr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case ATYPE:
        return getAtype();

      case DST:
        return getDst();

      case TIME:
        return getTime();

      case ATTR:
        return getAttr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case ATYPE:
        return isSetAtype();
      case DST:
        return isSetDst();
      case TIME:
        return isSetTime();
      case ATTR:
        return isSetAttr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_add_args)
        return this.equals((assoc_add_args)that);
      return false;
    }

    public boolean equals(assoc_add_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true;
      boolean that_present_src = true;
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (this.src != that.src)
          return false;
      }

      boolean this_present_atype = true;
      boolean that_present_atype = true;
      if (this_present_atype || that_present_atype) {
        if (!(this_present_atype && that_present_atype))
          return false;
        if (this.atype != that.atype)
          return false;
      }

      boolean this_present_dst = true;
      boolean that_present_dst = true;
      if (this_present_dst || that_present_dst) {
        if (!(this_present_dst && that_present_dst))
          return false;
        if (this.dst != that.dst)
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_attr = true && this.isSetAttr();
      boolean that_present_attr = true && that.isSetAttr();
      if (this_present_attr || that_present_attr) {
        if (!(this_present_attr && that_present_attr))
          return false;
        if (!this.attr.equals(that.attr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true;
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_atype = true;
      list.add(present_atype);
      if (present_atype)
        list.add(atype);

      boolean present_dst = true;
      list.add(present_dst);
      if (present_dst)
        list.add(dst);

      boolean present_time = true;
      list.add(present_time);
      if (present_time)
        list.add(time);

      boolean present_attr = true && (isSetAttr());
      list.add(present_attr);
      if (present_attr)
        list.add(attr);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_add_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtype()).compareTo(other.isSetAtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atype, other.atype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDst()).compareTo(other.isSetDst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dst, other.dst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttr()).compareTo(other.isSetAttr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr, other.attr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_add_args(");
      boolean first = true;

      sb.append("src:");
      sb.append(this.src);
      first = false;
      if (!first) sb.append(", ");
      sb.append("atype:");
      sb.append(this.atype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dst:");
      sb.append(this.dst);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attr:");
      if (this.attr == null) {
        sb.append("null");
      } else {
        sb.append(this.attr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_add_argsStandardSchemeFactory implements SchemeFactory {
      public assoc_add_argsStandardScheme getScheme() {
        return new assoc_add_argsStandardScheme();
      }
    }

    private static class assoc_add_argsStandardScheme extends StandardScheme<assoc_add_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.src = iprot.readI64();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.atype = iprot.readI64();
                struct.setAtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DST
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dst = iprot.readI64();
                struct.setDstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attr = iprot.readString();
                struct.setAttrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_add_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI64(struct.src);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATYPE_FIELD_DESC);
        oprot.writeI64(struct.atype);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DST_FIELD_DESC);
        oprot.writeI64(struct.dst);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
        if (struct.attr != null) {
          oprot.writeFieldBegin(ATTR_FIELD_DESC);
          oprot.writeString(struct.attr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_add_argsTupleSchemeFactory implements SchemeFactory {
      public assoc_add_argsTupleScheme getScheme() {
        return new assoc_add_argsTupleScheme();
      }
    }

    private static class assoc_add_argsTupleScheme extends TupleScheme<assoc_add_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_add_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetAtype()) {
          optionals.set(1);
        }
        if (struct.isSetDst()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        if (struct.isSetAttr()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSrc()) {
          oprot.writeI64(struct.src);
        }
        if (struct.isSetAtype()) {
          oprot.writeI64(struct.atype);
        }
        if (struct.isSetDst()) {
          oprot.writeI64(struct.dst);
        }
        if (struct.isSetTime()) {
          oprot.writeI64(struct.time);
        }
        if (struct.isSetAttr()) {
          oprot.writeString(struct.attr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_add_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.src = iprot.readI64();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.atype = iprot.readI64();
          struct.setAtypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dst = iprot.readI64();
          struct.setDstIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI64();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.attr = iprot.readString();
          struct.setAttrIsSet(true);
        }
      }
    }

  }

  public static class assoc_add_result implements org.apache.thrift.TBase<assoc_add_result, assoc_add_result._Fields>, java.io.Serializable, Cloneable, Comparable<assoc_add_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assoc_add_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assoc_add_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assoc_add_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assoc_add_result.class, metaDataMap);
    }

    public assoc_add_result() {
    }

    public assoc_add_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assoc_add_result(assoc_add_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public assoc_add_result deepCopy() {
      return new assoc_add_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public assoc_add_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assoc_add_result)
        return this.equals((assoc_add_result)that);
      return false;
    }

    public boolean equals(assoc_add_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assoc_add_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assoc_add_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assoc_add_resultStandardSchemeFactory implements SchemeFactory {
      public assoc_add_resultStandardScheme getScheme() {
        return new assoc_add_resultStandardScheme();
      }
    }

    private static class assoc_add_resultStandardScheme extends StandardScheme<assoc_add_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assoc_add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assoc_add_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assoc_add_resultTupleSchemeFactory implements SchemeFactory {
      public assoc_add_resultTupleScheme getScheme() {
        return new assoc_add_resultTupleScheme();
      }
    }

    private static class assoc_add_resultTupleScheme extends TupleScheme<assoc_add_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assoc_add_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assoc_add_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNode_args implements org.apache.thrift.TBase<getNode_args, getNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNode_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNode_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNode_args.class, metaDataMap);
    }

    public getNode_args() {
    }

    public getNode_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNode_args(getNode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getNode_args deepCopy() {
      return new getNode_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public getNode_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNode_args)
        return this.equals((getNode_args)that);
      return false;
    }

    public boolean equals(getNode_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNode_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNode_argsStandardSchemeFactory implements SchemeFactory {
      public getNode_argsStandardScheme getScheme() {
        return new getNode_argsStandardScheme();
      }
    }

    private static class getNode_argsStandardScheme extends StandardScheme<getNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNode_argsTupleSchemeFactory implements SchemeFactory {
      public getNode_argsTupleScheme getScheme() {
        return new getNode_argsTupleScheme();
      }
    }

    private static class getNode_argsTupleScheme extends TupleScheme<getNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getNode_result implements org.apache.thrift.TBase<getNode_result, getNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNode_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNode_result.class, metaDataMap);
    }

    public getNode_result() {
    }

    public getNode_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNode_result(getNode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getNode_result deepCopy() {
      return new getNode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getNode_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNode_result)
        return this.equals((getNode_result)that);
      return false;
    }

    public boolean equals(getNode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNode_resultStandardSchemeFactory implements SchemeFactory {
      public getNode_resultStandardScheme getScheme() {
        return new getNode_resultStandardScheme();
      }
    }

    private static class getNode_resultStandardScheme extends StandardScheme<getNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNode_resultTupleSchemeFactory implements SchemeFactory {
      public getNode_resultTupleScheme getScheme() {
        return new getNode_resultTupleScheme();
      }
    }

    private static class getNode_resultTupleScheme extends TupleScheme<getNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNodeLocal_args implements org.apache.thrift.TBase<getNodeLocal_args, getNodeLocal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNodeLocal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNodeLocal_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNodeLocal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNodeLocal_argsTupleSchemeFactory());
    }

    public long shard_id; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shard_id"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARD_ID_ISSET_ID = 0;
    private static final int __ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shard_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodeLocal_args.class, metaDataMap);
    }

    public getNodeLocal_args() {
    }

    public getNodeLocal_args(
      long shard_id,
      long id)
    {
      this();
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNodeLocal_args(getNodeLocal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shard_id = other.shard_id;
      this.id = other.id;
    }

    public getNodeLocal_args deepCopy() {
      return new getNodeLocal_args(this);
    }

    @Override
    public void clear() {
      setShard_idIsSet(false);
      this.shard_id = 0;
      setIdIsSet(false);
      this.id = 0;
    }

    public long getShard_id() {
      return this.shard_id;
    }

    public getNodeLocal_args setShard_id(long shard_id) {
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      return this;
    }

    public void unsetShard_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    /** Returns true if field shard_id is set (has been assigned a value) and false otherwise */
    public boolean isSetShard_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    public void setShard_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARD_ID_ISSET_ID, value);
    }

    public long getId() {
      return this.id;
    }

    public getNodeLocal_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShard_id();
        } else {
          setShard_id((Long)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShard_id();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShard_id();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNodeLocal_args)
        return this.equals((getNodeLocal_args)that);
      return false;
    }

    public boolean equals(getNodeLocal_args that) {
      if (that == null)
        return false;

      boolean this_present_shard_id = true;
      boolean that_present_shard_id = true;
      if (this_present_shard_id || that_present_shard_id) {
        if (!(this_present_shard_id && that_present_shard_id))
          return false;
        if (this.shard_id != that.shard_id)
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shard_id = true;
      list.add(present_shard_id);
      if (present_shard_id)
        list.add(shard_id);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNodeLocal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShard_id()).compareTo(other.isSetShard_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_id, other.shard_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNodeLocal_args(");
      boolean first = true;

      sb.append("shard_id:");
      sb.append(this.shard_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNodeLocal_argsStandardSchemeFactory implements SchemeFactory {
      public getNodeLocal_argsStandardScheme getScheme() {
        return new getNodeLocal_argsStandardScheme();
      }
    }

    private static class getNodeLocal_argsStandardScheme extends StandardScheme<getNodeLocal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNodeLocal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shard_id = iprot.readI64();
                struct.setShard_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNodeLocal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI64(struct.shard_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNodeLocal_argsTupleSchemeFactory implements SchemeFactory {
      public getNodeLocal_argsTupleScheme getScheme() {
        return new getNodeLocal_argsTupleScheme();
      }
    }

    private static class getNodeLocal_argsTupleScheme extends TupleScheme<getNodeLocal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNodeLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShard_id()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShard_id()) {
          oprot.writeI64(struct.shard_id);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNodeLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shard_id = iprot.readI64();
          struct.setShard_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getNodeLocal_result implements org.apache.thrift.TBase<getNodeLocal_result, getNodeLocal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNodeLocal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNodeLocal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNodeLocal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNodeLocal_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodeLocal_result.class, metaDataMap);
    }

    public getNodeLocal_result() {
    }

    public getNodeLocal_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNodeLocal_result(getNodeLocal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getNodeLocal_result deepCopy() {
      return new getNodeLocal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getNodeLocal_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNodeLocal_result)
        return this.equals((getNodeLocal_result)that);
      return false;
    }

    public boolean equals(getNodeLocal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNodeLocal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNodeLocal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNodeLocal_resultStandardSchemeFactory implements SchemeFactory {
      public getNodeLocal_resultStandardScheme getScheme() {
        return new getNodeLocal_resultStandardScheme();
      }
    }

    private static class getNodeLocal_resultStandardScheme extends StandardScheme<getNodeLocal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNodeLocal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNodeLocal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNodeLocal_resultTupleSchemeFactory implements SchemeFactory {
      public getNodeLocal_resultTupleScheme getScheme() {
        return new getNodeLocal_resultTupleScheme();
      }
    }

    private static class getNodeLocal_resultTupleScheme extends TupleScheme<getNodeLocal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNodeLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNodeLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addNode_args implements org.apache.thrift.TBase<addNode_args, addNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNode_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNode_argsTupleSchemeFactory());
    }

    public long id; // required
    public String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DATA((short)2, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNode_args.class, metaDataMap);
    }

    public addNode_args() {
    }

    public addNode_args(
      long id,
      String data)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNode_args(addNode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public addNode_args deepCopy() {
      return new addNode_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.data = null;
    }

    public long getId() {
      return this.id;
    }

    public addNode_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getData() {
      return this.data;
    }

    public addNode_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNode_args)
        return this.equals((addNode_args)that);
      return false;
    }

    public boolean equals(addNode_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(addNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNode_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNode_argsStandardSchemeFactory implements SchemeFactory {
      public addNode_argsStandardScheme getScheme() {
        return new addNode_argsStandardScheme();
      }
    }

    private static class addNode_argsStandardScheme extends StandardScheme<addNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNode_argsTupleSchemeFactory implements SchemeFactory {
      public addNode_argsTupleScheme getScheme() {
        return new addNode_argsTupleScheme();
      }
    }

    private static class addNode_argsTupleScheme extends TupleScheme<addNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class addNode_result implements org.apache.thrift.TBase<addNode_result, addNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNode_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNode_result.class, metaDataMap);
    }

    public addNode_result() {
    }

    public addNode_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNode_result(addNode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addNode_result deepCopy() {
      return new addNode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addNode_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNode_result)
        return this.equals((addNode_result)that);
      return false;
    }

    public boolean equals(addNode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNode_resultStandardSchemeFactory implements SchemeFactory {
      public addNode_resultStandardScheme getScheme() {
        return new addNode_resultStandardScheme();
      }
    }

    private static class addNode_resultStandardScheme extends StandardScheme<addNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNode_resultTupleSchemeFactory implements SchemeFactory {
      public addNode_resultTupleScheme getScheme() {
        return new addNode_resultTupleScheme();
      }
    }

    private static class addNode_resultTupleScheme extends TupleScheme<addNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteNode_args implements org.apache.thrift.TBase<deleteNode_args, deleteNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNode_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNode_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNode_args.class, metaDataMap);
    }

    public deleteNode_args() {
    }

    public deleteNode_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNode_args(deleteNode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteNode_args deepCopy() {
      return new deleteNode_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public deleteNode_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNode_args)
        return this.equals((deleteNode_args)that);
      return false;
    }

    public boolean equals(deleteNode_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNode_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNode_argsStandardSchemeFactory implements SchemeFactory {
      public deleteNode_argsStandardScheme getScheme() {
        return new deleteNode_argsStandardScheme();
      }
    }

    private static class deleteNode_argsStandardScheme extends StandardScheme<deleteNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNode_argsTupleSchemeFactory implements SchemeFactory {
      public deleteNode_argsTupleScheme getScheme() {
        return new deleteNode_argsTupleScheme();
      }
    }

    private static class deleteNode_argsTupleScheme extends TupleScheme<deleteNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteNode_result implements org.apache.thrift.TBase<deleteNode_result, deleteNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNode_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNode_result.class, metaDataMap);
    }

    public deleteNode_result() {
    }

    public deleteNode_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNode_result(deleteNode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteNode_result deepCopy() {
      return new deleteNode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteNode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNode_result)
        return this.equals((deleteNode_result)that);
      return false;
    }

    public boolean equals(deleteNode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNode_resultStandardSchemeFactory implements SchemeFactory {
      public deleteNode_resultStandardScheme getScheme() {
        return new deleteNode_resultStandardScheme();
      }
    }

    private static class deleteNode_resultStandardScheme extends StandardScheme<deleteNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNode_resultTupleSchemeFactory implements SchemeFactory {
      public deleteNode_resultTupleScheme getScheme() {
        return new deleteNode_resultTupleScheme();
      }
    }

    private static class deleteNode_resultTupleScheme extends TupleScheme<deleteNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteNodeLocal_args implements org.apache.thrift.TBase<deleteNodeLocal_args, deleteNodeLocal_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteNodeLocal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNodeLocal_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNodeLocal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNodeLocal_argsTupleSchemeFactory());
    }

    public long shard_id; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shard_id"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARD_ID_ISSET_ID = 0;
    private static final int __ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shard_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNodeLocal_args.class, metaDataMap);
    }

    public deleteNodeLocal_args() {
    }

    public deleteNodeLocal_args(
      long shard_id,
      long id)
    {
      this();
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNodeLocal_args(deleteNodeLocal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shard_id = other.shard_id;
      this.id = other.id;
    }

    public deleteNodeLocal_args deepCopy() {
      return new deleteNodeLocal_args(this);
    }

    @Override
    public void clear() {
      setShard_idIsSet(false);
      this.shard_id = 0;
      setIdIsSet(false);
      this.id = 0;
    }

    public long getShard_id() {
      return this.shard_id;
    }

    public deleteNodeLocal_args setShard_id(long shard_id) {
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      return this;
    }

    public void unsetShard_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    /** Returns true if field shard_id is set (has been assigned a value) and false otherwise */
    public boolean isSetShard_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    public void setShard_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARD_ID_ISSET_ID, value);
    }

    public long getId() {
      return this.id;
    }

    public deleteNodeLocal_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShard_id();
        } else {
          setShard_id((Long)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShard_id();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShard_id();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNodeLocal_args)
        return this.equals((deleteNodeLocal_args)that);
      return false;
    }

    public boolean equals(deleteNodeLocal_args that) {
      if (that == null)
        return false;

      boolean this_present_shard_id = true;
      boolean that_present_shard_id = true;
      if (this_present_shard_id || that_present_shard_id) {
        if (!(this_present_shard_id && that_present_shard_id))
          return false;
        if (this.shard_id != that.shard_id)
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shard_id = true;
      list.add(present_shard_id);
      if (present_shard_id)
        list.add(shard_id);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteNodeLocal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShard_id()).compareTo(other.isSetShard_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_id, other.shard_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNodeLocal_args(");
      boolean first = true;

      sb.append("shard_id:");
      sb.append(this.shard_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNodeLocal_argsStandardSchemeFactory implements SchemeFactory {
      public deleteNodeLocal_argsStandardScheme getScheme() {
        return new deleteNodeLocal_argsStandardScheme();
      }
    }

    private static class deleteNodeLocal_argsStandardScheme extends StandardScheme<deleteNodeLocal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNodeLocal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shard_id = iprot.readI64();
                struct.setShard_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNodeLocal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI64(struct.shard_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNodeLocal_argsTupleSchemeFactory implements SchemeFactory {
      public deleteNodeLocal_argsTupleScheme getScheme() {
        return new deleteNodeLocal_argsTupleScheme();
      }
    }

    private static class deleteNodeLocal_argsTupleScheme extends TupleScheme<deleteNodeLocal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNodeLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShard_id()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShard_id()) {
          oprot.writeI64(struct.shard_id);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNodeLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shard_id = iprot.readI64();
          struct.setShard_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteNodeLocal_result implements org.apache.thrift.TBase<deleteNodeLocal_result, deleteNodeLocal_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteNodeLocal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNodeLocal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNodeLocal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNodeLocal_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNodeLocal_result.class, metaDataMap);
    }

    public deleteNodeLocal_result() {
    }

    public deleteNodeLocal_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNodeLocal_result(deleteNodeLocal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteNodeLocal_result deepCopy() {
      return new deleteNodeLocal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteNodeLocal_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNodeLocal_result)
        return this.equals((deleteNodeLocal_result)that);
      return false;
    }

    public boolean equals(deleteNodeLocal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteNodeLocal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNodeLocal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNodeLocal_resultStandardSchemeFactory implements SchemeFactory {
      public deleteNodeLocal_resultStandardScheme getScheme() {
        return new deleteNodeLocal_resultStandardScheme();
      }
    }

    private static class deleteNodeLocal_resultStandardScheme extends StandardScheme<deleteNodeLocal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNodeLocal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNodeLocal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNodeLocal_resultTupleSchemeFactory implements SchemeFactory {
      public deleteNodeLocal_resultTupleScheme getScheme() {
        return new deleteNodeLocal_resultTupleScheme();
      }
    }

    private static class deleteNodeLocal_resultTupleScheme extends TupleScheme<deleteNodeLocal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNodeLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNodeLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateNode_args implements org.apache.thrift.TBase<updateNode_args, updateNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNode_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNode_argsTupleSchemeFactory());
    }

    public long id; // required
    public String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DATA((short)2, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNode_args.class, metaDataMap);
    }

    public updateNode_args() {
    }

    public updateNode_args(
      long id,
      String data)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNode_args(updateNode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public updateNode_args deepCopy() {
      return new updateNode_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.data = null;
    }

    public long getId() {
      return this.id;
    }

    public updateNode_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getData() {
      return this.data;
    }

    public updateNode_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNode_args)
        return this.equals((updateNode_args)that);
      return false;
    }

    public boolean equals(updateNode_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNode_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNode_argsStandardSchemeFactory implements SchemeFactory {
      public updateNode_argsStandardScheme getScheme() {
        return new updateNode_argsStandardScheme();
      }
    }

    private static class updateNode_argsStandardScheme extends StandardScheme<updateNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNode_argsTupleSchemeFactory implements SchemeFactory {
      public updateNode_argsTupleScheme getScheme() {
        return new updateNode_argsTupleScheme();
      }
    }

    private static class updateNode_argsTupleScheme extends TupleScheme<updateNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class updateNode_result implements org.apache.thrift.TBase<updateNode_result, updateNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNode_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNode_result.class, metaDataMap);
    }

    public updateNode_result() {
    }

    public updateNode_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNode_result(updateNode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateNode_result deepCopy() {
      return new updateNode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateNode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNode_result)
        return this.equals((updateNode_result)that);
      return false;
    }

    public boolean equals(updateNode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNode_resultStandardSchemeFactory implements SchemeFactory {
      public updateNode_resultStandardScheme getScheme() {
        return new updateNode_resultStandardScheme();
      }
    }

    private static class updateNode_resultStandardScheme extends StandardScheme<updateNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNode_resultTupleSchemeFactory implements SchemeFactory {
      public updateNode_resultTupleScheme getScheme() {
        return new updateNode_resultTupleScheme();
      }
    }

    private static class updateNode_resultTupleScheme extends TupleScheme<updateNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLink_args implements org.apache.thrift.TBase<getLink_args, getLink_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLink_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLink_args");

    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("id2", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLink_argsTupleSchemeFactory());
    }

    public long id1; // required
    public long link_type; // required
    public long id2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID1((short)1, "id1"),
      LINK_TYPE((short)2, "link_type"),
      ID2((short)3, "id2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID1
            return ID1;
          case 2: // LINK_TYPE
            return LINK_TYPE;
          case 3: // ID2
            return ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID1_ISSET_ID = 0;
    private static final int __LINK_TYPE_ISSET_ID = 1;
    private static final int __ID2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID2, new org.apache.thrift.meta_data.FieldMetaData("id2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLink_args.class, metaDataMap);
    }

    public getLink_args() {
    }

    public getLink_args(
      long id1,
      long link_type,
      long id2)
    {
      this();
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
      this.id2 = id2;
      setId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLink_args(getLink_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id1 = other.id1;
      this.link_type = other.link_type;
      this.id2 = other.id2;
    }

    public getLink_args deepCopy() {
      return new getLink_args(this);
    }

    @Override
    public void clear() {
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
      setId2IsSet(false);
      this.id2 = 0;
    }

    public long getId1() {
      return this.id1;
    }

    public getLink_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public getLink_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public long getId2() {
      return this.id2;
    }

    public getLink_args setId2(long id2) {
      this.id2 = id2;
      setId2IsSet(true);
      return this;
    }

    public void unsetId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    /** Returns true if field id2 is set (has been assigned a value) and false otherwise */
    public boolean isSetId2() {
      return EncodingUtils.testBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    public void setId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      case ID2:
        if (value == null) {
          unsetId2();
        } else {
          setId2((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      case ID2:
        return getId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      case ID2:
        return isSetId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLink_args)
        return this.equals((getLink_args)that);
      return false;
    }

    public boolean equals(getLink_args that) {
      if (that == null)
        return false;

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      boolean this_present_id2 = true;
      boolean that_present_id2 = true;
      if (this_present_id2 || that_present_id2) {
        if (!(this_present_id2 && that_present_id2))
          return false;
        if (this.id2 != that.id2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      boolean present_id2 = true;
      list.add(present_id2);
      if (present_id2)
        list.add(id2);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId2()).compareTo(other.isSetId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id2, other.id2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLink_args(");
      boolean first = true;

      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id2:");
      sb.append(this.id2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLink_argsStandardSchemeFactory implements SchemeFactory {
      public getLink_argsStandardScheme getScheme() {
        return new getLink_argsStandardScheme();
      }
    }

    private static class getLink_argsStandardScheme extends StandardScheme<getLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id2 = iprot.readI64();
                struct.setId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID2_FIELD_DESC);
        oprot.writeI64(struct.id2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLink_argsTupleSchemeFactory implements SchemeFactory {
      public getLink_argsTupleScheme getScheme() {
        return new getLink_argsTupleScheme();
      }
    }

    private static class getLink_argsTupleScheme extends TupleScheme<getLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId1()) {
          optionals.set(0);
        }
        if (struct.isSetLink_type()) {
          optionals.set(1);
        }
        if (struct.isSetId2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
        if (struct.isSetId2()) {
          oprot.writeI64(struct.id2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.id2 = iprot.readI64();
          struct.setId2IsSet(true);
        }
      }
    }

  }

  public static class getLink_result implements org.apache.thrift.TBase<getLink_result, getLink_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLink_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLink_resultTupleSchemeFactory());
    }

    public ThriftAssoc success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLink_result.class, metaDataMap);
    }

    public getLink_result() {
    }

    public getLink_result(
      ThriftAssoc success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLink_result(getLink_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftAssoc(other.success);
      }
    }

    public getLink_result deepCopy() {
      return new getLink_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ThriftAssoc getSuccess() {
      return this.success;
    }

    public getLink_result setSuccess(ThriftAssoc success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftAssoc)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLink_result)
        return this.equals((getLink_result)that);
      return false;
    }

    public boolean equals(getLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLink_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLink_resultStandardSchemeFactory implements SchemeFactory {
      public getLink_resultStandardScheme getScheme() {
        return new getLink_resultStandardScheme();
      }
    }

    private static class getLink_resultStandardScheme extends StandardScheme<getLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftAssoc();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLink_resultTupleSchemeFactory implements SchemeFactory {
      public getLink_resultTupleScheme getScheme() {
        return new getLink_resultTupleScheme();
      }
    }

    private static class getLink_resultTupleScheme extends TupleScheme<getLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ThriftAssoc();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLinkLocal_args implements org.apache.thrift.TBase<getLinkLocal_args, getLinkLocal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkLocal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkLocal_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("id2", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkLocal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkLocal_argsTupleSchemeFactory());
    }

    public long shard_id; // required
    public long id1; // required
    public long link_type; // required
    public long id2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shard_id"),
      ID1((short)2, "id1"),
      LINK_TYPE((short)3, "link_type"),
      ID2((short)4, "id2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // ID1
            return ID1;
          case 3: // LINK_TYPE
            return LINK_TYPE;
          case 4: // ID2
            return ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARD_ID_ISSET_ID = 0;
    private static final int __ID1_ISSET_ID = 1;
    private static final int __LINK_TYPE_ISSET_ID = 2;
    private static final int __ID2_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shard_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID2, new org.apache.thrift.meta_data.FieldMetaData("id2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkLocal_args.class, metaDataMap);
    }

    public getLinkLocal_args() {
    }

    public getLinkLocal_args(
      long shard_id,
      long id1,
      long link_type,
      long id2)
    {
      this();
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
      this.id2 = id2;
      setId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkLocal_args(getLinkLocal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shard_id = other.shard_id;
      this.id1 = other.id1;
      this.link_type = other.link_type;
      this.id2 = other.id2;
    }

    public getLinkLocal_args deepCopy() {
      return new getLinkLocal_args(this);
    }

    @Override
    public void clear() {
      setShard_idIsSet(false);
      this.shard_id = 0;
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
      setId2IsSet(false);
      this.id2 = 0;
    }

    public long getShard_id() {
      return this.shard_id;
    }

    public getLinkLocal_args setShard_id(long shard_id) {
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      return this;
    }

    public void unsetShard_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    /** Returns true if field shard_id is set (has been assigned a value) and false otherwise */
    public boolean isSetShard_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    public void setShard_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARD_ID_ISSET_ID, value);
    }

    public long getId1() {
      return this.id1;
    }

    public getLinkLocal_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public getLinkLocal_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public long getId2() {
      return this.id2;
    }

    public getLinkLocal_args setId2(long id2) {
      this.id2 = id2;
      setId2IsSet(true);
      return this;
    }

    public void unsetId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    /** Returns true if field id2 is set (has been assigned a value) and false otherwise */
    public boolean isSetId2() {
      return EncodingUtils.testBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    public void setId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShard_id();
        } else {
          setShard_id((Long)value);
        }
        break;

      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      case ID2:
        if (value == null) {
          unsetId2();
        } else {
          setId2((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShard_id();

      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      case ID2:
        return getId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShard_id();
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      case ID2:
        return isSetId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkLocal_args)
        return this.equals((getLinkLocal_args)that);
      return false;
    }

    public boolean equals(getLinkLocal_args that) {
      if (that == null)
        return false;

      boolean this_present_shard_id = true;
      boolean that_present_shard_id = true;
      if (this_present_shard_id || that_present_shard_id) {
        if (!(this_present_shard_id && that_present_shard_id))
          return false;
        if (this.shard_id != that.shard_id)
          return false;
      }

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      boolean this_present_id2 = true;
      boolean that_present_id2 = true;
      if (this_present_id2 || that_present_id2) {
        if (!(this_present_id2 && that_present_id2))
          return false;
        if (this.id2 != that.id2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shard_id = true;
      list.add(present_shard_id);
      if (present_shard_id)
        list.add(shard_id);

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      boolean present_id2 = true;
      list.add(present_id2);
      if (present_id2)
        list.add(id2);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLinkLocal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShard_id()).compareTo(other.isSetShard_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_id, other.shard_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId2()).compareTo(other.isSetId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id2, other.id2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkLocal_args(");
      boolean first = true;

      sb.append("shard_id:");
      sb.append(this.shard_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id2:");
      sb.append(this.id2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkLocal_argsStandardSchemeFactory implements SchemeFactory {
      public getLinkLocal_argsStandardScheme getScheme() {
        return new getLinkLocal_argsStandardScheme();
      }
    }

    private static class getLinkLocal_argsStandardScheme extends StandardScheme<getLinkLocal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkLocal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shard_id = iprot.readI64();
                struct.setShard_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id2 = iprot.readI64();
                struct.setId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkLocal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI64(struct.shard_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID2_FIELD_DESC);
        oprot.writeI64(struct.id2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkLocal_argsTupleSchemeFactory implements SchemeFactory {
      public getLinkLocal_argsTupleScheme getScheme() {
        return new getLinkLocal_argsTupleScheme();
      }
    }

    private static class getLinkLocal_argsTupleScheme extends TupleScheme<getLinkLocal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShard_id()) {
          optionals.set(0);
        }
        if (struct.isSetId1()) {
          optionals.set(1);
        }
        if (struct.isSetLink_type()) {
          optionals.set(2);
        }
        if (struct.isSetId2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetShard_id()) {
          oprot.writeI64(struct.shard_id);
        }
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
        if (struct.isSetId2()) {
          oprot.writeI64(struct.id2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.shard_id = iprot.readI64();
          struct.setShard_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.id2 = iprot.readI64();
          struct.setId2IsSet(true);
        }
      }
    }

  }

  public static class getLinkLocal_result implements org.apache.thrift.TBase<getLinkLocal_result, getLinkLocal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkLocal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkLocal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkLocal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkLocal_resultTupleSchemeFactory());
    }

    public ThriftAssoc success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkLocal_result.class, metaDataMap);
    }

    public getLinkLocal_result() {
    }

    public getLinkLocal_result(
      ThriftAssoc success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkLocal_result(getLinkLocal_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftAssoc(other.success);
      }
    }

    public getLinkLocal_result deepCopy() {
      return new getLinkLocal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ThriftAssoc getSuccess() {
      return this.success;
    }

    public getLinkLocal_result setSuccess(ThriftAssoc success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftAssoc)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkLocal_result)
        return this.equals((getLinkLocal_result)that);
      return false;
    }

    public boolean equals(getLinkLocal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLinkLocal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkLocal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkLocal_resultStandardSchemeFactory implements SchemeFactory {
      public getLinkLocal_resultStandardScheme getScheme() {
        return new getLinkLocal_resultStandardScheme();
      }
    }

    private static class getLinkLocal_resultStandardScheme extends StandardScheme<getLinkLocal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkLocal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftAssoc();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkLocal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkLocal_resultTupleSchemeFactory implements SchemeFactory {
      public getLinkLocal_resultTupleScheme getScheme() {
        return new getLinkLocal_resultTupleScheme();
      }
    }

    private static class getLinkLocal_resultTupleScheme extends TupleScheme<getLinkLocal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ThriftAssoc();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addLink_args implements org.apache.thrift.TBase<addLink_args, addLink_args._Fields>, java.io.Serializable, Cloneable, Comparable<addLink_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLink_args");

    private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLink_argsTupleSchemeFactory());
    }

    public ThriftAssoc link; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK((short)1, "link");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK
            return LINK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLink_args.class, metaDataMap);
    }

    public addLink_args() {
    }

    public addLink_args(
      ThriftAssoc link)
    {
      this();
      this.link = link;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLink_args(addLink_args other) {
      if (other.isSetLink()) {
        this.link = new ThriftAssoc(other.link);
      }
    }

    public addLink_args deepCopy() {
      return new addLink_args(this);
    }

    @Override
    public void clear() {
      this.link = null;
    }

    public ThriftAssoc getLink() {
      return this.link;
    }

    public addLink_args setLink(ThriftAssoc link) {
      this.link = link;
      return this;
    }

    public void unsetLink() {
      this.link = null;
    }

    /** Returns true if field link is set (has been assigned a value) and false otherwise */
    public boolean isSetLink() {
      return this.link != null;
    }

    public void setLinkIsSet(boolean value) {
      if (!value) {
        this.link = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK:
        if (value == null) {
          unsetLink();
        } else {
          setLink((ThriftAssoc)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK:
        return getLink();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK:
        return isSetLink();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLink_args)
        return this.equals((addLink_args)that);
      return false;
    }

    public boolean equals(addLink_args that) {
      if (that == null)
        return false;

      boolean this_present_link = true && this.isSetLink();
      boolean that_present_link = true && that.isSetLink();
      if (this_present_link || that_present_link) {
        if (!(this_present_link && that_present_link))
          return false;
        if (!this.link.equals(that.link))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_link = true && (isSetLink());
      list.add(present_link);
      if (present_link)
        list.add(link);

      return list.hashCode();
    }

    @Override
    public int compareTo(addLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLink()).compareTo(other.isSetLink());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, other.link);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLink_args(");
      boolean first = true;

      sb.append("link:");
      if (this.link == null) {
        sb.append("null");
      } else {
        sb.append(this.link);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (link != null) {
        link.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLink_argsStandardSchemeFactory implements SchemeFactory {
      public addLink_argsStandardScheme getScheme() {
        return new addLink_argsStandardScheme();
      }
    }

    private static class addLink_argsStandardScheme extends StandardScheme<addLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.link = new ThriftAssoc();
                struct.link.read(iprot);
                struct.setLinkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.link != null) {
          oprot.writeFieldBegin(LINK_FIELD_DESC);
          struct.link.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLink_argsTupleSchemeFactory implements SchemeFactory {
      public addLink_argsTupleScheme getScheme() {
        return new addLink_argsTupleScheme();
      }
    }

    private static class addLink_argsTupleScheme extends TupleScheme<addLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLink()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLink()) {
          struct.link.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.link = new ThriftAssoc();
          struct.link.read(iprot);
          struct.setLinkIsSet(true);
        }
      }
    }

  }

  public static class addLink_result implements org.apache.thrift.TBase<addLink_result, addLink_result._Fields>, java.io.Serializable, Cloneable, Comparable<addLink_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLink_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLink_result.class, metaDataMap);
    }

    public addLink_result() {
    }

    public addLink_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLink_result(addLink_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addLink_result deepCopy() {
      return new addLink_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addLink_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLink_result)
        return this.equals((addLink_result)that);
      return false;
    }

    public boolean equals(addLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLink_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLink_resultStandardSchemeFactory implements SchemeFactory {
      public addLink_resultStandardScheme getScheme() {
        return new addLink_resultStandardScheme();
      }
    }

    private static class addLink_resultStandardScheme extends StandardScheme<addLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLink_resultTupleSchemeFactory implements SchemeFactory {
      public addLink_resultTupleScheme getScheme() {
        return new addLink_resultTupleScheme();
      }
    }

    private static class addLink_resultTupleScheme extends TupleScheme<addLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteLink_args implements org.apache.thrift.TBase<deleteLink_args, deleteLink_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLink_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLink_args");

    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("id2", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLink_argsTupleSchemeFactory());
    }

    public long id1; // required
    public long link_type; // required
    public long id2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID1((short)1, "id1"),
      LINK_TYPE((short)2, "link_type"),
      ID2((short)3, "id2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID1
            return ID1;
          case 2: // LINK_TYPE
            return LINK_TYPE;
          case 3: // ID2
            return ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID1_ISSET_ID = 0;
    private static final int __LINK_TYPE_ISSET_ID = 1;
    private static final int __ID2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID2, new org.apache.thrift.meta_data.FieldMetaData("id2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLink_args.class, metaDataMap);
    }

    public deleteLink_args() {
    }

    public deleteLink_args(
      long id1,
      long link_type,
      long id2)
    {
      this();
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
      this.id2 = id2;
      setId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLink_args(deleteLink_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id1 = other.id1;
      this.link_type = other.link_type;
      this.id2 = other.id2;
    }

    public deleteLink_args deepCopy() {
      return new deleteLink_args(this);
    }

    @Override
    public void clear() {
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
      setId2IsSet(false);
      this.id2 = 0;
    }

    public long getId1() {
      return this.id1;
    }

    public deleteLink_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public deleteLink_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public long getId2() {
      return this.id2;
    }

    public deleteLink_args setId2(long id2) {
      this.id2 = id2;
      setId2IsSet(true);
      return this;
    }

    public void unsetId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    /** Returns true if field id2 is set (has been assigned a value) and false otherwise */
    public boolean isSetId2() {
      return EncodingUtils.testBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    public void setId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      case ID2:
        if (value == null) {
          unsetId2();
        } else {
          setId2((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      case ID2:
        return getId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      case ID2:
        return isSetId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLink_args)
        return this.equals((deleteLink_args)that);
      return false;
    }

    public boolean equals(deleteLink_args that) {
      if (that == null)
        return false;

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      boolean this_present_id2 = true;
      boolean that_present_id2 = true;
      if (this_present_id2 || that_present_id2) {
        if (!(this_present_id2 && that_present_id2))
          return false;
        if (this.id2 != that.id2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      boolean present_id2 = true;
      list.add(present_id2);
      if (present_id2)
        list.add(id2);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId2()).compareTo(other.isSetId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id2, other.id2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLink_args(");
      boolean first = true;

      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id2:");
      sb.append(this.id2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLink_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLink_argsStandardScheme getScheme() {
        return new deleteLink_argsStandardScheme();
      }
    }

    private static class deleteLink_argsStandardScheme extends StandardScheme<deleteLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id2 = iprot.readI64();
                struct.setId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID2_FIELD_DESC);
        oprot.writeI64(struct.id2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLink_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLink_argsTupleScheme getScheme() {
        return new deleteLink_argsTupleScheme();
      }
    }

    private static class deleteLink_argsTupleScheme extends TupleScheme<deleteLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId1()) {
          optionals.set(0);
        }
        if (struct.isSetLink_type()) {
          optionals.set(1);
        }
        if (struct.isSetId2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
        if (struct.isSetId2()) {
          oprot.writeI64(struct.id2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.id2 = iprot.readI64();
          struct.setId2IsSet(true);
        }
      }
    }

  }

  public static class deleteLink_result implements org.apache.thrift.TBase<deleteLink_result, deleteLink_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLink_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLink_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLink_result.class, metaDataMap);
    }

    public deleteLink_result() {
    }

    public deleteLink_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLink_result(deleteLink_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteLink_result deepCopy() {
      return new deleteLink_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteLink_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLink_result)
        return this.equals((deleteLink_result)that);
      return false;
    }

    public boolean equals(deleteLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLink_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLink_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLink_resultStandardScheme getScheme() {
        return new deleteLink_resultStandardScheme();
      }
    }

    private static class deleteLink_resultStandardScheme extends StandardScheme<deleteLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLink_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLink_resultTupleScheme getScheme() {
        return new deleteLink_resultTupleScheme();
      }
    }

    private static class deleteLink_resultTupleScheme extends TupleScheme<deleteLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteLinkLocal_args implements org.apache.thrift.TBase<deleteLinkLocal_args, deleteLinkLocal_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLinkLocal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLinkLocal_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("id2", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLinkLocal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLinkLocal_argsTupleSchemeFactory());
    }

    public long shard_id; // required
    public long id1; // required
    public long link_type; // required
    public long id2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shard_id"),
      ID1((short)2, "id1"),
      LINK_TYPE((short)3, "link_type"),
      ID2((short)4, "id2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // ID1
            return ID1;
          case 3: // LINK_TYPE
            return LINK_TYPE;
          case 4: // ID2
            return ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARD_ID_ISSET_ID = 0;
    private static final int __ID1_ISSET_ID = 1;
    private static final int __LINK_TYPE_ISSET_ID = 2;
    private static final int __ID2_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shard_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID2, new org.apache.thrift.meta_data.FieldMetaData("id2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLinkLocal_args.class, metaDataMap);
    }

    public deleteLinkLocal_args() {
    }

    public deleteLinkLocal_args(
      long shard_id,
      long id1,
      long link_type,
      long id2)
    {
      this();
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
      this.id2 = id2;
      setId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLinkLocal_args(deleteLinkLocal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shard_id = other.shard_id;
      this.id1 = other.id1;
      this.link_type = other.link_type;
      this.id2 = other.id2;
    }

    public deleteLinkLocal_args deepCopy() {
      return new deleteLinkLocal_args(this);
    }

    @Override
    public void clear() {
      setShard_idIsSet(false);
      this.shard_id = 0;
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
      setId2IsSet(false);
      this.id2 = 0;
    }

    public long getShard_id() {
      return this.shard_id;
    }

    public deleteLinkLocal_args setShard_id(long shard_id) {
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      return this;
    }

    public void unsetShard_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    /** Returns true if field shard_id is set (has been assigned a value) and false otherwise */
    public boolean isSetShard_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    public void setShard_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARD_ID_ISSET_ID, value);
    }

    public long getId1() {
      return this.id1;
    }

    public deleteLinkLocal_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public deleteLinkLocal_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public long getId2() {
      return this.id2;
    }

    public deleteLinkLocal_args setId2(long id2) {
      this.id2 = id2;
      setId2IsSet(true);
      return this;
    }

    public void unsetId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    /** Returns true if field id2 is set (has been assigned a value) and false otherwise */
    public boolean isSetId2() {
      return EncodingUtils.testBit(__isset_bitfield, __ID2_ISSET_ID);
    }

    public void setId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShard_id();
        } else {
          setShard_id((Long)value);
        }
        break;

      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      case ID2:
        if (value == null) {
          unsetId2();
        } else {
          setId2((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShard_id();

      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      case ID2:
        return getId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShard_id();
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      case ID2:
        return isSetId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLinkLocal_args)
        return this.equals((deleteLinkLocal_args)that);
      return false;
    }

    public boolean equals(deleteLinkLocal_args that) {
      if (that == null)
        return false;

      boolean this_present_shard_id = true;
      boolean that_present_shard_id = true;
      if (this_present_shard_id || that_present_shard_id) {
        if (!(this_present_shard_id && that_present_shard_id))
          return false;
        if (this.shard_id != that.shard_id)
          return false;
      }

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      boolean this_present_id2 = true;
      boolean that_present_id2 = true;
      if (this_present_id2 || that_present_id2) {
        if (!(this_present_id2 && that_present_id2))
          return false;
        if (this.id2 != that.id2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shard_id = true;
      list.add(present_shard_id);
      if (present_shard_id)
        list.add(shard_id);

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      boolean present_id2 = true;
      list.add(present_id2);
      if (present_id2)
        list.add(id2);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLinkLocal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShard_id()).compareTo(other.isSetShard_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_id, other.shard_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId2()).compareTo(other.isSetId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id2, other.id2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLinkLocal_args(");
      boolean first = true;

      sb.append("shard_id:");
      sb.append(this.shard_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id2:");
      sb.append(this.id2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLinkLocal_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLinkLocal_argsStandardScheme getScheme() {
        return new deleteLinkLocal_argsStandardScheme();
      }
    }

    private static class deleteLinkLocal_argsStandardScheme extends StandardScheme<deleteLinkLocal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLinkLocal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shard_id = iprot.readI64();
                struct.setShard_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id2 = iprot.readI64();
                struct.setId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLinkLocal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI64(struct.shard_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID2_FIELD_DESC);
        oprot.writeI64(struct.id2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLinkLocal_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLinkLocal_argsTupleScheme getScheme() {
        return new deleteLinkLocal_argsTupleScheme();
      }
    }

    private static class deleteLinkLocal_argsTupleScheme extends TupleScheme<deleteLinkLocal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLinkLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShard_id()) {
          optionals.set(0);
        }
        if (struct.isSetId1()) {
          optionals.set(1);
        }
        if (struct.isSetLink_type()) {
          optionals.set(2);
        }
        if (struct.isSetId2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetShard_id()) {
          oprot.writeI64(struct.shard_id);
        }
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
        if (struct.isSetId2()) {
          oprot.writeI64(struct.id2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLinkLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.shard_id = iprot.readI64();
          struct.setShard_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.id2 = iprot.readI64();
          struct.setId2IsSet(true);
        }
      }
    }

  }

  public static class deleteLinkLocal_result implements org.apache.thrift.TBase<deleteLinkLocal_result, deleteLinkLocal_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLinkLocal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLinkLocal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLinkLocal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLinkLocal_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLinkLocal_result.class, metaDataMap);
    }

    public deleteLinkLocal_result() {
    }

    public deleteLinkLocal_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLinkLocal_result(deleteLinkLocal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteLinkLocal_result deepCopy() {
      return new deleteLinkLocal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteLinkLocal_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLinkLocal_result)
        return this.equals((deleteLinkLocal_result)that);
      return false;
    }

    public boolean equals(deleteLinkLocal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLinkLocal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLinkLocal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLinkLocal_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLinkLocal_resultStandardScheme getScheme() {
        return new deleteLinkLocal_resultStandardScheme();
      }
    }

    private static class deleteLinkLocal_resultStandardScheme extends StandardScheme<deleteLinkLocal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLinkLocal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLinkLocal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLinkLocal_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLinkLocal_resultTupleScheme getScheme() {
        return new deleteLinkLocal_resultTupleScheme();
      }
    }

    private static class deleteLinkLocal_resultTupleScheme extends TupleScheme<deleteLinkLocal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLinkLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLinkLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateLink_args implements org.apache.thrift.TBase<updateLink_args, updateLink_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLink_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLink_args");

    private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLink_argsTupleSchemeFactory());
    }

    public ThriftAssoc link; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK((short)1, "link");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK
            return LINK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLink_args.class, metaDataMap);
    }

    public updateLink_args() {
    }

    public updateLink_args(
      ThriftAssoc link)
    {
      this();
      this.link = link;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLink_args(updateLink_args other) {
      if (other.isSetLink()) {
        this.link = new ThriftAssoc(other.link);
      }
    }

    public updateLink_args deepCopy() {
      return new updateLink_args(this);
    }

    @Override
    public void clear() {
      this.link = null;
    }

    public ThriftAssoc getLink() {
      return this.link;
    }

    public updateLink_args setLink(ThriftAssoc link) {
      this.link = link;
      return this;
    }

    public void unsetLink() {
      this.link = null;
    }

    /** Returns true if field link is set (has been assigned a value) and false otherwise */
    public boolean isSetLink() {
      return this.link != null;
    }

    public void setLinkIsSet(boolean value) {
      if (!value) {
        this.link = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK:
        if (value == null) {
          unsetLink();
        } else {
          setLink((ThriftAssoc)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK:
        return getLink();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK:
        return isSetLink();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLink_args)
        return this.equals((updateLink_args)that);
      return false;
    }

    public boolean equals(updateLink_args that) {
      if (that == null)
        return false;

      boolean this_present_link = true && this.isSetLink();
      boolean that_present_link = true && that.isSetLink();
      if (this_present_link || that_present_link) {
        if (!(this_present_link && that_present_link))
          return false;
        if (!this.link.equals(that.link))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_link = true && (isSetLink());
      list.add(present_link);
      if (present_link)
        list.add(link);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLink()).compareTo(other.isSetLink());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, other.link);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLink_args(");
      boolean first = true;

      sb.append("link:");
      if (this.link == null) {
        sb.append("null");
      } else {
        sb.append(this.link);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (link != null) {
        link.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLink_argsStandardSchemeFactory implements SchemeFactory {
      public updateLink_argsStandardScheme getScheme() {
        return new updateLink_argsStandardScheme();
      }
    }

    private static class updateLink_argsStandardScheme extends StandardScheme<updateLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.link = new ThriftAssoc();
                struct.link.read(iprot);
                struct.setLinkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.link != null) {
          oprot.writeFieldBegin(LINK_FIELD_DESC);
          struct.link.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLink_argsTupleSchemeFactory implements SchemeFactory {
      public updateLink_argsTupleScheme getScheme() {
        return new updateLink_argsTupleScheme();
      }
    }

    private static class updateLink_argsTupleScheme extends TupleScheme<updateLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLink()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLink()) {
          struct.link.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.link = new ThriftAssoc();
          struct.link.read(iprot);
          struct.setLinkIsSet(true);
        }
      }
    }

  }

  public static class updateLink_result implements org.apache.thrift.TBase<updateLink_result, updateLink_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLink_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLink_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLink_result.class, metaDataMap);
    }

    public updateLink_result() {
    }

    public updateLink_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLink_result(updateLink_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateLink_result deepCopy() {
      return new updateLink_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateLink_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLink_result)
        return this.equals((updateLink_result)that);
      return false;
    }

    public boolean equals(updateLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLink_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLink_resultStandardSchemeFactory implements SchemeFactory {
      public updateLink_resultStandardScheme getScheme() {
        return new updateLink_resultStandardScheme();
      }
    }

    private static class updateLink_resultStandardScheme extends StandardScheme<updateLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLink_resultTupleSchemeFactory implements SchemeFactory {
      public updateLink_resultTupleScheme getScheme() {
        return new updateLink_resultTupleScheme();
      }
    }

    private static class updateLink_resultTupleScheme extends TupleScheme<updateLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLinkList_args implements org.apache.thrift.TBase<getLinkList_args, getLinkList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkList_args");

    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkList_argsTupleSchemeFactory());
    }

    public long id1; // required
    public long link_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID1((short)1, "id1"),
      LINK_TYPE((short)2, "link_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID1
            return ID1;
          case 2: // LINK_TYPE
            return LINK_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID1_ISSET_ID = 0;
    private static final int __LINK_TYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkList_args.class, metaDataMap);
    }

    public getLinkList_args() {
    }

    public getLinkList_args(
      long id1,
      long link_type)
    {
      this();
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkList_args(getLinkList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id1 = other.id1;
      this.link_type = other.link_type;
    }

    public getLinkList_args deepCopy() {
      return new getLinkList_args(this);
    }

    @Override
    public void clear() {
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
    }

    public long getId1() {
      return this.id1;
    }

    public getLinkList_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public getLinkList_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkList_args)
        return this.equals((getLinkList_args)that);
      return false;
    }

    public boolean equals(getLinkList_args that) {
      if (that == null)
        return false;

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLinkList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkList_args(");
      boolean first = true;

      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkList_argsStandardSchemeFactory implements SchemeFactory {
      public getLinkList_argsStandardScheme getScheme() {
        return new getLinkList_argsStandardScheme();
      }
    }

    private static class getLinkList_argsStandardScheme extends StandardScheme<getLinkList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkList_argsTupleSchemeFactory implements SchemeFactory {
      public getLinkList_argsTupleScheme getScheme() {
        return new getLinkList_argsTupleScheme();
      }
    }

    private static class getLinkList_argsTupleScheme extends TupleScheme<getLinkList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId1()) {
          optionals.set(0);
        }
        if (struct.isSetLink_type()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
      }
    }

  }

  public static class getLinkList_result implements org.apache.thrift.TBase<getLinkList_result, getLinkList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkList_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkList_result.class, metaDataMap);
    }

    public getLinkList_result() {
    }

    public getLinkList_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkList_result(getLinkList_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLinkList_result deepCopy() {
      return new getLinkList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public getLinkList_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkList_result)
        return this.equals((getLinkList_result)that);
      return false;
    }

    public boolean equals(getLinkList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLinkList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkList_resultStandardSchemeFactory implements SchemeFactory {
      public getLinkList_resultStandardScheme getScheme() {
        return new getLinkList_resultStandardScheme();
      }
    }

    private static class getLinkList_resultStandardScheme extends StandardScheme<getLinkList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list208.size);
                  ThriftAssoc _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new ThriftAssoc();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkList_resultTupleSchemeFactory implements SchemeFactory {
      public getLinkList_resultTupleScheme getScheme() {
        return new getLinkList_resultTupleScheme();
      }
    }

    private static class getLinkList_resultTupleScheme extends TupleScheme<getLinkList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list213.size);
            ThriftAssoc _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new ThriftAssoc();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLinkListLocal_args implements org.apache.thrift.TBase<getLinkListLocal_args, getLinkListLocal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkListLocal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkListLocal_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkListLocal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkListLocal_argsTupleSchemeFactory());
    }

    public long shard_id; // required
    public long id1; // required
    public long link_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shard_id"),
      ID1((short)2, "id1"),
      LINK_TYPE((short)3, "link_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // ID1
            return ID1;
          case 3: // LINK_TYPE
            return LINK_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARD_ID_ISSET_ID = 0;
    private static final int __ID1_ISSET_ID = 1;
    private static final int __LINK_TYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shard_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkListLocal_args.class, metaDataMap);
    }

    public getLinkListLocal_args() {
    }

    public getLinkListLocal_args(
      long shard_id,
      long id1,
      long link_type)
    {
      this();
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkListLocal_args(getLinkListLocal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shard_id = other.shard_id;
      this.id1 = other.id1;
      this.link_type = other.link_type;
    }

    public getLinkListLocal_args deepCopy() {
      return new getLinkListLocal_args(this);
    }

    @Override
    public void clear() {
      setShard_idIsSet(false);
      this.shard_id = 0;
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
    }

    public long getShard_id() {
      return this.shard_id;
    }

    public getLinkListLocal_args setShard_id(long shard_id) {
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      return this;
    }

    public void unsetShard_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    /** Returns true if field shard_id is set (has been assigned a value) and false otherwise */
    public boolean isSetShard_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    public void setShard_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARD_ID_ISSET_ID, value);
    }

    public long getId1() {
      return this.id1;
    }

    public getLinkListLocal_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public getLinkListLocal_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShard_id();
        } else {
          setShard_id((Long)value);
        }
        break;

      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShard_id();

      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShard_id();
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkListLocal_args)
        return this.equals((getLinkListLocal_args)that);
      return false;
    }

    public boolean equals(getLinkListLocal_args that) {
      if (that == null)
        return false;

      boolean this_present_shard_id = true;
      boolean that_present_shard_id = true;
      if (this_present_shard_id || that_present_shard_id) {
        if (!(this_present_shard_id && that_present_shard_id))
          return false;
        if (this.shard_id != that.shard_id)
          return false;
      }

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shard_id = true;
      list.add(present_shard_id);
      if (present_shard_id)
        list.add(shard_id);

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLinkListLocal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShard_id()).compareTo(other.isSetShard_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_id, other.shard_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkListLocal_args(");
      boolean first = true;

      sb.append("shard_id:");
      sb.append(this.shard_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkListLocal_argsStandardSchemeFactory implements SchemeFactory {
      public getLinkListLocal_argsStandardScheme getScheme() {
        return new getLinkListLocal_argsStandardScheme();
      }
    }

    private static class getLinkListLocal_argsStandardScheme extends StandardScheme<getLinkListLocal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkListLocal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shard_id = iprot.readI64();
                struct.setShard_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkListLocal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI64(struct.shard_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkListLocal_argsTupleSchemeFactory implements SchemeFactory {
      public getLinkListLocal_argsTupleScheme getScheme() {
        return new getLinkListLocal_argsTupleScheme();
      }
    }

    private static class getLinkListLocal_argsTupleScheme extends TupleScheme<getLinkListLocal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkListLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShard_id()) {
          optionals.set(0);
        }
        if (struct.isSetId1()) {
          optionals.set(1);
        }
        if (struct.isSetLink_type()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetShard_id()) {
          oprot.writeI64(struct.shard_id);
        }
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkListLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.shard_id = iprot.readI64();
          struct.setShard_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
      }
    }

  }

  public static class getLinkListLocal_result implements org.apache.thrift.TBase<getLinkListLocal_result, getLinkListLocal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkListLocal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkListLocal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkListLocal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkListLocal_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkListLocal_result.class, metaDataMap);
    }

    public getLinkListLocal_result() {
    }

    public getLinkListLocal_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkListLocal_result(getLinkListLocal_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLinkListLocal_result deepCopy() {
      return new getLinkListLocal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public getLinkListLocal_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkListLocal_result)
        return this.equals((getLinkListLocal_result)that);
      return false;
    }

    public boolean equals(getLinkListLocal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLinkListLocal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkListLocal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkListLocal_resultStandardSchemeFactory implements SchemeFactory {
      public getLinkListLocal_resultStandardScheme getScheme() {
        return new getLinkListLocal_resultStandardScheme();
      }
    }

    private static class getLinkListLocal_resultStandardScheme extends StandardScheme<getLinkListLocal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkListLocal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list216.size);
                  ThriftAssoc _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new ThriftAssoc();
                    _elem217.read(iprot);
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkListLocal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkListLocal_resultTupleSchemeFactory implements SchemeFactory {
      public getLinkListLocal_resultTupleScheme getScheme() {
        return new getLinkListLocal_resultTupleScheme();
      }
    }

    private static class getLinkListLocal_resultTupleScheme extends TupleScheme<getLinkListLocal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkListLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkListLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list221.size);
            ThriftAssoc _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new ThriftAssoc();
              _elem222.read(iprot);
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFilteredLinkList_args implements org.apache.thrift.TBase<getFilteredLinkList_args, getFilteredLinkList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFilteredLinkList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredLinkList_args");

    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MIN_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("min_timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField MAX_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("max_timestamp", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilteredLinkList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilteredLinkList_argsTupleSchemeFactory());
    }

    public long id1; // required
    public long link_type; // required
    public long min_timestamp; // required
    public long max_timestamp; // required
    public long offset; // required
    public long limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID1((short)1, "id1"),
      LINK_TYPE((short)2, "link_type"),
      MIN_TIMESTAMP((short)3, "min_timestamp"),
      MAX_TIMESTAMP((short)4, "max_timestamp"),
      OFFSET((short)5, "offset"),
      LIMIT((short)6, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID1
            return ID1;
          case 2: // LINK_TYPE
            return LINK_TYPE;
          case 3: // MIN_TIMESTAMP
            return MIN_TIMESTAMP;
          case 4: // MAX_TIMESTAMP
            return MAX_TIMESTAMP;
          case 5: // OFFSET
            return OFFSET;
          case 6: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID1_ISSET_ID = 0;
    private static final int __LINK_TYPE_ISSET_ID = 1;
    private static final int __MIN_TIMESTAMP_ISSET_ID = 2;
    private static final int __MAX_TIMESTAMP_ISSET_ID = 3;
    private static final int __OFFSET_ISSET_ID = 4;
    private static final int __LIMIT_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MIN_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("min_timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MAX_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("max_timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredLinkList_args.class, metaDataMap);
    }

    public getFilteredLinkList_args() {
    }

    public getFilteredLinkList_args(
      long id1,
      long link_type,
      long min_timestamp,
      long max_timestamp,
      long offset,
      long limit)
    {
      this();
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
      this.min_timestamp = min_timestamp;
      setMin_timestampIsSet(true);
      this.max_timestamp = max_timestamp;
      setMax_timestampIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredLinkList_args(getFilteredLinkList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id1 = other.id1;
      this.link_type = other.link_type;
      this.min_timestamp = other.min_timestamp;
      this.max_timestamp = other.max_timestamp;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public getFilteredLinkList_args deepCopy() {
      return new getFilteredLinkList_args(this);
    }

    @Override
    public void clear() {
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
      setMin_timestampIsSet(false);
      this.min_timestamp = 0;
      setMax_timestampIsSet(false);
      this.max_timestamp = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getId1() {
      return this.id1;
    }

    public getFilteredLinkList_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public getFilteredLinkList_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public long getMin_timestamp() {
      return this.min_timestamp;
    }

    public getFilteredLinkList_args setMin_timestamp(long min_timestamp) {
      this.min_timestamp = min_timestamp;
      setMin_timestampIsSet(true);
      return this;
    }

    public void unsetMin_timestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field min_timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetMin_timestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __MIN_TIMESTAMP_ISSET_ID);
    }

    public void setMin_timestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_TIMESTAMP_ISSET_ID, value);
    }

    public long getMax_timestamp() {
      return this.max_timestamp;
    }

    public getFilteredLinkList_args setMax_timestamp(long max_timestamp) {
      this.max_timestamp = max_timestamp;
      setMax_timestampIsSet(true);
      return this;
    }

    public void unsetMax_timestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field max_timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_timestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_TIMESTAMP_ISSET_ID);
    }

    public void setMax_timestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_TIMESTAMP_ISSET_ID, value);
    }

    public long getOffset() {
      return this.offset;
    }

    public getFilteredLinkList_args setOffset(long offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public long getLimit() {
      return this.limit;
    }

    public getFilteredLinkList_args setLimit(long limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      case MIN_TIMESTAMP:
        if (value == null) {
          unsetMin_timestamp();
        } else {
          setMin_timestamp((Long)value);
        }
        break;

      case MAX_TIMESTAMP:
        if (value == null) {
          unsetMax_timestamp();
        } else {
          setMax_timestamp((Long)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Long)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      case MIN_TIMESTAMP:
        return getMin_timestamp();

      case MAX_TIMESTAMP:
        return getMax_timestamp();

      case OFFSET:
        return getOffset();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      case MIN_TIMESTAMP:
        return isSetMin_timestamp();
      case MAX_TIMESTAMP:
        return isSetMax_timestamp();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredLinkList_args)
        return this.equals((getFilteredLinkList_args)that);
      return false;
    }

    public boolean equals(getFilteredLinkList_args that) {
      if (that == null)
        return false;

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      boolean this_present_min_timestamp = true;
      boolean that_present_min_timestamp = true;
      if (this_present_min_timestamp || that_present_min_timestamp) {
        if (!(this_present_min_timestamp && that_present_min_timestamp))
          return false;
        if (this.min_timestamp != that.min_timestamp)
          return false;
      }

      boolean this_present_max_timestamp = true;
      boolean that_present_max_timestamp = true;
      if (this_present_max_timestamp || that_present_max_timestamp) {
        if (!(this_present_max_timestamp && that_present_max_timestamp))
          return false;
        if (this.max_timestamp != that.max_timestamp)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      boolean present_min_timestamp = true;
      list.add(present_min_timestamp);
      if (present_min_timestamp)
        list.add(min_timestamp);

      boolean present_max_timestamp = true;
      list.add(present_max_timestamp);
      if (present_max_timestamp)
        list.add(max_timestamp);

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilteredLinkList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMin_timestamp()).compareTo(other.isSetMin_timestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMin_timestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_timestamp, other.min_timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax_timestamp()).compareTo(other.isSetMax_timestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax_timestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_timestamp, other.max_timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredLinkList_args(");
      boolean first = true;

      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("min_timestamp:");
      sb.append(this.min_timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_timestamp:");
      sb.append(this.max_timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilteredLinkList_argsStandardSchemeFactory implements SchemeFactory {
      public getFilteredLinkList_argsStandardScheme getScheme() {
        return new getFilteredLinkList_argsStandardScheme();
      }
    }

    private static class getFilteredLinkList_argsStandardScheme extends StandardScheme<getFilteredLinkList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilteredLinkList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MIN_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.min_timestamp = iprot.readI64();
                struct.setMin_timestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAX_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.max_timestamp = iprot.readI64();
                struct.setMax_timestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.offset = iprot.readI64();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.limit = iprot.readI64();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilteredLinkList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.min_timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.max_timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI64(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilteredLinkList_argsTupleSchemeFactory implements SchemeFactory {
      public getFilteredLinkList_argsTupleScheme getScheme() {
        return new getFilteredLinkList_argsTupleScheme();
      }
    }

    private static class getFilteredLinkList_argsTupleScheme extends TupleScheme<getFilteredLinkList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId1()) {
          optionals.set(0);
        }
        if (struct.isSetLink_type()) {
          optionals.set(1);
        }
        if (struct.isSetMin_timestamp()) {
          optionals.set(2);
        }
        if (struct.isSetMax_timestamp()) {
          optionals.set(3);
        }
        if (struct.isSetOffset()) {
          optionals.set(4);
        }
        if (struct.isSetLimit()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
        if (struct.isSetMin_timestamp()) {
          oprot.writeI64(struct.min_timestamp);
        }
        if (struct.isSetMax_timestamp()) {
          oprot.writeI64(struct.max_timestamp);
        }
        if (struct.isSetOffset()) {
          oprot.writeI64(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI64(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.min_timestamp = iprot.readI64();
          struct.setMin_timestampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.max_timestamp = iprot.readI64();
          struct.setMax_timestampIsSet(true);
        }
        if (incoming.get(4)) {
          struct.offset = iprot.readI64();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(5)) {
          struct.limit = iprot.readI64();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getFilteredLinkList_result implements org.apache.thrift.TBase<getFilteredLinkList_result, getFilteredLinkList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFilteredLinkList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredLinkList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilteredLinkList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilteredLinkList_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredLinkList_result.class, metaDataMap);
    }

    public getFilteredLinkList_result() {
    }

    public getFilteredLinkList_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredLinkList_result(getFilteredLinkList_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFilteredLinkList_result deepCopy() {
      return new getFilteredLinkList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public getFilteredLinkList_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredLinkList_result)
        return this.equals((getFilteredLinkList_result)that);
      return false;
    }

    public boolean equals(getFilteredLinkList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilteredLinkList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredLinkList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilteredLinkList_resultStandardSchemeFactory implements SchemeFactory {
      public getFilteredLinkList_resultStandardScheme getScheme() {
        return new getFilteredLinkList_resultStandardScheme();
      }
    }

    private static class getFilteredLinkList_resultStandardScheme extends StandardScheme<getFilteredLinkList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilteredLinkList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list224.size);
                  ThriftAssoc _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = new ThriftAssoc();
                    _elem225.read(iprot);
                    struct.success.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilteredLinkList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilteredLinkList_resultTupleSchemeFactory implements SchemeFactory {
      public getFilteredLinkList_resultTupleScheme getScheme() {
        return new getFilteredLinkList_resultTupleScheme();
      }
    }

    private static class getFilteredLinkList_resultTupleScheme extends TupleScheme<getFilteredLinkList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list229.size);
            ThriftAssoc _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = new ThriftAssoc();
              _elem230.read(iprot);
              struct.success.add(_elem230);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFilteredLinkListLocal_args implements org.apache.thrift.TBase<getFilteredLinkListLocal_args, getFilteredLinkListLocal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFilteredLinkListLocal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredLinkListLocal_args");

    private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField MIN_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("min_timestamp", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField MAX_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("max_timestamp", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilteredLinkListLocal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilteredLinkListLocal_argsTupleSchemeFactory());
    }

    public long shard_id; // required
    public long id1; // required
    public long link_type; // required
    public long min_timestamp; // required
    public long max_timestamp; // required
    public long offset; // required
    public long limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARD_ID((short)1, "shard_id"),
      ID1((short)2, "id1"),
      LINK_TYPE((short)3, "link_type"),
      MIN_TIMESTAMP((short)4, "min_timestamp"),
      MAX_TIMESTAMP((short)5, "max_timestamp"),
      OFFSET((short)6, "offset"),
      LIMIT((short)7, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARD_ID
            return SHARD_ID;
          case 2: // ID1
            return ID1;
          case 3: // LINK_TYPE
            return LINK_TYPE;
          case 4: // MIN_TIMESTAMP
            return MIN_TIMESTAMP;
          case 5: // MAX_TIMESTAMP
            return MAX_TIMESTAMP;
          case 6: // OFFSET
            return OFFSET;
          case 7: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHARD_ID_ISSET_ID = 0;
    private static final int __ID1_ISSET_ID = 1;
    private static final int __LINK_TYPE_ISSET_ID = 2;
    private static final int __MIN_TIMESTAMP_ISSET_ID = 3;
    private static final int __MAX_TIMESTAMP_ISSET_ID = 4;
    private static final int __OFFSET_ISSET_ID = 5;
    private static final int __LIMIT_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shard_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MIN_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("min_timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MAX_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("max_timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredLinkListLocal_args.class, metaDataMap);
    }

    public getFilteredLinkListLocal_args() {
    }

    public getFilteredLinkListLocal_args(
      long shard_id,
      long id1,
      long link_type,
      long min_timestamp,
      long max_timestamp,
      long offset,
      long limit)
    {
      this();
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      this.id1 = id1;
      setId1IsSet(true);
      this.link_type = link_type;
      setLink_typeIsSet(true);
      this.min_timestamp = min_timestamp;
      setMin_timestampIsSet(true);
      this.max_timestamp = max_timestamp;
      setMax_timestampIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredLinkListLocal_args(getFilteredLinkListLocal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shard_id = other.shard_id;
      this.id1 = other.id1;
      this.link_type = other.link_type;
      this.min_timestamp = other.min_timestamp;
      this.max_timestamp = other.max_timestamp;
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public getFilteredLinkListLocal_args deepCopy() {
      return new getFilteredLinkListLocal_args(this);
    }

    @Override
    public void clear() {
      setShard_idIsSet(false);
      this.shard_id = 0;
      setId1IsSet(false);
      this.id1 = 0;
      setLink_typeIsSet(false);
      this.link_type = 0;
      setMin_timestampIsSet(false);
      this.min_timestamp = 0;
      setMax_timestampIsSet(false);
      this.max_timestamp = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public long getShard_id() {
      return this.shard_id;
    }

    public getFilteredLinkListLocal_args setShard_id(long shard_id) {
      this.shard_id = shard_id;
      setShard_idIsSet(true);
      return this;
    }

    public void unsetShard_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    /** Returns true if field shard_id is set (has been assigned a value) and false otherwise */
    public boolean isSetShard_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SHARD_ID_ISSET_ID);
    }

    public void setShard_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARD_ID_ISSET_ID, value);
    }

    public long getId1() {
      return this.id1;
    }

    public getFilteredLinkListLocal_args setId1(long id1) {
      this.id1 = id1;
      setId1IsSet(true);
      return this;
    }

    public void unsetId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
    public boolean isSetId1() {
      return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
    }

    public void setId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
    }

    public long getLink_type() {
      return this.link_type;
    }

    public getFilteredLinkListLocal_args setLink_type(long link_type) {
      this.link_type = link_type;
      setLink_typeIsSet(true);
      return this;
    }

    public void unsetLink_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
    public boolean isSetLink_type() {
      return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
    }

    public void setLink_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
    }

    public long getMin_timestamp() {
      return this.min_timestamp;
    }

    public getFilteredLinkListLocal_args setMin_timestamp(long min_timestamp) {
      this.min_timestamp = min_timestamp;
      setMin_timestampIsSet(true);
      return this;
    }

    public void unsetMin_timestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field min_timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetMin_timestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __MIN_TIMESTAMP_ISSET_ID);
    }

    public void setMin_timestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_TIMESTAMP_ISSET_ID, value);
    }

    public long getMax_timestamp() {
      return this.max_timestamp;
    }

    public getFilteredLinkListLocal_args setMax_timestamp(long max_timestamp) {
      this.max_timestamp = max_timestamp;
      setMax_timestampIsSet(true);
      return this;
    }

    public void unsetMax_timestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field max_timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_timestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_TIMESTAMP_ISSET_ID);
    }

    public void setMax_timestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_TIMESTAMP_ISSET_ID, value);
    }

    public long getOffset() {
      return this.offset;
    }

    public getFilteredLinkListLocal_args setOffset(long offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public long getLimit() {
      return this.limit;
    }

    public getFilteredLinkListLocal_args setLimit(long limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARD_ID:
        if (value == null) {
          unsetShard_id();
        } else {
          setShard_id((Long)value);
        }
        break;

      case ID1:
        if (value == null) {
          unsetId1();
        } else {
          setId1((Long)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLink_type();
        } else {
          setLink_type((Long)value);
        }
        break;

      case MIN_TIMESTAMP:
        if (value == null) {
          unsetMin_timestamp();
        } else {
          setMin_timestamp((Long)value);
        }
        break;

      case MAX_TIMESTAMP:
        if (value == null) {
          unsetMax_timestamp();
        } else {
          setMax_timestamp((Long)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Long)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARD_ID:
        return getShard_id();

      case ID1:
        return getId1();

      case LINK_TYPE:
        return getLink_type();

      case MIN_TIMESTAMP:
        return getMin_timestamp();

      case MAX_TIMESTAMP:
        return getMax_timestamp();

      case OFFSET:
        return getOffset();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARD_ID:
        return isSetShard_id();
      case ID1:
        return isSetId1();
      case LINK_TYPE:
        return isSetLink_type();
      case MIN_TIMESTAMP:
        return isSetMin_timestamp();
      case MAX_TIMESTAMP:
        return isSetMax_timestamp();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredLinkListLocal_args)
        return this.equals((getFilteredLinkListLocal_args)that);
      return false;
    }

    public boolean equals(getFilteredLinkListLocal_args that) {
      if (that == null)
        return false;

      boolean this_present_shard_id = true;
      boolean that_present_shard_id = true;
      if (this_present_shard_id || that_present_shard_id) {
        if (!(this_present_shard_id && that_present_shard_id))
          return false;
        if (this.shard_id != that.shard_id)
          return false;
      }

      boolean this_present_id1 = true;
      boolean that_present_id1 = true;
      if (this_present_id1 || that_present_id1) {
        if (!(this_present_id1 && that_present_id1))
          return false;
        if (this.id1 != that.id1)
          return false;
      }

      boolean this_present_link_type = true;
      boolean that_present_link_type = true;
      if (this_present_link_type || that_present_link_type) {
        if (!(this_present_link_type && that_present_link_type))
          return false;
        if (this.link_type != that.link_type)
          return false;
      }

      boolean this_present_min_timestamp = true;
      boolean that_present_min_timestamp = true;
      if (this_present_min_timestamp || that_present_min_timestamp) {
        if (!(this_present_min_timestamp && that_present_min_timestamp))
          return false;
        if (this.min_timestamp != that.min_timestamp)
          return false;
      }

      boolean this_present_max_timestamp = true;
      boolean that_present_max_timestamp = true;
      if (this_present_max_timestamp || that_present_max_timestamp) {
        if (!(this_present_max_timestamp && that_present_max_timestamp))
          return false;
        if (this.max_timestamp != that.max_timestamp)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shard_id = true;
      list.add(present_shard_id);
      if (present_shard_id)
        list.add(shard_id);

      boolean present_id1 = true;
      list.add(present_id1);
      if (present_id1)
        list.add(id1);

      boolean present_link_type = true;
      list.add(present_link_type);
      if (present_link_type)
        list.add(link_type);

      boolean present_min_timestamp = true;
      list.add(present_min_timestamp);
      if (present_min_timestamp)
        list.add(min_timestamp);

      boolean present_max_timestamp = true;
      list.add(present_max_timestamp);
      if (present_max_timestamp)
        list.add(max_timestamp);

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilteredLinkListLocal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShard_id()).compareTo(other.isSetShard_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_id, other.shard_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMin_timestamp()).compareTo(other.isSetMin_timestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMin_timestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_timestamp, other.min_timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax_timestamp()).compareTo(other.isSetMax_timestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax_timestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_timestamp, other.max_timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredLinkListLocal_args(");
      boolean first = true;

      sb.append("shard_id:");
      sb.append(this.shard_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id1:");
      sb.append(this.id1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("link_type:");
      sb.append(this.link_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("min_timestamp:");
      sb.append(this.min_timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_timestamp:");
      sb.append(this.max_timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilteredLinkListLocal_argsStandardSchemeFactory implements SchemeFactory {
      public getFilteredLinkListLocal_argsStandardScheme getScheme() {
        return new getFilteredLinkListLocal_argsStandardScheme();
      }
    }

    private static class getFilteredLinkListLocal_argsStandardScheme extends StandardScheme<getFilteredLinkListLocal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilteredLinkListLocal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shard_id = iprot.readI64();
                struct.setShard_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id1 = iprot.readI64();
                struct.setId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.link_type = iprot.readI64();
                struct.setLink_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MIN_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.min_timestamp = iprot.readI64();
                struct.setMin_timestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MAX_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.max_timestamp = iprot.readI64();
                struct.setMax_timestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.offset = iprot.readI64();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.limit = iprot.readI64();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilteredLinkListLocal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeI64(struct.shard_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        oprot.writeI64(struct.id1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI64(struct.link_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.min_timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.max_timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI64(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilteredLinkListLocal_argsTupleSchemeFactory implements SchemeFactory {
      public getFilteredLinkListLocal_argsTupleScheme getScheme() {
        return new getFilteredLinkListLocal_argsTupleScheme();
      }
    }

    private static class getFilteredLinkListLocal_argsTupleScheme extends TupleScheme<getFilteredLinkListLocal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkListLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShard_id()) {
          optionals.set(0);
        }
        if (struct.isSetId1()) {
          optionals.set(1);
        }
        if (struct.isSetLink_type()) {
          optionals.set(2);
        }
        if (struct.isSetMin_timestamp()) {
          optionals.set(3);
        }
        if (struct.isSetMax_timestamp()) {
          optionals.set(4);
        }
        if (struct.isSetOffset()) {
          optionals.set(5);
        }
        if (struct.isSetLimit()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetShard_id()) {
          oprot.writeI64(struct.shard_id);
        }
        if (struct.isSetId1()) {
          oprot.writeI64(struct.id1);
        }
        if (struct.isSetLink_type()) {
          oprot.writeI64(struct.link_type);
        }
        if (struct.isSetMin_timestamp()) {
          oprot.writeI64(struct.min_timestamp);
        }
        if (struct.isSetMax_timestamp()) {
          oprot.writeI64(struct.max_timestamp);
        }
        if (struct.isSetOffset()) {
          oprot.writeI64(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI64(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkListLocal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.shard_id = iprot.readI64();
          struct.setShard_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id1 = iprot.readI64();
          struct.setId1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.link_type = iprot.readI64();
          struct.setLink_typeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.min_timestamp = iprot.readI64();
          struct.setMin_timestampIsSet(true);
        }
        if (incoming.get(4)) {
          struct.max_timestamp = iprot.readI64();
          struct.setMax_timestampIsSet(true);
        }
        if (incoming.get(5)) {
          struct.offset = iprot.readI64();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(6)) {
          struct.limit = iprot.readI64();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getFilteredLinkListLocal_result implements org.apache.thrift.TBase<getFilteredLinkListLocal_result, getFilteredLinkListLocal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFilteredLinkListLocal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredLinkListLocal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilteredLinkListLocal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilteredLinkListLocal_resultTupleSchemeFactory());
    }

    public List<ThriftAssoc> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAssoc.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredLinkListLocal_result.class, metaDataMap);
    }

    public getFilteredLinkListLocal_result() {
    }

    public getFilteredLinkListLocal_result(
      List<ThriftAssoc> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredLinkListLocal_result(getFilteredLinkListLocal_result other) {
      if (other.isSetSuccess()) {
        List<ThriftAssoc> __this__success = new ArrayList<ThriftAssoc>(other.success.size());
        for (ThriftAssoc other_element : other.success) {
          __this__success.add(new ThriftAssoc(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFilteredLinkListLocal_result deepCopy() {
      return new getFilteredLinkListLocal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftAssoc> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftAssoc elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftAssoc>();
      }
      this.success.add(elem);
    }

    public List<ThriftAssoc> getSuccess() {
      return this.success;
    }

    public getFilteredLinkListLocal_result setSuccess(List<ThriftAssoc> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftAssoc>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredLinkListLocal_result)
        return this.equals((getFilteredLinkListLocal_result)that);
      return false;
    }

    public boolean equals(getFilteredLinkListLocal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilteredLinkListLocal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredLinkListLocal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilteredLinkListLocal_resultStandardSchemeFactory implements SchemeFactory {
      public getFilteredLinkListLocal_resultStandardScheme getScheme() {
        return new getFilteredLinkListLocal_resultStandardScheme();
      }
    }

    private static class getFilteredLinkListLocal_resultStandardScheme extends StandardScheme<getFilteredLinkListLocal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilteredLinkListLocal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftAssoc>(_list232.size);
                  ThriftAssoc _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new ThriftAssoc();
                    _elem233.read(iprot);
                    struct.success.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilteredLinkListLocal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftAssoc _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilteredLinkListLocal_resultTupleSchemeFactory implements SchemeFactory {
      public getFilteredLinkListLocal_resultTupleScheme getScheme() {
        return new getFilteredLinkListLocal_resultTupleScheme();
      }
    }

    private static class getFilteredLinkListLocal_resultTupleScheme extends TupleScheme<getFilteredLinkListLocal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkListLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftAssoc _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilteredLinkListLocal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftAssoc>(_list237.size);
            ThriftAssoc _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new ThriftAssoc();
              _elem238.read(iprot);
              struct.success.add(_elem238);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
