#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from zipg import GraphQueryAggregatorService
from zipg.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 init()')
    print('  i32 connect_to_aggregators()')
    print('  void disconnect_from_aggregators()')
    print('  void shutdown()')
    print('  void record_edge_updates(i32 next_shard, i32 local_shard,  updates)')
    print('  void record_node_append(i32 next_shard, i32 local_shard, i64 obj)')
    print('  string get_attribute(i64 nodeId, i32 attrId)')
    print('  string get_attribute_local(i64 shardId, i64 nodeId, i32 attrId)')
    print('   get_neighbors(i64 nodeId)')
    print('   get_neighbors_local(i32 shardId, i64 nodeId)')
    print('   get_neighbors_atype(i64 nodeId, i64 atype)')
    print('   get_neighbors_atype_local(i32 shardId, i64 nodeId, i64 atype)')
    print('   get_neighbors_attr(i64 nodeId, i32 attrId, string attrKey)')
    print('   get_neighbors_attr_local(i32 shardId, i64 nodeId, i32 attrId, string attrKey)')
    print('   get_nodes(i32 attrId, string attrKey)')
    print('   get_nodes_local(i32 attrId, string attrKey)')
    print('   get_nodes2(i32 attrId1, string attrKey1, i32 attrId2, string attrKey2)')
    print('   get_nodes2_local(i32 attrId1, string attrKey1, i32 attrId2, string attrKey2)')
    print('   filter_nodes_local( nodeIds, i32 attrId, string attrKey)')
    print('   get_edge_attrs(i64 nodeId, i64 atype)')
    print('   get_edge_attrs_local(i32 shardId, i64 nodeId, i64 atype)')
    print('   assoc_range(i64 src, i64 atype, i32 off, i32 len)')
    print('   assoc_range_local(i32 shardId, i64 src, i64 atype, i32 off, i32 len)')
    print('  i64 assoc_count(i64 src, i64 atype)')
    print('  i64 assoc_count_local(i32 shardId, i64 src, i64 atype)')
    print('   assoc_get(i64 src, i64 atype,  dstIdSet, i64 tLow, i64 tHigh)')
    print('   assoc_get_local(i32 shardId, i64 src, i64 atype,  dstIdSet, i64 tLow, i64 tHigh)')
    print('  i64 obj_add( attrs)')
    print('   obj_get(i64 nodeId)')
    print('   obj_get_local(i32 shardId, i64 nodeId)')
    print('   assoc_time_range(i64 src, i64 atype, i64 tLow, i64 tHigh, i32 limit)')
    print('   assoc_time_range_local(i32 shardId, i64 src, i64 atype, i64 tLow, i64 tHigh, i32 limit)')
    print('  i32 assoc_add(i64 src, i64 atype, i64 dst, i64 time, string attr)')
    print('  string getNode(i64 id)')
    print('  string getNodeLocal(i64 shard_id, i64 id)')
    print('  i64 addNode(i64 id, string data)')
    print('  bool deleteNode(i64 id)')
    print('  bool deleteNodeLocal(i64 shard_id, i64 id)')
    print('  bool updateNode(i64 id, string data)')
    print('  ThriftAssoc getLink(i64 id1, i64 link_type, i64 id2)')
    print('  ThriftAssoc getLinkLocal(i64 shard_id, i64 id1, i64 link_type, i64 id2)')
    print('  bool addLink(ThriftAssoc link)')
    print('  bool deleteLink(i64 id1, i64 link_type, i64 id2)')
    print('  bool deleteLinkLocal(i64 shard_id, i64 id1, i64 link_type, i64 id2)')
    print('  bool updateLink(ThriftAssoc link)')
    print('   getLinkList(i64 id1, i64 link_type)')
    print('   getLinkListLocal(i64 shard_id, i64 id1, i64 link_type)')
    print('   getFilteredLinkList(i64 id1, i64 link_type, i64 min_timestamp, i64 max_timestamp, i64 offset, i64 limit)')
    print('   getFilteredLinkListLocal(i64 shard_id, i64 id1, i64 link_type, i64 min_timestamp, i64 max_timestamp, i64 offset, i64 limit)')
    print('  i64 countLinks(i64 id1, i64 link_type)')
    print('  RPQCtx rpq( query)')
    print('  RPQCtx rpq_local( query)')
    print('  RPQCtx advance_rpq_ctx( query, RPQCtx ctx)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = GraphQueryAggregatorService.Client(protocol)
transport.open()

if cmd == 'init':
    if len(args) != 0:
        print('init requires 0 args')
        sys.exit(1)
    pp.pprint(client.init())

elif cmd == 'connect_to_aggregators':
    if len(args) != 0:
        print('connect_to_aggregators requires 0 args')
        sys.exit(1)
    pp.pprint(client.connect_to_aggregators())

elif cmd == 'disconnect_from_aggregators':
    if len(args) != 0:
        print('disconnect_from_aggregators requires 0 args')
        sys.exit(1)
    pp.pprint(client.disconnect_from_aggregators())

elif cmd == 'shutdown':
    if len(args) != 0:
        print('shutdown requires 0 args')
        sys.exit(1)
    pp.pprint(client.shutdown())

elif cmd == 'record_edge_updates':
    if len(args) != 3:
        print('record_edge_updates requires 3 args')
        sys.exit(1)
    pp.pprint(client.record_edge_updates(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'record_node_append':
    if len(args) != 3:
        print('record_node_append requires 3 args')
        sys.exit(1)
    pp.pprint(client.record_node_append(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_attribute':
    if len(args) != 2:
        print('get_attribute requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_attribute(eval(args[0]), eval(args[1]),))

elif cmd == 'get_attribute_local':
    if len(args) != 3:
        print('get_attribute_local requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_attribute_local(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_neighbors':
    if len(args) != 1:
        print('get_neighbors requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_neighbors(eval(args[0]),))

elif cmd == 'get_neighbors_local':
    if len(args) != 2:
        print('get_neighbors_local requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_neighbors_local(eval(args[0]), eval(args[1]),))

elif cmd == 'get_neighbors_atype':
    if len(args) != 2:
        print('get_neighbors_atype requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_neighbors_atype(eval(args[0]), eval(args[1]),))

elif cmd == 'get_neighbors_atype_local':
    if len(args) != 3:
        print('get_neighbors_atype_local requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_neighbors_atype_local(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_neighbors_attr':
    if len(args) != 3:
        print('get_neighbors_attr requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_neighbors_attr(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'get_neighbors_attr_local':
    if len(args) != 4:
        print('get_neighbors_attr_local requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_neighbors_attr_local(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'get_nodes':
    if len(args) != 2:
        print('get_nodes requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_nodes(eval(args[0]), args[1],))

elif cmd == 'get_nodes_local':
    if len(args) != 2:
        print('get_nodes_local requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_nodes_local(eval(args[0]), args[1],))

elif cmd == 'get_nodes2':
    if len(args) != 4:
        print('get_nodes2 requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_nodes2(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'get_nodes2_local':
    if len(args) != 4:
        print('get_nodes2_local requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_nodes2_local(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'filter_nodes_local':
    if len(args) != 3:
        print('filter_nodes_local requires 3 args')
        sys.exit(1)
    pp.pprint(client.filter_nodes_local(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'get_edge_attrs':
    if len(args) != 2:
        print('get_edge_attrs requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_edge_attrs(eval(args[0]), eval(args[1]),))

elif cmd == 'get_edge_attrs_local':
    if len(args) != 3:
        print('get_edge_attrs_local requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_edge_attrs_local(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'assoc_range':
    if len(args) != 4:
        print('assoc_range requires 4 args')
        sys.exit(1)
    pp.pprint(client.assoc_range(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'assoc_range_local':
    if len(args) != 5:
        print('assoc_range_local requires 5 args')
        sys.exit(1)
    pp.pprint(client.assoc_range_local(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'assoc_count':
    if len(args) != 2:
        print('assoc_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.assoc_count(eval(args[0]), eval(args[1]),))

elif cmd == 'assoc_count_local':
    if len(args) != 3:
        print('assoc_count_local requires 3 args')
        sys.exit(1)
    pp.pprint(client.assoc_count_local(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'assoc_get':
    if len(args) != 5:
        print('assoc_get requires 5 args')
        sys.exit(1)
    pp.pprint(client.assoc_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'assoc_get_local':
    if len(args) != 6:
        print('assoc_get_local requires 6 args')
        sys.exit(1)
    pp.pprint(client.assoc_get_local(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'obj_add':
    if len(args) != 1:
        print('obj_add requires 1 args')
        sys.exit(1)
    pp.pprint(client.obj_add(eval(args[0]),))

elif cmd == 'obj_get':
    if len(args) != 1:
        print('obj_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.obj_get(eval(args[0]),))

elif cmd == 'obj_get_local':
    if len(args) != 2:
        print('obj_get_local requires 2 args')
        sys.exit(1)
    pp.pprint(client.obj_get_local(eval(args[0]), eval(args[1]),))

elif cmd == 'assoc_time_range':
    if len(args) != 5:
        print('assoc_time_range requires 5 args')
        sys.exit(1)
    pp.pprint(client.assoc_time_range(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'assoc_time_range_local':
    if len(args) != 6:
        print('assoc_time_range_local requires 6 args')
        sys.exit(1)
    pp.pprint(client.assoc_time_range_local(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'assoc_add':
    if len(args) != 5:
        print('assoc_add requires 5 args')
        sys.exit(1)
    pp.pprint(client.assoc_add(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'getNode':
    if len(args) != 1:
        print('getNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.getNode(eval(args[0]),))

elif cmd == 'getNodeLocal':
    if len(args) != 2:
        print('getNodeLocal requires 2 args')
        sys.exit(1)
    pp.pprint(client.getNodeLocal(eval(args[0]), eval(args[1]),))

elif cmd == 'addNode':
    if len(args) != 2:
        print('addNode requires 2 args')
        sys.exit(1)
    pp.pprint(client.addNode(eval(args[0]), args[1],))

elif cmd == 'deleteNode':
    if len(args) != 1:
        print('deleteNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteNode(eval(args[0]),))

elif cmd == 'deleteNodeLocal':
    if len(args) != 2:
        print('deleteNodeLocal requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteNodeLocal(eval(args[0]), eval(args[1]),))

elif cmd == 'updateNode':
    if len(args) != 2:
        print('updateNode requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateNode(eval(args[0]), args[1],))

elif cmd == 'getLink':
    if len(args) != 3:
        print('getLink requires 3 args')
        sys.exit(1)
    pp.pprint(client.getLink(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getLinkLocal':
    if len(args) != 4:
        print('getLinkLocal requires 4 args')
        sys.exit(1)
    pp.pprint(client.getLinkLocal(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'addLink':
    if len(args) != 1:
        print('addLink requires 1 args')
        sys.exit(1)
    pp.pprint(client.addLink(eval(args[0]),))

elif cmd == 'deleteLink':
    if len(args) != 3:
        print('deleteLink requires 3 args')
        sys.exit(1)
    pp.pprint(client.deleteLink(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'deleteLinkLocal':
    if len(args) != 4:
        print('deleteLinkLocal requires 4 args')
        sys.exit(1)
    pp.pprint(client.deleteLinkLocal(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'updateLink':
    if len(args) != 1:
        print('updateLink requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateLink(eval(args[0]),))

elif cmd == 'getLinkList':
    if len(args) != 2:
        print('getLinkList requires 2 args')
        sys.exit(1)
    pp.pprint(client.getLinkList(eval(args[0]), eval(args[1]),))

elif cmd == 'getLinkListLocal':
    if len(args) != 3:
        print('getLinkListLocal requires 3 args')
        sys.exit(1)
    pp.pprint(client.getLinkListLocal(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getFilteredLinkList':
    if len(args) != 6:
        print('getFilteredLinkList requires 6 args')
        sys.exit(1)
    pp.pprint(client.getFilteredLinkList(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'getFilteredLinkListLocal':
    if len(args) != 7:
        print('getFilteredLinkListLocal requires 7 args')
        sys.exit(1)
    pp.pprint(client.getFilteredLinkListLocal(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'countLinks':
    if len(args) != 2:
        print('countLinks requires 2 args')
        sys.exit(1)
    pp.pprint(client.countLinks(eval(args[0]), eval(args[1]),))

elif cmd == 'rpq':
    if len(args) != 1:
        print('rpq requires 1 args')
        sys.exit(1)
    pp.pprint(client.rpq(eval(args[0]),))

elif cmd == 'rpq_local':
    if len(args) != 1:
        print('rpq_local requires 1 args')
        sys.exit(1)
    pp.pprint(client.rpq_local(eval(args[0]),))

elif cmd == 'advance_rpq_ctx':
    if len(args) != 2:
        print('advance_rpq_ctx requires 2 args')
        sys.exit(1)
    pp.pprint(client.advance_rpq_ctx(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
